
BLDC_6_Step_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004684  08004684  00014684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b4  080046b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080046b4  080046b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046b4  080046b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046b4  080046b4  000146b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080046bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000284  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000290  20000290  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d345  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e65  00000000  00000000  0002d381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0002f1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009e0  00000000  00000000  0002fcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200a6  00000000  00000000  00030690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db53  00000000  00000000  00050736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7a2a  00000000  00000000  0005e289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00125cb3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bf0  00000000  00000000  00125d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800466c 	.word	0x0800466c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800466c 	.word	0x0800466c

080001d4 <PeripheralsStart>:
#include "main.h"
#include "SixStepCommutation.h"
#include "TimeTask.h"

void PeripheralsStart()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim4);	// Time Task için gerekli global interrupt başlatılıyor
 80001d8:	4833      	ldr	r0, [pc, #204]	; (80002a8 <PeripheralsStart+0xd4>)
 80001da:	f002 ff8d 	bl	80030f8 <HAL_TIM_Base_Start_IT>

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// Phase A High
 80001de:	2100      	movs	r1, #0
 80001e0:	4832      	ldr	r0, [pc, #200]	; (80002ac <PeripheralsStart+0xd8>)
 80001e2:	f003 f851 	bl	8003288 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	// Phase B High
 80001e6:	2104      	movs	r1, #4
 80001e8:	4830      	ldr	r0, [pc, #192]	; (80002ac <PeripheralsStart+0xd8>)
 80001ea:	f003 f84d 	bl	8003288 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	// Phase C High
 80001ee:	2108      	movs	r1, #8
 80001f0:	482e      	ldr	r0, [pc, #184]	; (80002ac <PeripheralsStart+0xd8>)
 80001f2:	f003 f849 	bl	8003288 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	// Phase A Low
 80001f6:	2100      	movs	r1, #0
 80001f8:	482d      	ldr	r0, [pc, #180]	; (80002b0 <PeripheralsStart+0xdc>)
 80001fa:	f003 f845 	bl	8003288 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);	// Phase B Low
 80001fe:	2104      	movs	r1, #4
 8000200:	482b      	ldr	r0, [pc, #172]	; (80002b0 <PeripheralsStart+0xdc>)
 8000202:	f003 f841 	bl	8003288 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);	// Phase C Low
 8000206:	2108      	movs	r1, #8
 8000208:	4829      	ldr	r0, [pc, #164]	; (80002b0 <PeripheralsStart+0xdc>)
 800020a:	f003 f83d 	bl	8003288 <HAL_TIM_PWM_Start>

	  HAL_COMP_Start(&hcomp1);	// Phase A - Neutral Point
 800020e:	4829      	ldr	r0, [pc, #164]	; (80002b4 <PeripheralsStart+0xe0>)
 8000210:	f001 f83c 	bl	800128c <HAL_COMP_Start>
	  HAL_COMP_Start(&hcomp3);  // Phase B - Neutral Point
 8000214:	4828      	ldr	r0, [pc, #160]	; (80002b8 <PeripheralsStart+0xe4>)
 8000216:	f001 f839 	bl	800128c <HAL_COMP_Start>
	  HAL_COMP_Start(&hcomp5);  // Phase C - Neutral Point
 800021a:	4828      	ldr	r0, [pc, #160]	; (80002bc <PeripheralsStart+0xe8>)
 800021c:	f001 f836 	bl	800128c <HAL_COMP_Start>

	  Motor_Control.Duty_Cycle = 50;	// Default %50 Duty Cycle
 8000220:	4b27      	ldr	r3, [pc, #156]	; (80002c0 <PeripheralsStart+0xec>)
 8000222:	2232      	movs	r2, #50	; 0x32
 8000224:	705a      	strb	r2, [r3, #1]
	  Motor_Control.Pulse_Center = 0;
 8000226:	4b26      	ldr	r3, [pc, #152]	; (80002c0 <PeripheralsStart+0xec>)
 8000228:	2200      	movs	r2, #0
 800022a:	619a      	str	r2, [r3, #24]

	  Motor_Control.A_Out = 0;
 800022c:	4b24      	ldr	r3, [pc, #144]	; (80002c0 <PeripheralsStart+0xec>)
 800022e:	2200      	movs	r2, #0
 8000230:	605a      	str	r2, [r3, #4]
	  Motor_Control.B_Out = 0;
 8000232:	4b23      	ldr	r3, [pc, #140]	; (80002c0 <PeripheralsStart+0xec>)
 8000234:	2200      	movs	r2, #0
 8000236:	609a      	str	r2, [r3, #8]
	  Motor_Control.C_Out = 0;
 8000238:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <PeripheralsStart+0xec>)
 800023a:	2200      	movs	r2, #0
 800023c:	60da      	str	r2, [r3, #12]

	  Motor_Control.Rotor_Position = 0;
 800023e:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <PeripheralsStart+0xec>)
 8000240:	2200      	movs	r2, #0
 8000242:	709a      	strb	r2, [r3, #2]
	  Motor_Control.Last_Trigger = 0;
 8000244:	4b1e      	ldr	r3, [pc, #120]	; (80002c0 <PeripheralsStart+0xec>)
 8000246:	2200      	movs	r2, #0
 8000248:	70da      	strb	r2, [r3, #3]
	  Motor_Control.State = 0;
 800024a:	4b1d      	ldr	r3, [pc, #116]	; (80002c0 <PeripheralsStart+0xec>)
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]

	  Motor_Control.Signal = 0;
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <PeripheralsStart+0xec>)
 8000252:	2200      	movs	r2, #0
 8000254:	611a      	str	r2, [r3, #16]
	  Motor_Control.Max_Signal = 0;
 8000256:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <PeripheralsStart+0xec>)
 8000258:	2200      	movs	r2, #0
 800025a:	615a      	str	r2, [r3, #20]

	  Start_Up.Duty_Cycle = 100;
 800025c:	4b19      	ldr	r3, [pc, #100]	; (80002c4 <PeripheralsStart+0xf0>)
 800025e:	2264      	movs	r2, #100	; 0x64
 8000260:	701a      	strb	r2, [r3, #0]
	  Start_Up.Delay_MilliSeconds = 5;
 8000262:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <PeripheralsStart+0xf0>)
 8000264:	2205      	movs	r2, #5
 8000266:	709a      	strb	r2, [r3, #2]
	  Start_Up.Tour = 10;
 8000268:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <PeripheralsStart+0xf0>)
 800026a:	220a      	movs	r2, #10
 800026c:	705a      	strb	r2, [r3, #1]
//	  Start_Up.PWM_Frequency = ( PeriphClkInit.Tim1ClockSelection/(htim1.Init.Period+1)*(htim1.Init.Prescaler+1));
	  Start_Up.State = 0;
 800026e:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <PeripheralsStart+0xf0>)
 8000270:	2200      	movs	r2, #0
 8000272:	721a      	strb	r2, [r3, #8]
	  Start_Up.AlignCoefficient = 5;
 8000274:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <PeripheralsStart+0xf0>)
 8000276:	2205      	movs	r2, #5
 8000278:	821a      	strh	r2, [r3, #16]

	  trigger_Sequence = 1;
 800027a:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <PeripheralsStart+0xf4>)
 800027c:	2201      	movs	r2, #1
 800027e:	701a      	strb	r2, [r3, #0]

	  Trigger_Control_Index[1] = State_A_B_In;
 8000280:	4b12      	ldr	r3, [pc, #72]	; (80002cc <PeripheralsStart+0xf8>)
 8000282:	2206      	movs	r2, #6
 8000284:	705a      	strb	r2, [r3, #1]
	  Trigger_Control_Index[2] = State_A_C_In;
 8000286:	4b11      	ldr	r3, [pc, #68]	; (80002cc <PeripheralsStart+0xf8>)
 8000288:	2204      	movs	r2, #4
 800028a:	709a      	strb	r2, [r3, #2]
	  Trigger_Control_Index[3] = State_B_C_In;
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <PeripheralsStart+0xf8>)
 800028e:	2205      	movs	r2, #5
 8000290:	70da      	strb	r2, [r3, #3]
	  Trigger_Control_Index[4] = State_B_A_In;
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <PeripheralsStart+0xf8>)
 8000294:	2202      	movs	r2, #2
 8000296:	711a      	strb	r2, [r3, #4]
	  Trigger_Control_Index[5] = State_C_A_In;
 8000298:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <PeripheralsStart+0xf8>)
 800029a:	2201      	movs	r2, #1
 800029c:	715a      	strb	r2, [r3, #5]
	  Trigger_Control_Index[6] = State_C_B_In;
 800029e:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <PeripheralsStart+0xf8>)
 80002a0:	2203      	movs	r2, #3
 80002a2:	719a      	strb	r2, [r3, #6]
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000080 	.word	0x20000080
 80002ac:	20000154 	.word	0x20000154
 80002b0:	20000100 	.word	0x20000100
 80002b4:	200000d0 	.word	0x200000d0
 80002b8:	200001c0 	.word	0x200001c0
 80002bc:	20000240 	.word	0x20000240
 80002c0:	20000270 	.word	0x20000270
 80002c4:	200001a8 	.word	0x200001a8
 80002c8:	2000014c 	.word	0x2000014c
 80002cc:	200001a0 	.word	0x200001a0

080002d0 <Start_Up_Motor>:

void Start_Up_Motor()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
	int i = 0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	607b      	str	r3, [r7, #4]

	while(i < Start_Up.Tour)
 80002da:	e02a      	b.n	8000332 <Start_Up_Motor+0x62>
	{
		Start_Up.Counter = timerCounter % Start_Up.Delay_MilliSeconds;
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <Start_Up_Motor+0x7c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a1b      	ldr	r2, [pc, #108]	; (8000350 <Start_Up_Motor+0x80>)
 80002e2:	7892      	ldrb	r2, [r2, #2]
 80002e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80002e8:	fb02 f201 	mul.w	r2, r2, r1
 80002ec:	1a9b      	subs	r3, r3, r2
 80002ee:	4a18      	ldr	r2, [pc, #96]	; (8000350 <Start_Up_Motor+0x80>)
 80002f0:	60d3      	str	r3, [r2, #12]

		if(Start_Up.Counter == 0)
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <Start_Up_Motor+0x80>)
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d11b      	bne.n	8000332 <Start_Up_Motor+0x62>
		{
			Set_Motor_State(Start_Up.State, Start_Up.Duty_Cycle);
 80002fa:	4b15      	ldr	r3, [pc, #84]	; (8000350 <Start_Up_Motor+0x80>)
 80002fc:	7a1b      	ldrb	r3, [r3, #8]
 80002fe:	4a14      	ldr	r2, [pc, #80]	; (8000350 <Start_Up_Motor+0x80>)
 8000300:	7812      	ldrb	r2, [r2, #0]
 8000302:	b292      	uxth	r2, r2
 8000304:	4611      	mov	r1, r2
 8000306:	4618      	mov	r0, r3
 8000308:	f000 f8c8 	bl	800049c <Set_Motor_State>
			Start_Up.State = (Start_Up.State + 1) % 6;
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <Start_Up_Motor+0x80>)
 800030e:	7a1b      	ldrb	r3, [r3, #8]
 8000310:	1c5a      	adds	r2, r3, #1
 8000312:	4b10      	ldr	r3, [pc, #64]	; (8000354 <Start_Up_Motor+0x84>)
 8000314:	fb83 3102 	smull	r3, r1, r3, r2
 8000318:	17d3      	asrs	r3, r2, #31
 800031a:	1ac9      	subs	r1, r1, r3
 800031c:	460b      	mov	r3, r1
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	440b      	add	r3, r1
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	1ad1      	subs	r1, r2, r3
 8000326:	b2ca      	uxtb	r2, r1
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <Start_Up_Motor+0x80>)
 800032a:	721a      	strb	r2, [r3, #8]

			i++;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	3301      	adds	r3, #1
 8000330:	607b      	str	r3, [r7, #4]
	while(i < Start_Up.Tour)
 8000332:	4b07      	ldr	r3, [pc, #28]	; (8000350 <Start_Up_Motor+0x80>)
 8000334:	785b      	ldrb	r3, [r3, #1]
 8000336:	461a      	mov	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4293      	cmp	r3, r2
 800033c:	dbce      	blt.n	80002dc <Start_Up_Motor+0xc>
		}
	}

	drive_Stage = ALIGN;
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <Start_Up_Motor+0x88>)
 8000340:	2201      	movs	r2, #1
 8000342:	701a      	strb	r2, [r3, #0]
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000150 	.word	0x20000150
 8000350:	200001a8 	.word	0x200001a8
 8000354:	2aaaaaab 	.word	0x2aaaaaab
 8000358:	200001bc 	.word	0x200001bc

0800035c <Align_Motor>:

void Align_Motor()
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
	int i = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	607b      	str	r3, [r7, #4]

	while(i < Start_Up.Tour*Start_Up.AlignCoefficient)
 8000366:	e02a      	b.n	80003be <Align_Motor+0x62>
	{
		Start_Up.Counter = timerCounter % Start_Up.Delay_MilliSeconds;
 8000368:	4b1d      	ldr	r3, [pc, #116]	; (80003e0 <Align_Motor+0x84>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a1d      	ldr	r2, [pc, #116]	; (80003e4 <Align_Motor+0x88>)
 800036e:	7892      	ldrb	r2, [r2, #2]
 8000370:	fbb3 f1f2 	udiv	r1, r3, r2
 8000374:	fb02 f201 	mul.w	r2, r2, r1
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4a1a      	ldr	r2, [pc, #104]	; (80003e4 <Align_Motor+0x88>)
 800037c:	60d3      	str	r3, [r2, #12]

		if(Start_Up.Counter == 0)
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <Align_Motor+0x88>)
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d11b      	bne.n	80003be <Align_Motor+0x62>
		{
			Set_Motor_State(Start_Up.State, Start_Up.Duty_Cycle);
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <Align_Motor+0x88>)
 8000388:	7a1b      	ldrb	r3, [r3, #8]
 800038a:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <Align_Motor+0x88>)
 800038c:	7812      	ldrb	r2, [r2, #0]
 800038e:	b292      	uxth	r2, r2
 8000390:	4611      	mov	r1, r2
 8000392:	4618      	mov	r0, r3
 8000394:	f000 f882 	bl	800049c <Set_Motor_State>
			Start_Up.State = (Start_Up.State + 1) % 6;
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <Align_Motor+0x88>)
 800039a:	7a1b      	ldrb	r3, [r3, #8]
 800039c:	1c5a      	adds	r2, r3, #1
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <Align_Motor+0x8c>)
 80003a0:	fb83 3102 	smull	r3, r1, r3, r2
 80003a4:	17d3      	asrs	r3, r2, #31
 80003a6:	1ac9      	subs	r1, r1, r3
 80003a8:	460b      	mov	r3, r1
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	440b      	add	r3, r1
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	1ad1      	subs	r1, r2, r3
 80003b2:	b2ca      	uxtb	r2, r1
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <Align_Motor+0x88>)
 80003b6:	721a      	strb	r2, [r3, #8]

			i++;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3301      	adds	r3, #1
 80003bc:	607b      	str	r3, [r7, #4]
	while(i < Start_Up.Tour*Start_Up.AlignCoefficient)
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <Align_Motor+0x88>)
 80003c0:	785b      	ldrb	r3, [r3, #1]
 80003c2:	461a      	mov	r2, r3
 80003c4:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <Align_Motor+0x88>)
 80003c6:	8a1b      	ldrh	r3, [r3, #16]
 80003c8:	fb03 f302 	mul.w	r3, r3, r2
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	dbca      	blt.n	8000368 <Align_Motor+0xc>
		}
	}

	drive_Stage = RUN;
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <Align_Motor+0x90>)
 80003d4:	2202      	movs	r2, #2
 80003d6:	701a      	strb	r2, [r3, #0]
}
 80003d8:	bf00      	nop
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000150 	.word	0x20000150
 80003e4:	200001a8 	.word	0x200001a8
 80003e8:	2aaaaaab 	.word	0x2aaaaaab
 80003ec:	200001bc 	.word	0x200001bc

080003f0 <Run_Motor>:

void Run_Motor()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	  Motor_Control.A_Out = HAL_COMP_GetOutputLevel(&hcomp1) >> 30;
 80003f4:	4823      	ldr	r0, [pc, #140]	; (8000484 <Run_Motor+0x94>)
 80003f6:	f001 f839 	bl	800146c <HAL_COMP_GetOutputLevel>
 80003fa:	4603      	mov	r3, r0
 80003fc:	0f9b      	lsrs	r3, r3, #30
 80003fe:	4a22      	ldr	r2, [pc, #136]	; (8000488 <Run_Motor+0x98>)
 8000400:	6053      	str	r3, [r2, #4]
	  Motor_Control.B_Out = HAL_COMP_GetOutputLevel(&hcomp3) >> 30;
 8000402:	4822      	ldr	r0, [pc, #136]	; (800048c <Run_Motor+0x9c>)
 8000404:	f001 f832 	bl	800146c <HAL_COMP_GetOutputLevel>
 8000408:	4603      	mov	r3, r0
 800040a:	0f9b      	lsrs	r3, r3, #30
 800040c:	4a1e      	ldr	r2, [pc, #120]	; (8000488 <Run_Motor+0x98>)
 800040e:	6093      	str	r3, [r2, #8]
	  Motor_Control.C_Out = HAL_COMP_GetOutputLevel(&hcomp5) >> 30;
 8000410:	481f      	ldr	r0, [pc, #124]	; (8000490 <Run_Motor+0xa0>)
 8000412:	f001 f82b 	bl	800146c <HAL_COMP_GetOutputLevel>
 8000416:	4603      	mov	r3, r0
 8000418:	0f9b      	lsrs	r3, r3, #30
 800041a:	4a1b      	ldr	r2, [pc, #108]	; (8000488 <Run_Motor+0x98>)
 800041c:	60d3      	str	r3, [r2, #12]

	  Motor_Control.Rotor_Position = (Motor_Control.A_Out << 2) + (Motor_Control.B_Out << 1) + (Motor_Control.C_Out);
 800041e:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <Run_Motor+0x98>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	b2db      	uxtb	r3, r3
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	b2da      	uxtb	r2, r3
 8000428:	4b17      	ldr	r3, [pc, #92]	; (8000488 <Run_Motor+0x98>)
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	b2db      	uxtb	r3, r3
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	b2db      	uxtb	r3, r3
 8000432:	4413      	add	r3, r2
 8000434:	b2da      	uxtb	r2, r3
 8000436:	4b14      	ldr	r3, [pc, #80]	; (8000488 <Run_Motor+0x98>)
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	b2db      	uxtb	r3, r3
 800043c:	4413      	add	r3, r2
 800043e:	b2da      	uxtb	r2, r3
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <Run_Motor+0x98>)
 8000442:	709a      	strb	r2, [r3, #2]

	  if(Trigger_Control_Index[Motor_Control.Rotor_Position] == (Motor_Control.Last_Trigger % 5) + 1)
 8000444:	4b10      	ldr	r3, [pc, #64]	; (8000488 <Run_Motor+0x98>)
 8000446:	789b      	ldrb	r3, [r3, #2]
 8000448:	461a      	mov	r2, r3
 800044a:	4b12      	ldr	r3, [pc, #72]	; (8000494 <Run_Motor+0xa4>)
 800044c:	5c9b      	ldrb	r3, [r3, r2]
 800044e:	4618      	mov	r0, r3
 8000450:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <Run_Motor+0x98>)
 8000452:	78da      	ldrb	r2, [r3, #3]
 8000454:	4b10      	ldr	r3, [pc, #64]	; (8000498 <Run_Motor+0xa8>)
 8000456:	fba3 1302 	umull	r1, r3, r3, r2
 800045a:	0899      	lsrs	r1, r3, #2
 800045c:	460b      	mov	r3, r1
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	440b      	add	r3, r1
 8000462:	1ad3      	subs	r3, r2, r3
 8000464:	b2db      	uxtb	r3, r3
 8000466:	3301      	adds	r3, #1
 8000468:	4298      	cmp	r0, r3
 800046a:	d108      	bne.n	800047e <Run_Motor+0x8e>
	  {
		  Set_Motor_State(Motor_Control.Rotor_Position, Motor_Control.Duty_Cycle);
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <Run_Motor+0x98>)
 800046e:	789b      	ldrb	r3, [r3, #2]
 8000470:	4a05      	ldr	r2, [pc, #20]	; (8000488 <Run_Motor+0x98>)
 8000472:	7852      	ldrb	r2, [r2, #1]
 8000474:	b292      	uxth	r2, r2
 8000476:	4611      	mov	r1, r2
 8000478:	4618      	mov	r0, r3
 800047a:	f000 f80f 	bl	800049c <Set_Motor_State>
	  }
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	200000d0 	.word	0x200000d0
 8000488:	20000270 	.word	0x20000270
 800048c:	200001c0 	.word	0x200001c0
 8000490:	20000240 	.word	0x20000240
 8000494:	200001a0 	.word	0x200001a0
 8000498:	cccccccd 	.word	0xcccccccd

0800049c <Set_Motor_State>:

void Set_Motor_State(uint8_t State, uint16_t DutyCycle)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	460a      	mov	r2, r1
 80004a6:	71fb      	strb	r3, [r7, #7]
 80004a8:	4613      	mov	r3, r2
 80004aa:	80bb      	strh	r3, [r7, #4]
	Motor_Control.Signal = (htim1.Init.Period+1)*DutyCycle/100;	// CCR
 80004ac:	4b78      	ldr	r3, [pc, #480]	; (8000690 <Set_Motor_State+0x1f4>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	3301      	adds	r3, #1
 80004b2:	88ba      	ldrh	r2, [r7, #4]
 80004b4:	fb02 f303 	mul.w	r3, r2, r3
 80004b8:	4a76      	ldr	r2, [pc, #472]	; (8000694 <Set_Motor_State+0x1f8>)
 80004ba:	fba2 2303 	umull	r2, r3, r2, r3
 80004be:	095b      	lsrs	r3, r3, #5
 80004c0:	4a75      	ldr	r2, [pc, #468]	; (8000698 <Set_Motor_State+0x1fc>)
 80004c2:	6113      	str	r3, [r2, #16]
	Motor_Control.Max_Signal = htim1.Init.Period+1;				// ARR
 80004c4:	4b72      	ldr	r3, [pc, #456]	; (8000690 <Set_Motor_State+0x1f4>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	3301      	adds	r3, #1
 80004ca:	4a73      	ldr	r2, [pc, #460]	; (8000698 <Set_Motor_State+0x1fc>)
 80004cc:	6153      	str	r3, [r2, #20]

	switch(State)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	2b05      	cmp	r3, #5
 80004d2:	f200 80d5 	bhi.w	8000680 <Set_Motor_State+0x1e4>
 80004d6:	a201      	add	r2, pc, #4	; (adr r2, 80004dc <Set_Motor_State+0x40>)
 80004d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004dc:	080004f5 	.word	0x080004f5
 80004e0:	0800053d 	.word	0x0800053d
 80004e4:	08000579 	.word	0x08000579
 80004e8:	080005c1 	.word	0x080005c1
 80004ec:	080005fd 	.word	0x080005fd
 80004f0:	08000645 	.word	0x08000645
	{

		case State_A_B_Out:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,Motor_Control.Signal);		// A HIGH ACTIVE
 80004f4:	4b66      	ldr	r3, [pc, #408]	; (8000690 <Set_Motor_State+0x1f4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a67      	ldr	r2, [pc, #412]	; (8000698 <Set_Motor_State+0x1fc>)
 80004fa:	6912      	ldr	r2, [r2, #16]
 80004fc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,Motor_Control.Max_Signal);	// B LOW AVTIVE
 80004fe:	4b67      	ldr	r3, [pc, #412]	; (800069c <Set_Motor_State+0x200>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a65      	ldr	r2, [pc, #404]	; (8000698 <Set_Motor_State+0x1fc>)
 8000504:	6952      	ldr	r2, [r2, #20]
 8000506:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
 8000508:	4b64      	ldr	r3, [pc, #400]	; (800069c <Set_Motor_State+0x200>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2200      	movs	r2, #0
 800050e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,0);
 8000510:	4b62      	ldr	r3, [pc, #392]	; (800069c <Set_Motor_State+0x200>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2200      	movs	r2, #0
 8000516:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000518:	4b5d      	ldr	r3, [pc, #372]	; (8000690 <Set_Motor_State+0x1f4>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2200      	movs	r2, #0
 800051e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000520:	4b5b      	ldr	r3, [pc, #364]	; (8000690 <Set_Motor_State+0x1f4>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2200      	movs	r2, #0
 8000526:	63da      	str	r2, [r3, #60]	; 0x3c

			Motor_Control.Last_Trigger = State_A_B_Out;
 8000528:	4b5b      	ldr	r3, [pc, #364]	; (8000698 <Set_Motor_State+0x1fc>)
 800052a:	2200      	movs	r2, #0
 800052c:	70da      	strb	r2, [r3, #3]
			Motor_Control.Pulse_Center = htim1.Instance->CCR1 / 2;	//DutyCycle bu State'de iken değişirse kontrol güncellenir
 800052e:	4b58      	ldr	r3, [pc, #352]	; (8000690 <Set_Motor_State+0x1f4>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000534:	085b      	lsrs	r3, r3, #1
 8000536:	4a58      	ldr	r2, [pc, #352]	; (8000698 <Set_Motor_State+0x1fc>)
 8000538:	6193      	str	r3, [r2, #24]

			break;
 800053a:	e0a2      	b.n	8000682 <Set_Motor_State+0x1e6>

		case State_A_C_Out:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,Motor_Control.Signal);		// A HIGH ACTIVE
 800053c:	4b54      	ldr	r3, [pc, #336]	; (8000690 <Set_Motor_State+0x1f4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a55      	ldr	r2, [pc, #340]	; (8000698 <Set_Motor_State+0x1fc>)
 8000542:	6912      	ldr	r2, [r2, #16]
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,Motor_Control.Max_Signal);	// C LOW ACTIVE
 8000546:	4b55      	ldr	r3, [pc, #340]	; (800069c <Set_Motor_State+0x200>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a53      	ldr	r2, [pc, #332]	; (8000698 <Set_Motor_State+0x1fc>)
 800054c:	6952      	ldr	r2, [r2, #20]
 800054e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
 8000550:	4b52      	ldr	r3, [pc, #328]	; (800069c <Set_Motor_State+0x200>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2200      	movs	r2, #0
 8000556:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
 8000558:	4b50      	ldr	r3, [pc, #320]	; (800069c <Set_Motor_State+0x200>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2200      	movs	r2, #0
 800055e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000560:	4b4b      	ldr	r3, [pc, #300]	; (8000690 <Set_Motor_State+0x1f4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2200      	movs	r2, #0
 8000566:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000568:	4b49      	ldr	r3, [pc, #292]	; (8000690 <Set_Motor_State+0x1f4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2200      	movs	r2, #0
 800056e:	63da      	str	r2, [r3, #60]	; 0x3c

			Motor_Control.Last_Trigger = State_A_C_Out;
 8000570:	4b49      	ldr	r3, [pc, #292]	; (8000698 <Set_Motor_State+0x1fc>)
 8000572:	2201      	movs	r2, #1
 8000574:	70da      	strb	r2, [r3, #3]

			break;
 8000576:	e084      	b.n	8000682 <Set_Motor_State+0x1e6>

		case State_B_C_Out:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Motor_Control.Signal);		// B HIGH ACTIVE
 8000578:	4b45      	ldr	r3, [pc, #276]	; (8000690 <Set_Motor_State+0x1f4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a46      	ldr	r2, [pc, #280]	; (8000698 <Set_Motor_State+0x1fc>)
 800057e:	6912      	ldr	r2, [r2, #16]
 8000580:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,Motor_Control.Max_Signal);	// C LOW ACTIVE
 8000582:	4b46      	ldr	r3, [pc, #280]	; (800069c <Set_Motor_State+0x200>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a44      	ldr	r2, [pc, #272]	; (8000698 <Set_Motor_State+0x1fc>)
 8000588:	6952      	ldr	r2, [r2, #20]
 800058a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
 800058c:	4b43      	ldr	r3, [pc, #268]	; (800069c <Set_Motor_State+0x200>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2200      	movs	r2, #0
 8000592:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
 8000594:	4b41      	ldr	r3, [pc, #260]	; (800069c <Set_Motor_State+0x200>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2200      	movs	r2, #0
 800059a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 800059c:	4b3c      	ldr	r3, [pc, #240]	; (8000690 <Set_Motor_State+0x1f4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2200      	movs	r2, #0
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80005a4:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <Set_Motor_State+0x1f4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2200      	movs	r2, #0
 80005aa:	63da      	str	r2, [r3, #60]	; 0x3c

			Motor_Control.Last_Trigger = State_B_C_Out;
 80005ac:	4b3a      	ldr	r3, [pc, #232]	; (8000698 <Set_Motor_State+0x1fc>)
 80005ae:	2202      	movs	r2, #2
 80005b0:	70da      	strb	r2, [r3, #3]
			Motor_Control.Pulse_Center = htim1.Instance->CCR2 / 2;	//DutyCycle bu State'de iken değişirse kontrol güncellenir
 80005b2:	4b37      	ldr	r3, [pc, #220]	; (8000690 <Set_Motor_State+0x1f4>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005b8:	085b      	lsrs	r3, r3, #1
 80005ba:	4a37      	ldr	r2, [pc, #220]	; (8000698 <Set_Motor_State+0x1fc>)
 80005bc:	6193      	str	r3, [r2, #24]

			break;
 80005be:	e060      	b.n	8000682 <Set_Motor_State+0x1e6>

		case State_B_A_Out:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Motor_Control.Signal);	// B HIGH ACTIVE
 80005c0:	4b33      	ldr	r3, [pc, #204]	; (8000690 <Set_Motor_State+0x1f4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a34      	ldr	r2, [pc, #208]	; (8000698 <Set_Motor_State+0x1fc>)
 80005c6:	6912      	ldr	r2, [r2, #16]
 80005c8:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,Motor_Control.Max_Signal);	// A LOW ACTIVE
 80005ca:	4b34      	ldr	r3, [pc, #208]	; (800069c <Set_Motor_State+0x200>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a32      	ldr	r2, [pc, #200]	; (8000698 <Set_Motor_State+0x1fc>)
 80005d0:	6952      	ldr	r2, [r2, #20]
 80005d2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
 80005d4:	4b31      	ldr	r3, [pc, #196]	; (800069c <Set_Motor_State+0x200>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2200      	movs	r2, #0
 80005da:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,0);
 80005dc:	4b2f      	ldr	r3, [pc, #188]	; (800069c <Set_Motor_State+0x200>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2200      	movs	r2, #0
 80005e2:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <Set_Motor_State+0x1f4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2200      	movs	r2, #0
 80005ea:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <Set_Motor_State+0x1f4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2200      	movs	r2, #0
 80005f2:	63da      	str	r2, [r3, #60]	; 0x3c

			Motor_Control.Last_Trigger = State_B_A_Out;
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <Set_Motor_State+0x1fc>)
 80005f6:	2203      	movs	r2, #3
 80005f8:	70da      	strb	r2, [r3, #3]

			break;
 80005fa:	e042      	b.n	8000682 <Set_Motor_State+0x1e6>

		case State_C_A_Out:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,Motor_Control.Signal);	// C HIGH ACTIVE
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <Set_Motor_State+0x1f4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a25      	ldr	r2, [pc, #148]	; (8000698 <Set_Motor_State+0x1fc>)
 8000602:	6912      	ldr	r2, [r2, #16]
 8000604:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,Motor_Control.Max_Signal);	// A LOW ACTIVE
 8000606:	4b25      	ldr	r3, [pc, #148]	; (800069c <Set_Motor_State+0x200>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a23      	ldr	r2, [pc, #140]	; (8000698 <Set_Motor_State+0x1fc>)
 800060c:	6952      	ldr	r2, [r2, #20]
 800060e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <Set_Motor_State+0x200>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,0);
 8000618:	4b20      	ldr	r3, [pc, #128]	; (800069c <Set_Motor_State+0x200>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2200      	movs	r2, #0
 800061e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <Set_Motor_State+0x1f4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2200      	movs	r2, #0
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <Set_Motor_State+0x1f4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	639a      	str	r2, [r3, #56]	; 0x38

			Motor_Control.Last_Trigger = State_C_A_Out;
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <Set_Motor_State+0x1fc>)
 8000632:	2204      	movs	r2, #4
 8000634:	70da      	strb	r2, [r3, #3]
			Motor_Control.Pulse_Center = htim1.Instance->CCR3 / 2;	//DutyCycle bu State'de iken değişirse kontrol güncellenir
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <Set_Motor_State+0x1f4>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800063c:	085b      	lsrs	r3, r3, #1
 800063e:	4a16      	ldr	r2, [pc, #88]	; (8000698 <Set_Motor_State+0x1fc>)
 8000640:	6193      	str	r3, [r2, #24]

			break;
 8000642:	e01e      	b.n	8000682 <Set_Motor_State+0x1e6>

		case State_C_B_Out:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,Motor_Control.Signal);	// C HIGH ACTIVE
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <Set_Motor_State+0x1f4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <Set_Motor_State+0x1fc>)
 800064a:	6912      	ldr	r2, [r2, #16]
 800064c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,Motor_Control.Max_Signal);	// B LOW ACTIVE
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <Set_Motor_State+0x200>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <Set_Motor_State+0x1fc>)
 8000654:	6952      	ldr	r2, [r2, #20]
 8000656:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <Set_Motor_State+0x200>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,0);
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <Set_Motor_State+0x200>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <Set_Motor_State+0x1f4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <Set_Motor_State+0x1f4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2200      	movs	r2, #0
 8000676:	639a      	str	r2, [r3, #56]	; 0x38

			Motor_Control.Last_Trigger = State_C_B_Out;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <Set_Motor_State+0x1fc>)
 800067a:	2205      	movs	r2, #5
 800067c:	70da      	strb	r2, [r3, #3]

			break;
 800067e:	e000      	b.n	8000682 <Set_Motor_State+0x1e6>

		default:
			break;
 8000680:	bf00      	nop

	}
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000154 	.word	0x20000154
 8000694:	51eb851f 	.word	0x51eb851f
 8000698:	20000270 	.word	0x20000270
 800069c:	20000100 	.word	0x20000100

080006a0 <HAL_TIM_PeriodElapsedCallback>:

#include "TimeTask.h"
#include "SixStepCommutation.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d104      	bne.n	80006ba <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		timerCounter++;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	4a05      	ldr	r2, [pc, #20]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006b8:	6013      	str	r3, [r2, #0]
//		{
//			Time.Task.Hz_100 = 1;
//		}

	}
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000080 	.word	0x20000080
 80006cc:	20000150 	.word	0x20000150

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fcfa 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f836 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f000 fa6c 	bl	8000bb8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006e0:	f000 f906 	bl	80008f0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80006e4:	f000 f9aa 	bl	8000a3c <MX_TIM3_Init>
  MX_COMP1_Init();
 80006e8:	f000 f890 	bl	800080c <MX_COMP1_Init>
  MX_COMP3_Init();
 80006ec:	f000 f8b4 	bl	8000858 <MX_COMP3_Init>
  MX_COMP5_Init();
 80006f0:	f000 f8d8 	bl	80008a4 <MX_COMP5_Init>
  MX_TIM4_Init();
 80006f4:	f000 fa12 	bl	8000b1c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  PeripheralsStart();
 80006f8:	f7ff fd6c 	bl	80001d4 <PeripheralsStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(htim1.Instance->CNT == Motor_Control.Pulse_Center)
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <main+0x6c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <main+0x70>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	429a      	cmp	r2, r3
 8000708:	d113      	bne.n	8000732 <main+0x62>
	  {

		  switch(drive_Stage)
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <main+0x74>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b02      	cmp	r3, #2
 8000710:	d00c      	beq.n	800072c <main+0x5c>
 8000712:	2b02      	cmp	r3, #2
 8000714:	dc0f      	bgt.n	8000736 <main+0x66>
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <main+0x50>
 800071a:	2b01      	cmp	r3, #1
 800071c:	d003      	beq.n	8000726 <main+0x56>

		  		  break;
			  }

		  	  default:
		  		  break;
 800071e:	e00a      	b.n	8000736 <main+0x66>
		  		  Start_Up_Motor();
 8000720:	f7ff fdd6 	bl	80002d0 <Start_Up_Motor>
		  		  break;
 8000724:	e008      	b.n	8000738 <main+0x68>
		  		  Align_Motor();
 8000726:	f7ff fe19 	bl	800035c <Align_Motor>
		  		  break;
 800072a:	e005      	b.n	8000738 <main+0x68>
				  Run_Motor();
 800072c:	f7ff fe60 	bl	80003f0 <Run_Motor>
		  		  break;
 8000730:	e002      	b.n	8000738 <main+0x68>
		  }
	  }
 8000732:	bf00      	nop
 8000734:	e7e2      	b.n	80006fc <main+0x2c>
		  		  break;
 8000736:	bf00      	nop
	  if(htim1.Instance->CNT == Motor_Control.Pulse_Center)
 8000738:	e7e0      	b.n	80006fc <main+0x2c>
 800073a:	bf00      	nop
 800073c:	20000154 	.word	0x20000154
 8000740:	20000270 	.word	0x20000270
 8000744:	200001bc 	.word	0x200001bc

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0a6      	sub	sp, #152	; 0x98
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000752:	2228      	movs	r2, #40	; 0x28
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f003 ff80 	bl	800465c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2258      	movs	r2, #88	; 0x58
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f003 ff72 	bl	800465c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2310      	movs	r3, #16
 8000782:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000790:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000794:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000798:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 f934 	bl	8001a14 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007b2:	f000 fa57 	bl	8000c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2302      	movs	r3, #2
 80007bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007d0:	2102      	movs	r1, #2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 f834 	bl	8002840 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007de:	f000 fa41 	bl	8000c64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM34;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <SystemClock_Config+0xc0>)
 80007e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80007e6:	2300      	movs	r3, #0
 80007e8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fa0b 	bl	8002c0c <HAL_RCCEx_PeriphCLKConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007fc:	f000 fa32 	bl	8000c64 <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	3798      	adds	r7, #152	; 0x98
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	00201000 	.word	0x00201000

0800080c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_COMP1_Init+0x44>)
 8000812:	4a10      	ldr	r2, [pc, #64]	; (8000854 <MX_COMP1_Init+0x48>)
 8000814:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH2;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_COMP1_Init+0x44>)
 8000818:	2250      	movs	r2, #80	; 0x50
 800081a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_COMP1_Init+0x44>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Output = COMP_OUTPUT_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_COMP1_Init+0x44>)
 8000824:	227f      	movs	r2, #127	; 0x7f
 8000826:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_COMP1_Init+0x44>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_COMP1_Init+0x44>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_COMP1_Init+0x44>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_COMP1_Init+0x44>)
 800083c:	f000 fcac 	bl	8001198 <HAL_COMP_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8000846:	f000 fa0d 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000d0 	.word	0x200000d0
 8000854:	4001001c 	.word	0x4001001c

08000858 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_COMP3_Init+0x44>)
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <MX_COMP3_Init+0x48>)
 8000860:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_COMP3_Init+0x44>)
 8000864:	2270      	movs	r2, #112	; 0x70
 8000866:	605a      	str	r2, [r3, #4]
  hcomp3.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_COMP3_Init+0x44>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hcomp3.Init.Output = COMP_OUTPUT_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_COMP3_Init+0x44>)
 8000870:	227f      	movs	r2, #127	; 0x7f
 8000872:	60da      	str	r2, [r3, #12]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_COMP3_Init+0x44>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_COMP3_Init+0x44>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_COMP3_Init+0x44>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_COMP3_Init+0x44>)
 8000888:	f000 fc86 	bl	8001198 <HAL_COMP_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_COMP3_Init+0x3e>
  {
    Error_Handler();
 8000892:	f000 f9e7 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200001c0 	.word	0x200001c0
 80008a0:	40010024 	.word	0x40010024

080008a4 <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_COMP5_Init+0x44>)
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <MX_COMP5_Init+0x48>)
 80008ac:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_COMP5_Init+0x44>)
 80008b0:	2270      	movs	r2, #112	; 0x70
 80008b2:	605a      	str	r2, [r3, #4]
  hcomp5.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_COMP5_Init+0x44>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hcomp5.Init.Output = COMP_OUTPUT_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_COMP5_Init+0x44>)
 80008bc:	227f      	movs	r2, #127	; 0x7f
 80008be:	60da      	str	r2, [r3, #12]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_COMP5_Init+0x44>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_COMP5_Init+0x44>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_COMP5_Init+0x44>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_COMP5_Init+0x44>)
 80008d4:	f000 fc60 	bl	8001198 <HAL_COMP_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_COMP5_Init+0x3e>
  {
    Error_Handler();
 80008de:	f000 f9c1 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000240 	.word	0x20000240
 80008ec:	4001002c 	.word	0x4001002c

080008f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b096      	sub	sp, #88	; 0x58
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000902:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
 8000912:	615a      	str	r2, [r3, #20]
 8000914:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	222c      	movs	r2, #44	; 0x2c
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f003 fe9d 	bl	800465c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000922:	4b44      	ldr	r3, [pc, #272]	; (8000a34 <MX_TIM1_Init+0x144>)
 8000924:	4a44      	ldr	r2, [pc, #272]	; (8000a38 <MX_TIM1_Init+0x148>)
 8000926:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000928:	4b42      	ldr	r3, [pc, #264]	; (8000a34 <MX_TIM1_Init+0x144>)
 800092a:	2247      	movs	r2, #71	; 0x47
 800092c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092e:	4b41      	ldr	r3, [pc, #260]	; (8000a34 <MX_TIM1_Init+0x144>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 8000934:	4b3f      	ldr	r3, [pc, #252]	; (8000a34 <MX_TIM1_Init+0x144>)
 8000936:	2231      	movs	r2, #49	; 0x31
 8000938:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093a:	4b3e      	ldr	r3, [pc, #248]	; (8000a34 <MX_TIM1_Init+0x144>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000940:	4b3c      	ldr	r3, [pc, #240]	; (8000a34 <MX_TIM1_Init+0x144>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <MX_TIM1_Init+0x144>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800094c:	4839      	ldr	r0, [pc, #228]	; (8000a34 <MX_TIM1_Init+0x144>)
 800094e:	f002 fc43 	bl	80031d8 <HAL_TIM_PWM_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000958:	f000 f984 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000968:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800096c:	4619      	mov	r1, r3
 800096e:	4831      	ldr	r0, [pc, #196]	; (8000a34 <MX_TIM1_Init+0x144>)
 8000970:	f003 fd20 	bl	80043b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800097a:	f000 f973 	bl	8000c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097e:	2360      	movs	r3, #96	; 0x60
 8000980:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000986:	2300      	movs	r3, #0
 8000988:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800098a:	2300      	movs	r3, #0
 800098c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000996:	2300      	movs	r3, #0
 8000998:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800099a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800099e:	2200      	movs	r2, #0
 80009a0:	4619      	mov	r1, r3
 80009a2:	4824      	ldr	r0, [pc, #144]	; (8000a34 <MX_TIM1_Init+0x144>)
 80009a4:	f002 fe9c 	bl	80036e0 <HAL_TIM_PWM_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80009ae:	f000 f959 	bl	8000c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009b6:	2204      	movs	r2, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	481e      	ldr	r0, [pc, #120]	; (8000a34 <MX_TIM1_Init+0x144>)
 80009bc:	f002 fe90 	bl	80036e0 <HAL_TIM_PWM_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80009c6:	f000 f94d 	bl	8000c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ce:	2208      	movs	r2, #8
 80009d0:	4619      	mov	r1, r3
 80009d2:	4818      	ldr	r0, [pc, #96]	; (8000a34 <MX_TIM1_Init+0x144>)
 80009d4:	f002 fe84 	bl	80036e0 <HAL_TIM_PWM_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80009de:	f000 f941 	bl	8000c64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	4807      	ldr	r0, [pc, #28]	; (8000a34 <MX_TIM1_Init+0x144>)
 8000a18:	f003 fd58 	bl	80044cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000a22:	f000 f91f 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a26:	4803      	ldr	r0, [pc, #12]	; (8000a34 <MX_TIM1_Init+0x144>)
 8000a28:	f000 fa64 	bl	8000ef4 <HAL_TIM_MspPostInit>

}
 8000a2c:	bf00      	nop
 8000a2e:	3758      	adds	r7, #88	; 0x58
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000154 	.word	0x20000154
 8000a38:	40012c00 	.word	0x40012c00

08000a3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
 8000a5c:	615a      	str	r2, [r3, #20]
 8000a5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a60:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <MX_TIM3_Init+0xd8>)
 8000a62:	4a2d      	ldr	r2, [pc, #180]	; (8000b18 <MX_TIM3_Init+0xdc>)
 8000a64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000a66:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <MX_TIM3_Init+0xd8>)
 8000a68:	2247      	movs	r2, #71	; 0x47
 8000a6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <MX_TIM3_Init+0xd8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50-1;
 8000a72:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <MX_TIM3_Init+0xd8>)
 8000a74:	2231      	movs	r2, #49	; 0x31
 8000a76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <MX_TIM3_Init+0xd8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <MX_TIM3_Init+0xd8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a84:	4823      	ldr	r0, [pc, #140]	; (8000b14 <MX_TIM3_Init+0xd8>)
 8000a86:	f002 fba7 	bl	80031d8 <HAL_TIM_PWM_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a90:	f000 f8e8 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	481c      	ldr	r0, [pc, #112]	; (8000b14 <MX_TIM3_Init+0xd8>)
 8000aa4:	f003 fc86 	bl	80043b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000aae:	f000 f8d9 	bl	8000c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab2:	2360      	movs	r3, #96	; 0x60
 8000ab4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4812      	ldr	r0, [pc, #72]	; (8000b14 <MX_TIM3_Init+0xd8>)
 8000aca:	f002 fe09 	bl	80036e0 <HAL_TIM_PWM_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ad4:	f000 f8c6 	bl	8000c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ad8:	463b      	mov	r3, r7
 8000ada:	2204      	movs	r2, #4
 8000adc:	4619      	mov	r1, r3
 8000ade:	480d      	ldr	r0, [pc, #52]	; (8000b14 <MX_TIM3_Init+0xd8>)
 8000ae0:	f002 fdfe 	bl	80036e0 <HAL_TIM_PWM_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000aea:	f000 f8bb 	bl	8000c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aee:	463b      	mov	r3, r7
 8000af0:	2208      	movs	r2, #8
 8000af2:	4619      	mov	r1, r3
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <MX_TIM3_Init+0xd8>)
 8000af6:	f002 fdf3 	bl	80036e0 <HAL_TIM_PWM_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000b00:	f000 f8b0 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <MX_TIM3_Init+0xd8>)
 8000b06:	f000 f9f5 	bl	8000ef4 <HAL_TIM_MspPostInit>

}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	; 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000100 	.word	0x20000100
 8000b18:	40000400 	.word	0x40000400

08000b1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <MX_TIM4_Init+0x98>)
 8000b3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b42:	2247      	movs	r2, #71	; 0x47
 8000b44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b62:	f002 fa71 	bl	8003048 <HAL_TIM_Base_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000b6c:	f000 f87a 	bl	8000c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b7e:	f002 fec3 	bl	8003908 <HAL_TIM_ConfigClockSource>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000b88:	f000 f86c 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_TIM4_Init+0x94>)
 8000b9a:	f003 fc0b 	bl	80043b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000ba4:	f000 f85e 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	3720      	adds	r7, #32
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000080 	.word	0x20000080
 8000bb4:	40000800 	.word	0x40000800

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bce:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <MX_GPIO_Init+0xa4>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	4a22      	ldr	r2, [pc, #136]	; (8000c5c <MX_GPIO_Init+0xa4>)
 8000bd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bd8:	6153      	str	r3, [r2, #20]
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <MX_GPIO_Init+0xa4>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_GPIO_Init+0xa4>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <MX_GPIO_Init+0xa4>)
 8000bec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bf0:	6153      	str	r3, [r2, #20]
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_GPIO_Init+0xa4>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_GPIO_Init+0xa4>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <MX_GPIO_Init+0xa4>)
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	6153      	str	r3, [r2, #20]
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_GPIO_Init+0xa4>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_GPIO_Init+0xa4>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <MX_GPIO_Init+0xa4>)
 8000c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c20:	6153      	str	r3, [r2, #20]
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_GPIO_Init+0xa4>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(deneme_GPIO_Port, deneme_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2101      	movs	r1, #1
 8000c32:	480b      	ldr	r0, [pc, #44]	; (8000c60 <MX_GPIO_Init+0xa8>)
 8000c34:	f000 fed6 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : deneme_Pin */
  GPIO_InitStruct.Pin = deneme_Pin;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(deneme_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4804      	ldr	r0, [pc, #16]	; (8000c60 <MX_GPIO_Init+0xa8>)
 8000c50:	f000 fd3e 	bl	80016d0 <HAL_GPIO_Init>

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	48000400 	.word	0x48000400

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6193      	str	r3, [r2, #24]
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	61d3      	str	r3, [r2, #28]
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_MspInit+0x44>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ca6:	2007      	movs	r0, #7
 8000ca8:	f000 fcca 	bl	8001640 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	; 0x30
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a54      	ldr	r2, [pc, #336]	; (8000e28 <HAL_COMP_MspInit+0x170>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d12a      	bne.n	8000d30 <HAL_COMP_MspInit+0x78>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b54      	ldr	r3, [pc, #336]	; (8000e2c <HAL_COMP_MspInit+0x174>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	4a53      	ldr	r2, [pc, #332]	; (8000e2c <HAL_COMP_MspInit+0x174>)
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	6153      	str	r3, [r2, #20]
 8000ce6:	4b51      	ldr	r3, [pc, #324]	; (8000e2c <HAL_COMP_MspInit+0x174>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	61bb      	str	r3, [r7, #24]
 8000cf0:	69bb      	ldr	r3, [r7, #24]
    /**COMP1 GPIO Configuration
    PA0     ------> COMP1_OUT
    PA1     ------> COMP1_INP
    PA5     ------> COMP1_INM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP1;
 8000d02:	2308      	movs	r3, #8
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d10:	f000 fcde 	bl	80016d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000d14:	2322      	movs	r3, #34	; 0x22
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2a:	f000 fcd1 	bl	80016d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP5_MspInit 1 */

  /* USER CODE END COMP5_MspInit 1 */
  }

}
 8000d2e:	e076      	b.n	8000e1e <HAL_COMP_MspInit+0x166>
  else if(hcomp->Instance==COMP3)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a3e      	ldr	r2, [pc, #248]	; (8000e30 <HAL_COMP_MspInit+0x178>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d137      	bne.n	8000daa <HAL_COMP_MspInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b3c      	ldr	r3, [pc, #240]	; (8000e2c <HAL_COMP_MspInit+0x174>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	4a3b      	ldr	r2, [pc, #236]	; (8000e2c <HAL_COMP_MspInit+0x174>)
 8000d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d44:	6153      	str	r3, [r2, #20]
 8000d46:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <HAL_COMP_MspInit+0x174>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <HAL_COMP_MspInit+0x174>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	4a35      	ldr	r2, [pc, #212]	; (8000e2c <HAL_COMP_MspInit+0x174>)
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	6153      	str	r3, [r2, #20]
 8000d5e:	4b33      	ldr	r3, [pc, #204]	; (8000e2c <HAL_COMP_MspInit+0x174>)
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000d6a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d70:	2303      	movs	r3, #3
 8000d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	482d      	ldr	r0, [pc, #180]	; (8000e34 <HAL_COMP_MspInit+0x17c>)
 8000d80:	f000 fca6 	bl	80016d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP3;
 8000d96:	2308      	movs	r3, #8
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da4:	f000 fc94 	bl	80016d0 <HAL_GPIO_Init>
}
 8000da8:	e039      	b.n	8000e1e <HAL_COMP_MspInit+0x166>
  else if(hcomp->Instance==COMP5)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <HAL_COMP_MspInit+0x180>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d134      	bne.n	8000e1e <HAL_COMP_MspInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_COMP_MspInit+0x174>)
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	4a1c      	ldr	r2, [pc, #112]	; (8000e2c <HAL_COMP_MspInit+0x174>)
 8000dba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbe:	6153      	str	r3, [r2, #20]
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_COMP_MspInit+0x174>)
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_COMP_MspInit+0x174>)
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <HAL_COMP_MspInit+0x174>)
 8000dd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dd6:	6153      	str	r3, [r2, #20]
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_COMP_MspInit+0x174>)
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 8000de4:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dea:	2303      	movs	r3, #3
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	480e      	ldr	r0, [pc, #56]	; (8000e34 <HAL_COMP_MspInit+0x17c>)
 8000dfa:	f000 fc69 	bl	80016d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_COMP5;
 8000e0e:	2307      	movs	r3, #7
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	4808      	ldr	r0, [pc, #32]	; (8000e3c <HAL_COMP_MspInit+0x184>)
 8000e1a:	f000 fc59 	bl	80016d0 <HAL_GPIO_Init>
}
 8000e1e:	bf00      	nop
 8000e20:	3730      	adds	r7, #48	; 0x30
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	4001001c 	.word	0x4001001c
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010024 	.word	0x40010024
 8000e34:	48000400 	.word	0x48000400
 8000e38:	4001002c 	.word	0x4001002c
 8000e3c:	48000800 	.word	0x48000800

08000e40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <HAL_TIM_PWM_MspInit+0x5c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d10c      	bne.n	8000e6c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x60>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x60>)
 8000e58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e5c:	6193      	str	r3, [r2, #24]
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x60>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e6a:	e010      	b.n	8000e8e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0c      	ldr	r2, [pc, #48]	; (8000ea4 <HAL_TIM_PWM_MspInit+0x64>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10b      	bne.n	8000e8e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x60>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x60>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	61d3      	str	r3, [r2, #28]
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <HAL_TIM_PWM_MspInit+0x60>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40012c00 	.word	0x40012c00
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40000400 	.word	0x40000400

08000ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_TIM_Base_MspInit+0x44>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d113      	bne.n	8000ee2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_TIM_Base_MspInit+0x48>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <HAL_TIM_Base_MspInit+0x48>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	61d3      	str	r3, [r2, #28]
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_TIM_Base_MspInit+0x48>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	201e      	movs	r0, #30
 8000ed8:	f000 fbbd 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000edc:	201e      	movs	r0, #30
 8000ede:	f000 fbd6 	bl	800168e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40000800 	.word	0x40000800
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a31      	ldr	r2, [pc, #196]	; (8000fd8 <HAL_TIM_MspPostInit+0xe4>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d11c      	bne.n	8000f50 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <HAL_TIM_MspPostInit+0xe8>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a30      	ldr	r2, [pc, #192]	; (8000fdc <HAL_TIM_MspPostInit+0xe8>)
 8000f1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f20:	6153      	str	r3, [r2, #20]
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <HAL_TIM_MspPostInit+0xe8>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4825      	ldr	r0, [pc, #148]	; (8000fe0 <HAL_TIM_MspPostInit+0xec>)
 8000f4a:	f000 fbc1 	bl	80016d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f4e:	e03e      	b.n	8000fce <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a23      	ldr	r2, [pc, #140]	; (8000fe4 <HAL_TIM_MspPostInit+0xf0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d139      	bne.n	8000fce <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <HAL_TIM_MspPostInit+0xe8>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <HAL_TIM_MspPostInit+0xe8>)
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	6153      	str	r3, [r2, #20]
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <HAL_TIM_MspPostInit+0xe8>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <HAL_TIM_MspPostInit+0xe8>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a19      	ldr	r2, [pc, #100]	; (8000fdc <HAL_TIM_MspPostInit+0xe8>)
 8000f78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_TIM_MspPostInit+0xe8>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000f8a:	2350      	movs	r3, #80	; 0x50
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa8:	f000 fb92 	bl	80016d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <HAL_TIM_MspPostInit+0xec>)
 8000fca:	f000 fb81 	bl	80016d0 <HAL_GPIO_Init>
}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40012c00 	.word	0x40012c00
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	48000800 	.word	0x48000800
 8000fe4:	40000400 	.word	0x40000400

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <NMI_Handler+0x4>

08000fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <UsageFault_Handler+0x4>

08001006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001034:	f000 f890 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8001038:	f000 fb43 	bl	80016c2 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <TIM4_IRQHandler+0x10>)
 8001046:	f002 fa2b 	bl	80034a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000080 	.word	0x20000080

08001054 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <Reset_Handler>:
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopForever+0x2>
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopForever+0x6>)
 800107e:	490e      	ldr	r1, [pc, #56]	; (80010b8 <LoopForever+0xa>)
 8001080:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <LoopForever+0xe>)
 8001082:	2300      	movs	r3, #0
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:
 8001086:	58d4      	ldr	r4, [r2, r3]
 8001088:	50c4      	str	r4, [r0, r3]
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:
 800108c:	18c4      	adds	r4, r0, r3
 800108e:	428c      	cmp	r4, r1
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <LoopForever+0x12>)
 8001094:	4c0b      	ldr	r4, [pc, #44]	; (80010c4 <LoopForever+0x16>)
 8001096:	2300      	movs	r3, #0
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:
 800109e:	42a2      	cmp	r2, r4
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>
 80010a2:	f7ff ffd7 	bl	8001054 <SystemInit>
 80010a6:	f003 fab5 	bl	8004614 <__libc_init_array>
 80010aa:	f7ff fb11 	bl	80006d0 <main>

080010ae <LoopForever>:
 80010ae:	e7fe      	b.n	80010ae <LoopForever>
 80010b0:	20010000 	.word	0x20010000
 80010b4:	20000000 	.word	0x20000000
 80010b8:	2000000c 	.word	0x2000000c
 80010bc:	080046bc 	.word	0x080046bc
 80010c0:	2000000c 	.word	0x2000000c
 80010c4:	20000290 	.word	0x20000290

080010c8 <ADC1_2_IRQHandler>:
 80010c8:	e7fe      	b.n	80010c8 <ADC1_2_IRQHandler>
	...

080010cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_Init+0x28>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_Init+0x28>)
 80010d6:	f043 0310 	orr.w	r3, r3, #16
 80010da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 faaf 	bl	8001640 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f808 	bl	80010f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e8:	f7ff fdc2 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40022000 	.word	0x40022000

080010f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x54>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x58>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001112:	fbb2 f3f3 	udiv	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fac7 	bl	80016aa <HAL_SYSTICK_Config>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e00e      	b.n	8001144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b0f      	cmp	r3, #15
 800112a:	d80a      	bhi.n	8001142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f000 fa8f 	bl	8001656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001138:	4a06      	ldr	r2, [pc, #24]	; (8001154 <HAL_InitTick+0x5c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e000      	b.n	8001144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000000 	.word	0x20000000
 8001150:	20000008 	.word	0x20000008
 8001154:	20000004 	.word	0x20000004

08001158 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008
 800117c:	2000028c 	.word	0x2000028c

08001180 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;  
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2000028c 	.word	0x2000028c

08001198 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d007      	beq.n	80011ba <HAL_COMP_Init+0x22>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f003 0310 	and.w	r3, r3, #16
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	75fb      	strb	r3, [r7, #23]
 80011be:	e05e      	b.n	800127e <HAL_COMP_Init+0xe6>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c0:	4b31      	ldr	r3, [pc, #196]	; (8001288 <HAL_COMP_Init+0xf0>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a30      	ldr	r2, [pc, #192]	; (8001288 <HAL_COMP_Init+0xf0>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <HAL_COMP_Init+0xf0>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff fd6d 	bl	8000cb8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d103      	bne.n	80011f2 <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4313      	orrs	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f023 0202 	bic.w	r2, r3, #2
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	4313      	orrs	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800123e:	4313      	orrs	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695a      	ldr	r2, [r3, #20]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69da      	ldr	r2, [r3, #28]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1a      	ldr	r2, [r3, #32]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 800127e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40021000 	.word	0x40021000

0800128c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <HAL_COMP_Start+0x26>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f003 0310 	and.w	r3, r3, #16
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <HAL_COMP_Start+0x2c>
  {
    status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	e0c4      	b.n	8001442 <HAL_COMP_Start+0x1b6>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	f040 80bc 	bne.w	800143e <HAL_COMP_Start+0x1b2>
    {
      /* Get the EXTI Line output configuration */
      extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a61      	ldr	r2, [pc, #388]	; (8001450 <HAL_COMP_Start+0x1c4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d028      	beq.n	8001322 <HAL_COMP_Start+0x96>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a5f      	ldr	r2, [pc, #380]	; (8001454 <HAL_COMP_Start+0x1c8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d020      	beq.n	800131c <HAL_COMP_Start+0x90>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a5e      	ldr	r2, [pc, #376]	; (8001458 <HAL_COMP_Start+0x1cc>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d018      	beq.n	8001316 <HAL_COMP_Start+0x8a>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a5c      	ldr	r2, [pc, #368]	; (800145c <HAL_COMP_Start+0x1d0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d010      	beq.n	8001310 <HAL_COMP_Start+0x84>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a5b      	ldr	r2, [pc, #364]	; (8001460 <HAL_COMP_Start+0x1d4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d008      	beq.n	800130a <HAL_COMP_Start+0x7e>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a59      	ldr	r2, [pc, #356]	; (8001464 <HAL_COMP_Start+0x1d8>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d101      	bne.n	8001306 <HAL_COMP_Start+0x7a>
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <HAL_COMP_Start+0x9a>
 8001306:	2302      	movs	r3, #2
 8001308:	e00d      	b.n	8001326 <HAL_COMP_Start+0x9a>
 800130a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800130e:	e00a      	b.n	8001326 <HAL_COMP_Start+0x9a>
 8001310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001314:	e007      	b.n	8001326 <HAL_COMP_Start+0x9a>
 8001316:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800131a:	e004      	b.n	8001326 <HAL_COMP_Start+0x9a>
 800131c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001320:	e001      	b.n	8001326 <HAL_COMP_Start+0x9a>
 8001322:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001326:	60bb      	str	r3, [r7, #8]

      /* Configure the event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_EVENT_RISING | COMP_TRIGGERMODE_EVENT_FALLING)) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001330:	2b00      	cmp	r3, #0
 8001332:	d077      	beq.n	8001424 <HAL_COMP_Start+0x198>
      {
        /* Configure the event trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_RISING) != RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	2b00      	cmp	r3, #0
 800133e:	d012      	beq.n	8001366 <HAL_COMP_Start+0xda>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <HAL_COMP_Start+0xcc>
 800134a:	4b47      	ldr	r3, [pc, #284]	; (8001468 <HAL_COMP_Start+0x1dc>)
 800134c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800134e:	4946      	ldr	r1, [pc, #280]	; (8001468 <HAL_COMP_Start+0x1dc>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
 8001354:	628b      	str	r3, [r1, #40]	; 0x28
 8001356:	e01a      	b.n	800138e <HAL_COMP_Start+0x102>
 8001358:	4b43      	ldr	r3, [pc, #268]	; (8001468 <HAL_COMP_Start+0x1dc>)
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	4942      	ldr	r1, [pc, #264]	; (8001468 <HAL_COMP_Start+0x1dc>)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	4313      	orrs	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
 8001364:	e013      	b.n	800138e <HAL_COMP_Start+0x102>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d007      	beq.n	8001380 <HAL_COMP_Start+0xf4>
 8001370:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <HAL_COMP_Start+0x1dc>)
 8001372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	43db      	mvns	r3, r3
 8001378:	493b      	ldr	r1, [pc, #236]	; (8001468 <HAL_COMP_Start+0x1dc>)
 800137a:	4013      	ands	r3, r2
 800137c:	628b      	str	r3, [r1, #40]	; 0x28
 800137e:	e006      	b.n	800138e <HAL_COMP_Start+0x102>
 8001380:	4b39      	ldr	r3, [pc, #228]	; (8001468 <HAL_COMP_Start+0x1dc>)
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	43db      	mvns	r3, r3
 8001388:	4937      	ldr	r1, [pc, #220]	; (8001468 <HAL_COMP_Start+0x1dc>)
 800138a:	4013      	ands	r3, r2
 800138c:	608b      	str	r3, [r1, #8]
        }

        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_FALLING) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	f003 0320 	and.w	r3, r3, #32
 8001396:	2b00      	cmp	r3, #0
 8001398:	d012      	beq.n	80013c0 <HAL_COMP_Start+0x134>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <HAL_COMP_Start+0x126>
 80013a4:	4b30      	ldr	r3, [pc, #192]	; (8001468 <HAL_COMP_Start+0x1dc>)
 80013a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a8:	492f      	ldr	r1, [pc, #188]	; (8001468 <HAL_COMP_Start+0x1dc>)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 80013b0:	e01a      	b.n	80013e8 <HAL_COMP_Start+0x15c>
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <HAL_COMP_Start+0x1dc>)
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	492c      	ldr	r1, [pc, #176]	; (8001468 <HAL_COMP_Start+0x1dc>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	60cb      	str	r3, [r1, #12]
 80013be:	e013      	b.n	80013e8 <HAL_COMP_Start+0x15c>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <HAL_COMP_Start+0x14e>
 80013ca:	4b27      	ldr	r3, [pc, #156]	; (8001468 <HAL_COMP_Start+0x1dc>)
 80013cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	4925      	ldr	r1, [pc, #148]	; (8001468 <HAL_COMP_Start+0x1dc>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80013d8:	e006      	b.n	80013e8 <HAL_COMP_Start+0x15c>
 80013da:	4b23      	ldr	r3, [pc, #140]	; (8001468 <HAL_COMP_Start+0x1dc>)
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	4921      	ldr	r1, [pc, #132]	; (8001468 <HAL_COMP_Start+0x1dc>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	60cb      	str	r3, [r1, #12]
        }

        /* Enable EXTI event generation */
        COMP_EXTI_ENABLE_EVENT(extiline);
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <HAL_COMP_Start+0x174>
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_COMP_Start+0x1dc>)
 80013f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f6:	491c      	ldr	r1, [pc, #112]	; (8001468 <HAL_COMP_Start+0x1dc>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	624b      	str	r3, [r1, #36]	; 0x24
 80013fe:	e005      	b.n	800140c <HAL_COMP_Start+0x180>
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_COMP_Start+0x1dc>)
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	4918      	ldr	r1, [pc, #96]	; (8001468 <HAL_COMP_Start+0x1dc>)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]

        /* Clear COMP EXTI pending bit */
        COMP_EXTI_CLEAR_FLAG(extiline);
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_COMP_Start+0x192>
 8001416:	4a14      	ldr	r2, [pc, #80]	; (8001468 <HAL_COMP_Start+0x1dc>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	6353      	str	r3, [r2, #52]	; 0x34
 800141c:	e002      	b.n	8001424 <HAL_COMP_Start+0x198>
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <HAL_COMP_Start+0x1dc>)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	6153      	str	r3, [r2, #20]
      }

      /* Enable the selected comparator */
      __HAL_COMP_ENABLE(hcomp);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0201 	orr.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_BUSY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2202      	movs	r2, #2
 8001438:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800143c:	e001      	b.n	8001442 <HAL_COMP_Start+0x1b6>
    }
    else
    {
      status = HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	4001001c 	.word	0x4001001c
 8001454:	40010020 	.word	0x40010020
 8001458:	40010024 	.word	0x40010024
 800145c:	40010028 	.word	0x40010028
 8001460:	4001002c 	.word	0x4001002c
 8001464:	40010030 	.word	0x40010030
 8001468:	40010400 	.word	0x40010400

0800146c <HAL_COMP_GetOutputLevel>:
  *         @arg @ref COMP_OUTPUTLEVEL_LOW
  *         @arg @ref COMP_OUTPUTLEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t level = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]

  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  level = READ_BIT(hcomp->Instance->CSR, COMP_CSR_COMPxOUT);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001482:	60fb      	str	r3, [r7, #12]

  if (level != 0U)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <HAL_COMP_GetOutputLevel+0x24>
  {
    return (COMP_OUTPUTLEVEL_HIGH);
 800148a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800148e:	e000      	b.n	8001492 <HAL_COMP_GetOutputLevel+0x26>
  }
  return (COMP_OUTPUTLEVEL_LOW);
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db0b      	blt.n	800152e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	4907      	ldr	r1, [pc, #28]	; (800153c <__NVIC_EnableIRQ+0x38>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	2001      	movs	r0, #1
 8001526:	fa00 f202 	lsl.w	r2, r0, r2
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e100 	.word	0xe000e100

08001540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db0a      	blt.n	800156a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	490c      	ldr	r1, [pc, #48]	; (800158c <__NVIC_SetPriority+0x4c>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001568:	e00a      	b.n	8001580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4908      	ldr	r1, [pc, #32]	; (8001590 <__NVIC_SetPriority+0x50>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	3b04      	subs	r3, #4
 8001578:	0112      	lsls	r2, r2, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	440b      	add	r3, r1
 800157e:	761a      	strb	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000e100 	.word	0xe000e100
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f1c3 0307 	rsb	r3, r3, #7
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf28      	it	cs
 80015b2:	2304      	movcs	r3, #4
 80015b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3304      	adds	r3, #4
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d902      	bls.n	80015c4 <NVIC_EncodePriority+0x30>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3b03      	subs	r3, #3
 80015c2:	e000      	b.n	80015c6 <NVIC_EncodePriority+0x32>
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	4313      	orrs	r3, r2
         );
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800160c:	d301      	bcc.n	8001612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160e:	2301      	movs	r3, #1
 8001610:	e00f      	b.n	8001632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <SysTick_Config+0x40>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161a:	210f      	movs	r1, #15
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f7ff ff8e 	bl	8001540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <SysTick_Config+0x40>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <SysTick_Config+0x40>)
 800162c:	2207      	movs	r2, #7
 800162e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	e000e010 	.word	0xe000e010

08001640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff29 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001668:	f7ff ff3e 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 800166c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	6978      	ldr	r0, [r7, #20]
 8001674:	f7ff ff8e 	bl	8001594 <NVIC_EncodePriority>
 8001678:	4602      	mov	r2, r0
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff5d 	bl	8001540 <__NVIC_SetPriority>
}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff31 	bl	8001504 <__NVIC_EnableIRQ>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ffa2 	bl	80015fc <SysTick_Config>
 80016b8:	4603      	mov	r3, r0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016de:	e160      	b.n	80019a2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2101      	movs	r1, #1
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8152 	beq.w	800199c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b01      	cmp	r3, #1
 8001702:	d005      	beq.n	8001710 <HAL_GPIO_Init+0x40>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d130      	bne.n	8001772 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001746:	2201      	movs	r2, #1
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	f003 0201 	and.w	r2, r3, #1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b03      	cmp	r3, #3
 800177c:	d017      	beq.n	80017ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d123      	bne.n	8001802 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	08da      	lsrs	r2, r3, #3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3208      	adds	r2, #8
 80017fc:	6939      	ldr	r1, [r7, #16]
 80017fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0203 	and.w	r2, r3, #3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 80ac 	beq.w	800199c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001844:	4b5e      	ldr	r3, [pc, #376]	; (80019c0 <HAL_GPIO_Init+0x2f0>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4a5d      	ldr	r2, [pc, #372]	; (80019c0 <HAL_GPIO_Init+0x2f0>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6193      	str	r3, [r2, #24]
 8001850:	4b5b      	ldr	r3, [pc, #364]	; (80019c0 <HAL_GPIO_Init+0x2f0>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800185c:	4a59      	ldr	r2, [pc, #356]	; (80019c4 <HAL_GPIO_Init+0x2f4>)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001886:	d025      	beq.n	80018d4 <HAL_GPIO_Init+0x204>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a4f      	ldr	r2, [pc, #316]	; (80019c8 <HAL_GPIO_Init+0x2f8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d01f      	beq.n	80018d0 <HAL_GPIO_Init+0x200>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a4e      	ldr	r2, [pc, #312]	; (80019cc <HAL_GPIO_Init+0x2fc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d019      	beq.n	80018cc <HAL_GPIO_Init+0x1fc>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a4d      	ldr	r2, [pc, #308]	; (80019d0 <HAL_GPIO_Init+0x300>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d013      	beq.n	80018c8 <HAL_GPIO_Init+0x1f8>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a4c      	ldr	r2, [pc, #304]	; (80019d4 <HAL_GPIO_Init+0x304>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d00d      	beq.n	80018c4 <HAL_GPIO_Init+0x1f4>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a4b      	ldr	r2, [pc, #300]	; (80019d8 <HAL_GPIO_Init+0x308>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d007      	beq.n	80018c0 <HAL_GPIO_Init+0x1f0>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a4a      	ldr	r2, [pc, #296]	; (80019dc <HAL_GPIO_Init+0x30c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d101      	bne.n	80018bc <HAL_GPIO_Init+0x1ec>
 80018b8:	2306      	movs	r3, #6
 80018ba:	e00c      	b.n	80018d6 <HAL_GPIO_Init+0x206>
 80018bc:	2307      	movs	r3, #7
 80018be:	e00a      	b.n	80018d6 <HAL_GPIO_Init+0x206>
 80018c0:	2305      	movs	r3, #5
 80018c2:	e008      	b.n	80018d6 <HAL_GPIO_Init+0x206>
 80018c4:	2304      	movs	r3, #4
 80018c6:	e006      	b.n	80018d6 <HAL_GPIO_Init+0x206>
 80018c8:	2303      	movs	r3, #3
 80018ca:	e004      	b.n	80018d6 <HAL_GPIO_Init+0x206>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e002      	b.n	80018d6 <HAL_GPIO_Init+0x206>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_GPIO_Init+0x206>
 80018d4:	2300      	movs	r3, #0
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	f002 0203 	and.w	r2, r2, #3
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	4093      	lsls	r3, r2
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018e6:	4937      	ldr	r1, [pc, #220]	; (80019c4 <HAL_GPIO_Init+0x2f4>)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f4:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <HAL_GPIO_Init+0x310>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001918:	4a31      	ldr	r2, [pc, #196]	; (80019e0 <HAL_GPIO_Init+0x310>)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800191e:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <HAL_GPIO_Init+0x310>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001942:	4a27      	ldr	r2, [pc, #156]	; (80019e0 <HAL_GPIO_Init+0x310>)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HAL_GPIO_Init+0x310>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800196c:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <HAL_GPIO_Init+0x310>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001972:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <HAL_GPIO_Init+0x310>)
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <HAL_GPIO_Init+0x310>)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3301      	adds	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f47f ae97 	bne.w	80016e0 <HAL_GPIO_Init+0x10>
  }
}
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000
 80019c8:	48000400 	.word	0x48000400
 80019cc:	48000800 	.word	0x48000800
 80019d0:	48000c00 	.word	0x48000c00
 80019d4:	48001000 	.word	0x48001000
 80019d8:	48001400 	.word	0x48001400
 80019dc:	48001800 	.word	0x48001800
 80019e0:	40010400 	.word	0x40010400

080019e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
 80019f0:	4613      	mov	r3, r2
 80019f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f4:	787b      	ldrb	r3, [r7, #1]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a00:	e002      	b.n	8001a08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f000 bf01 	b.w	8002830 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 8160 	beq.w	8001cfe <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a3e:	4bae      	ldr	r3, [pc, #696]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d00c      	beq.n	8001a64 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a4a:	4bab      	ldr	r3, [pc, #684]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d159      	bne.n	8001b0a <HAL_RCC_OscConfig+0xf6>
 8001a56:	4ba8      	ldr	r3, [pc, #672]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a62:	d152      	bne.n	8001b0a <HAL_RCC_OscConfig+0xf6>
 8001a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a68:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a70:	fa93 f3a3 	rbit	r3, r3
 8001a74:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a78:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d102      	bne.n	8001a96 <HAL_RCC_OscConfig+0x82>
 8001a90:	4b99      	ldr	r3, [pc, #612]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	e015      	b.n	8001ac2 <HAL_RCC_OscConfig+0xae>
 8001a96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a9a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001aaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ab2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001abe:	4b8e      	ldr	r3, [pc, #568]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ac6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001aca:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001ace:	fa92 f2a2 	rbit	r2, r2
 8001ad2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001ad6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ada:	fab2 f282 	clz	r2, r2
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	f042 0220 	orr.w	r2, r2, #32
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	f002 021f 	and.w	r2, r2, #31
 8001aea:	2101      	movs	r1, #1
 8001aec:	fa01 f202 	lsl.w	r2, r1, r2
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 8102 	beq.w	8001cfc <HAL_RCC_OscConfig+0x2e8>
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 80fc 	bne.w	8001cfc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f000 be93 	b.w	8002830 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b14:	d106      	bne.n	8001b24 <HAL_RCC_OscConfig+0x110>
 8001b16:	4b78      	ldr	r3, [pc, #480]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a77      	ldr	r2, [pc, #476]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e030      	b.n	8001b86 <HAL_RCC_OscConfig+0x172>
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x134>
 8001b2e:	4b72      	ldr	r3, [pc, #456]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a71      	ldr	r2, [pc, #452]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4b6f      	ldr	r3, [pc, #444]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a6e      	ldr	r2, [pc, #440]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e01e      	b.n	8001b86 <HAL_RCC_OscConfig+0x172>
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b52:	d10c      	bne.n	8001b6e <HAL_RCC_OscConfig+0x15a>
 8001b54:	4b68      	ldr	r3, [pc, #416]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a67      	ldr	r2, [pc, #412]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b65      	ldr	r3, [pc, #404]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a64      	ldr	r2, [pc, #400]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	e00b      	b.n	8001b86 <HAL_RCC_OscConfig+0x172>
 8001b6e:	4b62      	ldr	r3, [pc, #392]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a61      	ldr	r2, [pc, #388]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b5f      	ldr	r3, [pc, #380]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a5e      	ldr	r2, [pc, #376]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d059      	beq.n	8001c44 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff faf6 	bl	8001180 <HAL_GetTick>
 8001b94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b98:	e00a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b9a:	f7ff faf1 	bl	8001180 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d902      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	f000 be40 	b.w	8002830 <HAL_RCC_OscConfig+0xe1c>
 8001bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001bc4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d102      	bne.n	8001be2 <HAL_RCC_OscConfig+0x1ce>
 8001bdc:	4b46      	ldr	r3, [pc, #280]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0x1fa>
 8001be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001bf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001bfe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c0a:	4b3b      	ldr	r3, [pc, #236]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c12:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001c16:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001c1a:	fa92 f2a2 	rbit	r2, r2
 8001c1e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001c22:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c26:	fab2 f282 	clz	r2, r2
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	f042 0220 	orr.w	r2, r2, #32
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	f002 021f 	and.w	r2, r2, #31
 8001c36:	2101      	movs	r1, #1
 8001c38:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0ab      	beq.n	8001b9a <HAL_RCC_OscConfig+0x186>
 8001c42:	e05c      	b.n	8001cfe <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fa9c 	bl	8001180 <HAL_GetTick>
 8001c48:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c4e:	f7ff fa97 	bl	8001180 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	; 0x64
 8001c5c:	d902      	bls.n	8001c64 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	f000 bde6 	b.w	8002830 <HAL_RCC_OscConfig+0xe1c>
 8001c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c68:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001c78:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d102      	bne.n	8001c96 <HAL_RCC_OscConfig+0x282>
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	e015      	b.n	8001cc2 <HAL_RCC_OscConfig+0x2ae>
 8001c96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c9a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001caa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001cb2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001cb6:	fa93 f3a3 	rbit	r3, r3
 8001cba:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_RCC_OscConfig+0x2e4>)
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cc6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001cca:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001cce:	fa92 f2a2 	rbit	r2, r2
 8001cd2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001cd6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001cda:	fab2 f282 	clz	r2, r2
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	f042 0220 	orr.w	r2, r2, #32
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	f002 021f 	and.w	r2, r2, #31
 8001cea:	2101      	movs	r1, #1
 8001cec:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1ab      	bne.n	8001c4e <HAL_RCC_OscConfig+0x23a>
 8001cf6:	e002      	b.n	8001cfe <HAL_RCC_OscConfig+0x2ea>
 8001cf8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8170 	beq.w	8001fee <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d0e:	4bd0      	ldr	r3, [pc, #832]	; (8002050 <HAL_RCC_OscConfig+0x63c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d1a:	4bcd      	ldr	r3, [pc, #820]	; (8002050 <HAL_RCC_OscConfig+0x63c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d16d      	bne.n	8001e02 <HAL_RCC_OscConfig+0x3ee>
 8001d26:	4bca      	ldr	r3, [pc, #808]	; (8002050 <HAL_RCC_OscConfig+0x63c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d32:	d166      	bne.n	8001e02 <HAL_RCC_OscConfig+0x3ee>
 8001d34:	2302      	movs	r3, #2
 8001d36:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001d46:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	095b      	lsrs	r3, r3, #5
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d102      	bne.n	8001d64 <HAL_RCC_OscConfig+0x350>
 8001d5e:	4bbc      	ldr	r3, [pc, #752]	; (8002050 <HAL_RCC_OscConfig+0x63c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	e013      	b.n	8001d8c <HAL_RCC_OscConfig+0x378>
 8001d64:	2302      	movs	r3, #2
 8001d66:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001d76:	2302      	movs	r3, #2
 8001d78:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d7c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d88:	4bb1      	ldr	r3, [pc, #708]	; (8002050 <HAL_RCC_OscConfig+0x63c>)
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001d92:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001d96:	fa92 f2a2 	rbit	r2, r2
 8001d9a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001d9e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001da2:	fab2 f282 	clz	r2, r2
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	f042 0220 	orr.w	r2, r2, #32
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	f002 021f 	and.w	r2, r2, #31
 8001db2:	2101      	movs	r1, #1
 8001db4:	fa01 f202 	lsl.w	r2, r1, r2
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_RCC_OscConfig+0x3ba>
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d002      	beq.n	8001dce <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f000 bd31 	b.w	8002830 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	4ba0      	ldr	r3, [pc, #640]	; (8002050 <HAL_RCC_OscConfig+0x63c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	21f8      	movs	r1, #248	; 0xf8
 8001dde:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001de6:	fa91 f1a1 	rbit	r1, r1
 8001dea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001dee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001df2:	fab1 f181 	clz	r1, r1
 8001df6:	b2c9      	uxtb	r1, r1
 8001df8:	408b      	lsls	r3, r1
 8001dfa:	4995      	ldr	r1, [pc, #596]	; (8002050 <HAL_RCC_OscConfig+0x63c>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e00:	e0f5      	b.n	8001fee <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 8085 	beq.w	8001f18 <HAL_RCC_OscConfig+0x504>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001e20:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	461a      	mov	r2, r3
 8001e36:	2301      	movs	r3, #1
 8001e38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7ff f9a1 	bl	8001180 <HAL_GetTick>
 8001e3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e42:	e00a      	b.n	8001e5a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e44:	f7ff f99c 	bl	8001180 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d902      	bls.n	8001e5a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	f000 bceb 	b.w	8002830 <HAL_RCC_OscConfig+0xe1c>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001e6c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d102      	bne.n	8001e8a <HAL_RCC_OscConfig+0x476>
 8001e84:	4b72      	ldr	r3, [pc, #456]	; (8002050 <HAL_RCC_OscConfig+0x63c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	e013      	b.n	8001eb2 <HAL_RCC_OscConfig+0x49e>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ea2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001eae:	4b68      	ldr	r3, [pc, #416]	; (8002050 <HAL_RCC_OscConfig+0x63c>)
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001eb8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001ebc:	fa92 f2a2 	rbit	r2, r2
 8001ec0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001ec4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ec8:	fab2 f282 	clz	r2, r2
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	f042 0220 	orr.w	r2, r2, #32
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	f002 021f 	and.w	r2, r2, #31
 8001ed8:	2101      	movs	r1, #1
 8001eda:	fa01 f202 	lsl.w	r2, r1, r2
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0af      	beq.n	8001e44 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee4:	4b5a      	ldr	r3, [pc, #360]	; (8002050 <HAL_RCC_OscConfig+0x63c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	21f8      	movs	r1, #248	; 0xf8
 8001ef4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001efc:	fa91 f1a1 	rbit	r1, r1
 8001f00:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001f04:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f08:	fab1 f181 	clz	r1, r1
 8001f0c:	b2c9      	uxtb	r1, r1
 8001f0e:	408b      	lsls	r3, r1
 8001f10:	494f      	ldr	r1, [pc, #316]	; (8002050 <HAL_RCC_OscConfig+0x63c>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
 8001f16:	e06a      	b.n	8001fee <HAL_RCC_OscConfig+0x5da>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001f2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2300      	movs	r3, #0
 8001f42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff f91c 	bl	8001180 <HAL_GetTick>
 8001f48:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4e:	f7ff f917 	bl	8001180 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d902      	bls.n	8001f64 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	f000 bc66 	b.w	8002830 <HAL_RCC_OscConfig+0xe1c>
 8001f64:	2302      	movs	r3, #2
 8001f66:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001f76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	095b      	lsrs	r3, r3, #5
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d102      	bne.n	8001f94 <HAL_RCC_OscConfig+0x580>
 8001f8e:	4b30      	ldr	r3, [pc, #192]	; (8002050 <HAL_RCC_OscConfig+0x63c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	e013      	b.n	8001fbc <HAL_RCC_OscConfig+0x5a8>
 8001f94:	2302      	movs	r3, #2
 8001f96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001fac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001fb8:	4b25      	ldr	r3, [pc, #148]	; (8002050 <HAL_RCC_OscConfig+0x63c>)
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001fc2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001fc6:	fa92 f2a2 	rbit	r2, r2
 8001fca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001fce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001fd2:	fab2 f282 	clz	r2, r2
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	f042 0220 	orr.w	r2, r2, #32
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	f002 021f 	and.w	r2, r2, #31
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1af      	bne.n	8001f4e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80da 	beq.w	80021b2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d069      	beq.n	80020dc <HAL_RCC_OscConfig+0x6c8>
 8002008:	2301      	movs	r3, #1
 800200a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800201a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_RCC_OscConfig+0x640>)
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	461a      	mov	r2, r3
 800202e:	2301      	movs	r3, #1
 8002030:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002032:	f7ff f8a5 	bl	8001180 <HAL_GetTick>
 8002036:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203a:	e00d      	b.n	8002058 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203c:	f7ff f8a0 	bl	8001180 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d905      	bls.n	8002058 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e3ef      	b.n	8002830 <HAL_RCC_OscConfig+0xe1c>
 8002050:	40021000 	.word	0x40021000
 8002054:	10908120 	.word	0x10908120
 8002058:	2302      	movs	r3, #2
 800205a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002062:	fa93 f2a3 	rbit	r2, r3
 8002066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002070:	2202      	movs	r2, #2
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	fa93 f2a3 	rbit	r2, r3
 800207e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002088:	2202      	movs	r2, #2
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	fa93 f2a3 	rbit	r2, r3
 8002096:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800209a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209c:	4ba4      	ldr	r3, [pc, #656]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 800209e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020a0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80020a4:	2102      	movs	r1, #2
 80020a6:	6019      	str	r1, [r3, #0]
 80020a8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	fa93 f1a3 	rbit	r1, r3
 80020b2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80020b6:	6019      	str	r1, [r3, #0]
  return result;
 80020b8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	2101      	movs	r1, #1
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0b0      	beq.n	800203c <HAL_RCC_OscConfig+0x628>
 80020da:	e06a      	b.n	80021b2 <HAL_RCC_OscConfig+0x79e>
 80020dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	fa93 f2a3 	rbit	r2, r3
 80020ee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80020f2:	601a      	str	r2, [r3, #0]
  return result;
 80020f4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80020f8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	4b8c      	ldr	r3, [pc, #560]	; (8002334 <HAL_RCC_OscConfig+0x920>)
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	461a      	mov	r2, r3
 800210a:	2300      	movs	r3, #0
 800210c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210e:	f7ff f837 	bl	8001180 <HAL_GetTick>
 8002112:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002116:	e009      	b.n	800212c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002118:	f7ff f832 	bl	8001180 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e381      	b.n	8002830 <HAL_RCC_OscConfig+0xe1c>
 800212c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002130:	2202      	movs	r2, #2
 8002132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	fa93 f2a3 	rbit	r2, r3
 800213e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002148:	2202      	movs	r2, #2
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	fa93 f2a3 	rbit	r2, r3
 8002156:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002160:	2202      	movs	r2, #2
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	fa93 f2a3 	rbit	r2, r3
 800216e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002172:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002174:	4b6e      	ldr	r3, [pc, #440]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 8002176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002178:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800217c:	2102      	movs	r1, #2
 800217e:	6019      	str	r1, [r3, #0]
 8002180:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	fa93 f1a3 	rbit	r1, r3
 800218a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800218e:	6019      	str	r1, [r3, #0]
  return result;
 8002190:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	2101      	movs	r1, #1
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1b2      	bne.n	8002118 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8157 	beq.w	8002470 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d112      	bne.n	80021fa <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d4:	4b56      	ldr	r3, [pc, #344]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	4a55      	ldr	r2, [pc, #340]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 80021da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021de:	61d3      	str	r3, [r2, #28]
 80021e0:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80021e8:	f107 030c 	add.w	r3, r7, #12
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	f107 030c 	add.w	r3, r7, #12
 80021f2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fa:	4b4f      	ldr	r3, [pc, #316]	; (8002338 <HAL_RCC_OscConfig+0x924>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d11a      	bne.n	800223c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002206:	4b4c      	ldr	r3, [pc, #304]	; (8002338 <HAL_RCC_OscConfig+0x924>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a4b      	ldr	r2, [pc, #300]	; (8002338 <HAL_RCC_OscConfig+0x924>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002212:	f7fe ffb5 	bl	8001180 <HAL_GetTick>
 8002216:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	e009      	b.n	8002230 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221c:	f7fe ffb0 	bl	8001180 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b64      	cmp	r3, #100	; 0x64
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e2ff      	b.n	8002830 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	4b41      	ldr	r3, [pc, #260]	; (8002338 <HAL_RCC_OscConfig+0x924>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ef      	beq.n	800221c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d106      	bne.n	8002254 <HAL_RCC_OscConfig+0x840>
 8002246:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a39      	ldr	r2, [pc, #228]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6213      	str	r3, [r2, #32]
 8002252:	e02f      	b.n	80022b4 <HAL_RCC_OscConfig+0x8a0>
 8002254:	1d3b      	adds	r3, r7, #4
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0x864>
 800225e:	4b34      	ldr	r3, [pc, #208]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4a33      	ldr	r2, [pc, #204]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	6213      	str	r3, [r2, #32]
 800226a:	4b31      	ldr	r3, [pc, #196]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4a30      	ldr	r2, [pc, #192]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 8002270:	f023 0304 	bic.w	r3, r3, #4
 8002274:	6213      	str	r3, [r2, #32]
 8002276:	e01d      	b.n	80022b4 <HAL_RCC_OscConfig+0x8a0>
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b05      	cmp	r3, #5
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x888>
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a2a      	ldr	r2, [pc, #168]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 8002288:	f043 0304 	orr.w	r3, r3, #4
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	4b28      	ldr	r3, [pc, #160]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a27      	ldr	r2, [pc, #156]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6213      	str	r3, [r2, #32]
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0x8a0>
 800229c:	4b24      	ldr	r3, [pc, #144]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	4a23      	ldr	r2, [pc, #140]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	6213      	str	r3, [r2, #32]
 80022a8:	4b21      	ldr	r3, [pc, #132]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4a20      	ldr	r2, [pc, #128]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 80022ae:	f023 0304 	bic.w	r3, r3, #4
 80022b2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d06a      	beq.n	8002394 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022be:	f7fe ff5f 	bl	8001180 <HAL_GetTick>
 80022c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c6:	e00b      	b.n	80022e0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c8:	f7fe ff5a 	bl	8001180 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e2a7      	b.n	8002830 <HAL_RCC_OscConfig+0xe1c>
 80022e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022e4:	2202      	movs	r2, #2
 80022e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	fa93 f2a3 	rbit	r2, r3
 80022f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80022fc:	2202      	movs	r2, #2
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	fa93 f2a3 	rbit	r2, r3
 800230a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800230e:	601a      	str	r2, [r3, #0]
  return result;
 8002310:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002314:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d108      	bne.n	800233c <HAL_RCC_OscConfig+0x928>
 800232a:	4b01      	ldr	r3, [pc, #4]	; (8002330 <HAL_RCC_OscConfig+0x91c>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	e013      	b.n	8002358 <HAL_RCC_OscConfig+0x944>
 8002330:	40021000 	.word	0x40021000
 8002334:	10908120 	.word	0x10908120
 8002338:	40007000 	.word	0x40007000
 800233c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002340:	2202      	movs	r2, #2
 8002342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	fa93 f2a3 	rbit	r2, r3
 800234e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	4bc0      	ldr	r3, [pc, #768]	; (8002658 <HAL_RCC_OscConfig+0xc44>)
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800235c:	2102      	movs	r1, #2
 800235e:	6011      	str	r1, [r2, #0]
 8002360:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	fa92 f1a2 	rbit	r1, r2
 800236a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800236e:	6011      	str	r1, [r2, #0]
  return result;
 8002370:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	fab2 f282 	clz	r2, r2
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	f002 021f 	and.w	r2, r2, #31
 8002386:	2101      	movs	r1, #1
 8002388:	fa01 f202 	lsl.w	r2, r1, r2
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d09a      	beq.n	80022c8 <HAL_RCC_OscConfig+0x8b4>
 8002392:	e063      	b.n	800245c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002394:	f7fe fef4 	bl	8001180 <HAL_GetTick>
 8002398:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239c:	e00b      	b.n	80023b6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7fe feef 	bl	8001180 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e23c      	b.n	8002830 <HAL_RCC_OscConfig+0xe1c>
 80023b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023ba:	2202      	movs	r2, #2
 80023bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	fa93 f2a3 	rbit	r2, r3
 80023c8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023d2:	2202      	movs	r2, #2
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	fa93 f2a3 	rbit	r2, r3
 80023e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80023e4:	601a      	str	r2, [r3, #0]
  return result;
 80023e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80023ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d102      	bne.n	8002406 <HAL_RCC_OscConfig+0x9f2>
 8002400:	4b95      	ldr	r3, [pc, #596]	; (8002658 <HAL_RCC_OscConfig+0xc44>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	e00d      	b.n	8002422 <HAL_RCC_OscConfig+0xa0e>
 8002406:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800240a:	2202      	movs	r2, #2
 800240c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	fa93 f2a3 	rbit	r2, r3
 8002418:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	4b8e      	ldr	r3, [pc, #568]	; (8002658 <HAL_RCC_OscConfig+0xc44>)
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002426:	2102      	movs	r1, #2
 8002428:	6011      	str	r1, [r2, #0]
 800242a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	fa92 f1a2 	rbit	r1, r2
 8002434:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002438:	6011      	str	r1, [r2, #0]
  return result;
 800243a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	fab2 f282 	clz	r2, r2
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f002 021f 	and.w	r2, r2, #31
 8002450:	2101      	movs	r1, #1
 8002452:	fa01 f202 	lsl.w	r2, r1, r2
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1a0      	bne.n	800239e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800245c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002464:	4b7c      	ldr	r3, [pc, #496]	; (8002658 <HAL_RCC_OscConfig+0xc44>)
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	4a7b      	ldr	r2, [pc, #492]	; (8002658 <HAL_RCC_OscConfig+0xc44>)
 800246a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 81d9 	beq.w	800282e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800247c:	4b76      	ldr	r3, [pc, #472]	; (8002658 <HAL_RCC_OscConfig+0xc44>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b08      	cmp	r3, #8
 8002486:	f000 81a6 	beq.w	80027d6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b02      	cmp	r3, #2
 8002492:	f040 811e 	bne.w	80026d2 <HAL_RCC_OscConfig+0xcbe>
 8002496:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800249a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800249e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	fa93 f2a3 	rbit	r2, r3
 80024aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80024ae:	601a      	str	r2, [r3, #0]
  return result;
 80024b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80024b4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	461a      	mov	r2, r3
 80024c8:	2300      	movs	r3, #0
 80024ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7fe fe58 	bl	8001180 <HAL_GetTick>
 80024d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d4:	e009      	b.n	80024ea <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d6:	f7fe fe53 	bl	8001180 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e1a2      	b.n	8002830 <HAL_RCC_OscConfig+0xe1c>
 80024ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80024ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	fa93 f2a3 	rbit	r2, r3
 80024fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002502:	601a      	str	r2, [r3, #0]
  return result;
 8002504:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002508:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d102      	bne.n	8002524 <HAL_RCC_OscConfig+0xb10>
 800251e:	4b4e      	ldr	r3, [pc, #312]	; (8002658 <HAL_RCC_OscConfig+0xc44>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	e01b      	b.n	800255c <HAL_RCC_OscConfig+0xb48>
 8002524:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002528:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800252c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	fa93 f2a3 	rbit	r2, r3
 8002538:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002542:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	fa93 f2a3 	rbit	r2, r3
 8002552:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <HAL_RCC_OscConfig+0xc44>)
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002560:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002564:	6011      	str	r1, [r2, #0]
 8002566:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	fa92 f1a2 	rbit	r1, r2
 8002570:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002574:	6011      	str	r1, [r2, #0]
  return result;
 8002576:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	fab2 f282 	clz	r2, r2
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	f042 0220 	orr.w	r2, r2, #32
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	f002 021f 	and.w	r2, r2, #31
 800258c:	2101      	movs	r1, #1
 800258e:	fa01 f202 	lsl.w	r2, r1, r2
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d19e      	bne.n	80024d6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002598:	4b2f      	ldr	r3, [pc, #188]	; (8002658 <HAL_RCC_OscConfig+0xc44>)
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f023 020f 	bic.w	r2, r3, #15
 80025a0:	1d3b      	adds	r3, r7, #4
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	492c      	ldr	r1, [pc, #176]	; (8002658 <HAL_RCC_OscConfig+0xc44>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80025ac:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <HAL_RCC_OscConfig+0xc44>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6a19      	ldr	r1, [r3, #32]
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	430b      	orrs	r3, r1
 80025c2:	4925      	ldr	r1, [pc, #148]	; (8002658 <HAL_RCC_OscConfig+0xc44>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
 80025c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80025cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	fa93 f2a3 	rbit	r2, r3
 80025dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025e0:	601a      	str	r2, [r3, #0]
  return result;
 80025e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025e6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	461a      	mov	r2, r3
 80025fa:	2301      	movs	r3, #1
 80025fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7fe fdbf 	bl	8001180 <HAL_GetTick>
 8002602:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002606:	e009      	b.n	800261c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002608:	f7fe fdba 	bl	8001180 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e109      	b.n	8002830 <HAL_RCC_OscConfig+0xe1c>
 800261c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002620:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	fa93 f2a3 	rbit	r2, r3
 8002630:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002634:	601a      	str	r2, [r3, #0]
  return result;
 8002636:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800263a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <HAL_RCC_OscConfig+0xc48>
 8002650:	4b01      	ldr	r3, [pc, #4]	; (8002658 <HAL_RCC_OscConfig+0xc44>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	e01e      	b.n	8002694 <HAL_RCC_OscConfig+0xc80>
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002660:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002664:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	fa93 f2a3 	rbit	r2, r3
 8002670:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800267a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	fa93 f2a3 	rbit	r2, r3
 800268a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	4b6a      	ldr	r3, [pc, #424]	; (800283c <HAL_RCC_OscConfig+0xe28>)
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002698:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800269c:	6011      	str	r1, [r2, #0]
 800269e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	fa92 f1a2 	rbit	r1, r2
 80026a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026ac:	6011      	str	r1, [r2, #0]
  return result;
 80026ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	fab2 f282 	clz	r2, r2
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	f042 0220 	orr.w	r2, r2, #32
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	f002 021f 	and.w	r2, r2, #31
 80026c4:	2101      	movs	r1, #1
 80026c6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d09b      	beq.n	8002608 <HAL_RCC_OscConfig+0xbf4>
 80026d0:	e0ad      	b.n	800282e <HAL_RCC_OscConfig+0xe1a>
 80026d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fa93 f2a3 	rbit	r2, r3
 80026e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026ea:	601a      	str	r2, [r3, #0]
  return result;
 80026ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026f0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	461a      	mov	r2, r3
 8002704:	2300      	movs	r3, #0
 8002706:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe fd3a 	bl	8001180 <HAL_GetTick>
 800270c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002710:	e009      	b.n	8002726 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002712:	f7fe fd35 	bl	8001180 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e084      	b.n	8002830 <HAL_RCC_OscConfig+0xe1c>
 8002726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800272a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800272e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	fa93 f2a3 	rbit	r2, r3
 800273a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800273e:	601a      	str	r2, [r3, #0]
  return result;
 8002740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002744:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d102      	bne.n	8002760 <HAL_RCC_OscConfig+0xd4c>
 800275a:	4b38      	ldr	r3, [pc, #224]	; (800283c <HAL_RCC_OscConfig+0xe28>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	e01b      	b.n	8002798 <HAL_RCC_OscConfig+0xd84>
 8002760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002764:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002768:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	fa93 f2a3 	rbit	r2, r3
 8002774:	f107 0320 	add.w	r3, r7, #32
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	f107 031c 	add.w	r3, r7, #28
 800277e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	fa93 f2a3 	rbit	r2, r3
 800278e:	f107 0318 	add.w	r3, r7, #24
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	4b29      	ldr	r3, [pc, #164]	; (800283c <HAL_RCC_OscConfig+0xe28>)
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	f107 0214 	add.w	r2, r7, #20
 800279c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027a0:	6011      	str	r1, [r2, #0]
 80027a2:	f107 0214 	add.w	r2, r7, #20
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	fa92 f1a2 	rbit	r1, r2
 80027ac:	f107 0210 	add.w	r2, r7, #16
 80027b0:	6011      	str	r1, [r2, #0]
  return result;
 80027b2:	f107 0210 	add.w	r2, r7, #16
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	fab2 f282 	clz	r2, r2
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	f042 0220 	orr.w	r2, r2, #32
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	f002 021f 	and.w	r2, r2, #31
 80027c8:	2101      	movs	r1, #1
 80027ca:	fa01 f202 	lsl.w	r2, r1, r2
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d19e      	bne.n	8002712 <HAL_RCC_OscConfig+0xcfe>
 80027d4:	e02b      	b.n	800282e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e025      	b.n	8002830 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027e4:	4b15      	ldr	r3, [pc, #84]	; (800283c <HAL_RCC_OscConfig+0xe28>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <HAL_RCC_OscConfig+0xe28>)
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80027f8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	429a      	cmp	r2, r3
 8002804:	d111      	bne.n	800282a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002806:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800280a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002814:	429a      	cmp	r2, r3
 8002816:	d108      	bne.n	800282a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002818:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800281c:	f003 020f 	and.w	r2, r3, #15
 8002820:	1d3b      	adds	r3, r7, #4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b09e      	sub	sp, #120	; 0x78
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e162      	b.n	8002b1e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b90      	ldr	r3, [pc, #576]	; (8002a9c <HAL_RCC_ClockConfig+0x25c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d910      	bls.n	8002888 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b8d      	ldr	r3, [pc, #564]	; (8002a9c <HAL_RCC_ClockConfig+0x25c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 0207 	bic.w	r2, r3, #7
 800286e:	498b      	ldr	r1, [pc, #556]	; (8002a9c <HAL_RCC_ClockConfig+0x25c>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b89      	ldr	r3, [pc, #548]	; (8002a9c <HAL_RCC_ClockConfig+0x25c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e14a      	b.n	8002b1e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b82      	ldr	r3, [pc, #520]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	497f      	ldr	r1, [pc, #508]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 80dc 	beq.w	8002a6c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d13c      	bne.n	8002936 <HAL_RCC_ClockConfig+0xf6>
 80028bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80028ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d102      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xa6>
 80028e0:	4b6f      	ldr	r3, [pc, #444]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	e00f      	b.n	8002906 <HAL_RCC_ClockConfig+0xc6>
 80028e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	667b      	str	r3, [r7, #100]	; 0x64
 80028f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f8:	663b      	str	r3, [r7, #96]	; 0x60
 80028fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002902:	4b67      	ldr	r3, [pc, #412]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800290a:	65ba      	str	r2, [r7, #88]	; 0x58
 800290c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800290e:	fa92 f2a2 	rbit	r2, r2
 8002912:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002914:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002916:	fab2 f282 	clz	r2, r2
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	f042 0220 	orr.w	r2, r2, #32
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	f002 021f 	and.w	r2, r2, #31
 8002926:	2101      	movs	r1, #1
 8002928:	fa01 f202 	lsl.w	r2, r1, r2
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d17b      	bne.n	8002a2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e0f3      	b.n	8002b1e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d13c      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x178>
 800293e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002942:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800294c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d102      	bne.n	8002968 <HAL_RCC_ClockConfig+0x128>
 8002962:	4b4f      	ldr	r3, [pc, #316]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	e00f      	b.n	8002988 <HAL_RCC_ClockConfig+0x148>
 8002968:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800296c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	647b      	str	r3, [r7, #68]	; 0x44
 8002976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800297a:	643b      	str	r3, [r7, #64]	; 0x40
 800297c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002984:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800298c:	63ba      	str	r2, [r7, #56]	; 0x38
 800298e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002990:	fa92 f2a2 	rbit	r2, r2
 8002994:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002998:	fab2 f282 	clz	r2, r2
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	f042 0220 	orr.w	r2, r2, #32
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f002 021f 	and.w	r2, r2, #31
 80029a8:	2101      	movs	r1, #1
 80029aa:	fa01 f202 	lsl.w	r2, r1, r2
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d13a      	bne.n	8002a2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0b2      	b.n	8002b1e <HAL_RCC_ClockConfig+0x2de>
 80029b8:	2302      	movs	r3, #2
 80029ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d102      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x1a0>
 80029da:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	e00d      	b.n	80029fc <HAL_RCC_ClockConfig+0x1bc>
 80029e0:	2302      	movs	r3, #2
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
 80029ec:	2302      	movs	r3, #2
 80029ee:	623b      	str	r3, [r7, #32]
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	61fb      	str	r3, [r7, #28]
 80029f8:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2202      	movs	r2, #2
 80029fe:	61ba      	str	r2, [r7, #24]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	fa92 f2a2 	rbit	r2, r2
 8002a06:	617a      	str	r2, [r7, #20]
  return result;
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	fab2 f282 	clz	r2, r2
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f042 0220 	orr.w	r2, r2, #32
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	f002 021f 	and.w	r2, r2, #31
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e079      	b.n	8002b1e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f023 0203 	bic.w	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	491a      	ldr	r1, [pc, #104]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fba0 	bl	8001180 <HAL_GetTick>
 8002a40:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a44:	f7fe fb9c 	bl	8001180 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e061      	b.n	8002b1e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 020c 	and.w	r2, r3, #12
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d1eb      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCC_ClockConfig+0x25c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d214      	bcs.n	8002aa4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <HAL_RCC_ClockConfig+0x25c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 0207 	bic.w	r2, r3, #7
 8002a82:	4906      	ldr	r1, [pc, #24]	; (8002a9c <HAL_RCC_ClockConfig+0x25c>)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <HAL_RCC_ClockConfig+0x25c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e040      	b.n	8002b1e <HAL_RCC_ClockConfig+0x2de>
 8002a9c:	40022000 	.word	0x40022000
 8002aa0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <HAL_RCC_ClockConfig+0x2e8>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	491a      	ldr	r1, [pc, #104]	; (8002b28 <HAL_RCC_ClockConfig+0x2e8>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ace:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_RCC_ClockConfig+0x2e8>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4912      	ldr	r1, [pc, #72]	; (8002b28 <HAL_RCC_ClockConfig+0x2e8>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ae2:	f000 f829 	bl	8002b38 <HAL_RCC_GetSysClockFreq>
 8002ae6:	4601      	mov	r1, r0
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <HAL_RCC_ClockConfig+0x2e8>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af0:	22f0      	movs	r2, #240	; 0xf0
 8002af2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	fa92 f2a2 	rbit	r2, r2
 8002afa:	60fa      	str	r2, [r7, #12]
  return result;
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	fab2 f282 	clz	r2, r2
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	40d3      	lsrs	r3, r2
 8002b06:	4a09      	ldr	r2, [pc, #36]	; (8002b2c <HAL_RCC_ClockConfig+0x2ec>)
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
 8002b0a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b0e:	4a08      	ldr	r2, [pc, #32]	; (8002b30 <HAL_RCC_ClockConfig+0x2f0>)
 8002b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b12:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_RCC_ClockConfig+0x2f4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe faee 	bl	80010f8 <HAL_InitTick>
  
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3778      	adds	r7, #120	; 0x78
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	08004684 	.word	0x08004684
 8002b30:	20000000 	.word	0x20000000
 8002b34:	20000004 	.word	0x20000004

08002b38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b08b      	sub	sp, #44	; 0x2c
 8002b3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	2300      	movs	r3, #0
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b52:	4b2a      	ldr	r3, [pc, #168]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d002      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x30>
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d003      	beq.n	8002b6e <HAL_RCC_GetSysClockFreq+0x36>
 8002b66:	e03f      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b6a:	623b      	str	r3, [r7, #32]
      break;
 8002b6c:	e03f      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b74:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b78:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	fa92 f2a2 	rbit	r2, r2
 8002b80:	607a      	str	r2, [r7, #4]
  return result;
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	fab2 f282 	clz	r2, r2
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	40d3      	lsrs	r3, r2
 8002b8c:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b8e:	5cd3      	ldrb	r3, [r2, r3]
 8002b90:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b92:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	fa92 f2a2 	rbit	r2, r2
 8002ba4:	60fa      	str	r2, [r7, #12]
  return result;
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	fab2 f282 	clz	r2, r2
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	40d3      	lsrs	r3, r2
 8002bb0:	4a15      	ldr	r2, [pc, #84]	; (8002c08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bb2:	5cd3      	ldrb	r3, [r2, r3]
 8002bb4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bc0:	4a0f      	ldr	r2, [pc, #60]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fb02 f303 	mul.w	r3, r2, r3
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd0:	e007      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bd2:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	623b      	str	r3, [r7, #32]
      break;
 8002be6:	e002      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bea:	623b      	str	r3, [r7, #32]
      break;
 8002bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bee:	6a3b      	ldr	r3, [r7, #32]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	372c      	adds	r7, #44	; 0x2c
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	007a1200 	.word	0x007a1200
 8002c04:	08004694 	.word	0x08004694
 8002c08:	080046a4 	.word	0x080046a4

08002c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b092      	sub	sp, #72	; 0x48
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80d4 	beq.w	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c30:	4b4e      	ldr	r3, [pc, #312]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10e      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3c:	4b4b      	ldr	r3, [pc, #300]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	4a4a      	ldr	r2, [pc, #296]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c46:	61d3      	str	r3, [r2, #28]
 8002c48:	4b48      	ldr	r3, [pc, #288]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c54:	2301      	movs	r3, #1
 8002c56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5a:	4b45      	ldr	r3, [pc, #276]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d118      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c66:	4b42      	ldr	r3, [pc, #264]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a41      	ldr	r2, [pc, #260]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c72:	f7fe fa85 	bl	8001180 <HAL_GetTick>
 8002c76:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c78:	e008      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7a:	f7fe fa81 	bl	8001180 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b64      	cmp	r3, #100	; 0x64
 8002c86:	d901      	bls.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e1d6      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8c:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f0      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c98:	4b34      	ldr	r3, [pc, #208]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 8084 	beq.w	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d07c      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cb8:	4b2c      	ldr	r3, [pc, #176]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	461a      	mov	r2, r3
 8002d06:	2300      	movs	r3, #0
 8002d08:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d0a:	4a18      	ldr	r2, [pc, #96]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d0e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d04b      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1a:	f7fe fa31 	bl	8001180 <HAL_GetTick>
 8002d1e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d20:	e00a      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d22:	f7fe fa2d 	bl	8001180 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e180      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
 8002d44:	2302      	movs	r3, #2
 8002d46:	623b      	str	r3, [r7, #32]
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	61fb      	str	r3, [r7, #28]
  return result;
 8002d50:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f043 0302 	orr.w	r3, r3, #2
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d108      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d66:	4b01      	ldr	r3, [pc, #4]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	e00d      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40007000 	.word	0x40007000
 8002d74:	10908100 	.word	0x10908100
 8002d78:	2302      	movs	r3, #2
 8002d7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	4ba0      	ldr	r3, [pc, #640]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	2202      	movs	r2, #2
 8002d8a:	613a      	str	r2, [r7, #16]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	fa92 f2a2 	rbit	r2, r2
 8002d92:	60fa      	str	r2, [r7, #12]
  return result;
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	fab2 f282 	clz	r2, r2
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f002 021f 	and.w	r2, r2, #31
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0b7      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002db2:	4b95      	ldr	r3, [pc, #596]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4992      	ldr	r1, [pc, #584]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dcc:	4b8e      	ldr	r3, [pc, #568]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	4a8d      	ldr	r2, [pc, #564]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002de4:	4b88      	ldr	r3, [pc, #544]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	f023 0203 	bic.w	r2, r3, #3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4985      	ldr	r1, [pc, #532]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e02:	4b81      	ldr	r3, [pc, #516]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	497e      	ldr	r1, [pc, #504]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e20:	4b79      	ldr	r3, [pc, #484]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	4976      	ldr	r1, [pc, #472]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e3e:	4b72      	ldr	r3, [pc, #456]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f023 0210 	bic.w	r2, r3, #16
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	496f      	ldr	r1, [pc, #444]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e68:	4967      	ldr	r1, [pc, #412]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d008      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e7a:	4b63      	ldr	r3, [pc, #396]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f023 0220 	bic.w	r2, r3, #32
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4960      	ldr	r1, [pc, #384]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e98:	4b5b      	ldr	r3, [pc, #364]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	4958      	ldr	r1, [pc, #352]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d008      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002eb6:	4b54      	ldr	r3, [pc, #336]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	4951      	ldr	r1, [pc, #324]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ed4:	4b4c      	ldr	r3, [pc, #304]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	4949      	ldr	r1, [pc, #292]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d008      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ef2:	4b45      	ldr	r3, [pc, #276]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	4942      	ldr	r1, [pc, #264]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f10:	4b3d      	ldr	r3, [pc, #244]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	493a      	ldr	r1, [pc, #232]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f2e:	4b36      	ldr	r3, [pc, #216]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	4933      	ldr	r1, [pc, #204]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f4c:	4b2e      	ldr	r3, [pc, #184]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f58:	492b      	ldr	r1, [pc, #172]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f6a:	4b27      	ldr	r3, [pc, #156]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4924      	ldr	r1, [pc, #144]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002f88:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	491c      	ldr	r1, [pc, #112]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002fa6:	4b18      	ldr	r3, [pc, #96]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb2:	4915      	ldr	r1, [pc, #84]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002fc4:	4b10      	ldr	r3, [pc, #64]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	490d      	ldr	r1, [pc, #52]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002fe2:	4b09      	ldr	r3, [pc, #36]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fee:	4906      	ldr	r1, [pc, #24]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00c      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003000:	4b01      	ldr	r3, [pc, #4]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	e002      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003014:	490b      	ldr	r1, [pc, #44]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003016:	4313      	orrs	r3, r2
 8003018:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003032:	4904      	ldr	r1, [pc, #16]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003034:	4313      	orrs	r3, r2
 8003036:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3748      	adds	r7, #72	; 0x48
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000

08003048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e049      	b.n	80030ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fd ff1a 	bl	8000ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3304      	adds	r3, #4
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	f000 fd30 	bl	8003aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d001      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e04f      	b.n	80031b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a23      	ldr	r2, [pc, #140]	; (80031bc <HAL_TIM_Base_Start_IT+0xc4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01d      	beq.n	800316e <HAL_TIM_Base_Start_IT+0x76>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313a:	d018      	beq.n	800316e <HAL_TIM_Base_Start_IT+0x76>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <HAL_TIM_Base_Start_IT+0x76>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1e      	ldr	r2, [pc, #120]	; (80031c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00e      	beq.n	800316e <HAL_TIM_Base_Start_IT+0x76>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d009      	beq.n	800316e <HAL_TIM_Base_Start_IT+0x76>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <HAL_TIM_Base_Start_IT+0x76>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d115      	bne.n	800319a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003176:	4013      	ands	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b06      	cmp	r3, #6
 800317e:	d015      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0xb4>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003186:	d011      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003198:	e008      	b.n	80031ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0201 	orr.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	e000      	b.n	80031ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40012c00 	.word	0x40012c00
 80031c0:	40000400 	.word	0x40000400
 80031c4:	40000800 	.word	0x40000800
 80031c8:	40013400 	.word	0x40013400
 80031cc:	40014000 	.word	0x40014000
 80031d0:	40015000 	.word	0x40015000
 80031d4:	00010007 	.word	0x00010007

080031d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e049      	b.n	800327e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd fe1e 	bl	8000e40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3304      	adds	r3, #4
 8003214:	4619      	mov	r1, r3
 8003216:	4610      	mov	r0, r2
 8003218:	f000 fc68 	bl	8003aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d109      	bne.n	80032ac <HAL_TIM_PWM_Start+0x24>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	bf14      	ite	ne
 80032a4:	2301      	movne	r3, #1
 80032a6:	2300      	moveq	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	e03c      	b.n	8003326 <HAL_TIM_PWM_Start+0x9e>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d109      	bne.n	80032c6 <HAL_TIM_PWM_Start+0x3e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	bf14      	ite	ne
 80032be:	2301      	movne	r3, #1
 80032c0:	2300      	moveq	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	e02f      	b.n	8003326 <HAL_TIM_PWM_Start+0x9e>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d109      	bne.n	80032e0 <HAL_TIM_PWM_Start+0x58>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	bf14      	ite	ne
 80032d8:	2301      	movne	r3, #1
 80032da:	2300      	moveq	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	e022      	b.n	8003326 <HAL_TIM_PWM_Start+0x9e>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b0c      	cmp	r3, #12
 80032e4:	d109      	bne.n	80032fa <HAL_TIM_PWM_Start+0x72>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	bf14      	ite	ne
 80032f2:	2301      	movne	r3, #1
 80032f4:	2300      	moveq	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	e015      	b.n	8003326 <HAL_TIM_PWM_Start+0x9e>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b10      	cmp	r3, #16
 80032fe:	d109      	bne.n	8003314 <HAL_TIM_PWM_Start+0x8c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	bf14      	ite	ne
 800330c:	2301      	movne	r3, #1
 800330e:	2300      	moveq	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	e008      	b.n	8003326 <HAL_TIM_PWM_Start+0x9e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	bf14      	ite	ne
 8003320:	2301      	movne	r3, #1
 8003322:	2300      	moveq	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0a1      	b.n	8003472 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d104      	bne.n	800333e <HAL_TIM_PWM_Start+0xb6>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800333c:	e023      	b.n	8003386 <HAL_TIM_PWM_Start+0xfe>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b04      	cmp	r3, #4
 8003342:	d104      	bne.n	800334e <HAL_TIM_PWM_Start+0xc6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800334c:	e01b      	b.n	8003386 <HAL_TIM_PWM_Start+0xfe>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d104      	bne.n	800335e <HAL_TIM_PWM_Start+0xd6>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800335c:	e013      	b.n	8003386 <HAL_TIM_PWM_Start+0xfe>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b0c      	cmp	r3, #12
 8003362:	d104      	bne.n	800336e <HAL_TIM_PWM_Start+0xe6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800336c:	e00b      	b.n	8003386 <HAL_TIM_PWM_Start+0xfe>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b10      	cmp	r3, #16
 8003372:	d104      	bne.n	800337e <HAL_TIM_PWM_Start+0xf6>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800337c:	e003      	b.n	8003386 <HAL_TIM_PWM_Start+0xfe>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2202      	movs	r2, #2
 8003382:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2201      	movs	r2, #1
 800338c:	6839      	ldr	r1, [r7, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f000 ffea 	bl	8004368 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a38      	ldr	r2, [pc, #224]	; (800347c <HAL_TIM_PWM_Start+0x1f4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d018      	beq.n	80033d0 <HAL_TIM_PWM_Start+0x148>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a37      	ldr	r2, [pc, #220]	; (8003480 <HAL_TIM_PWM_Start+0x1f8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d013      	beq.n	80033d0 <HAL_TIM_PWM_Start+0x148>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a35      	ldr	r2, [pc, #212]	; (8003484 <HAL_TIM_PWM_Start+0x1fc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00e      	beq.n	80033d0 <HAL_TIM_PWM_Start+0x148>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a34      	ldr	r2, [pc, #208]	; (8003488 <HAL_TIM_PWM_Start+0x200>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d009      	beq.n	80033d0 <HAL_TIM_PWM_Start+0x148>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a32      	ldr	r2, [pc, #200]	; (800348c <HAL_TIM_PWM_Start+0x204>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <HAL_TIM_PWM_Start+0x148>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a31      	ldr	r2, [pc, #196]	; (8003490 <HAL_TIM_PWM_Start+0x208>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <HAL_TIM_PWM_Start+0x14c>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <HAL_TIM_PWM_Start+0x14e>
 80033d4:	2300      	movs	r3, #0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a23      	ldr	r2, [pc, #140]	; (800347c <HAL_TIM_PWM_Start+0x1f4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d01d      	beq.n	8003430 <HAL_TIM_PWM_Start+0x1a8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fc:	d018      	beq.n	8003430 <HAL_TIM_PWM_Start+0x1a8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a24      	ldr	r2, [pc, #144]	; (8003494 <HAL_TIM_PWM_Start+0x20c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d013      	beq.n	8003430 <HAL_TIM_PWM_Start+0x1a8>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a22      	ldr	r2, [pc, #136]	; (8003498 <HAL_TIM_PWM_Start+0x210>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00e      	beq.n	8003430 <HAL_TIM_PWM_Start+0x1a8>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <HAL_TIM_PWM_Start+0x1f8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d009      	beq.n	8003430 <HAL_TIM_PWM_Start+0x1a8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a18      	ldr	r2, [pc, #96]	; (8003484 <HAL_TIM_PWM_Start+0x1fc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d004      	beq.n	8003430 <HAL_TIM_PWM_Start+0x1a8>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a19      	ldr	r2, [pc, #100]	; (8003490 <HAL_TIM_PWM_Start+0x208>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d115      	bne.n	800345c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_TIM_PWM_Start+0x214>)
 8003438:	4013      	ands	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b06      	cmp	r3, #6
 8003440:	d015      	beq.n	800346e <HAL_TIM_PWM_Start+0x1e6>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003448:	d011      	beq.n	800346e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0201 	orr.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345a:	e008      	b.n	800346e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e000      	b.n	8003470 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40012c00 	.word	0x40012c00
 8003480:	40013400 	.word	0x40013400
 8003484:	40014000 	.word	0x40014000
 8003488:	40014400 	.word	0x40014400
 800348c:	40014800 	.word	0x40014800
 8003490:	40015000 	.word	0x40015000
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	00010007 	.word	0x00010007

080034a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d122      	bne.n	80034fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d11b      	bne.n	80034fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0202 	mvn.w	r2, #2
 80034cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fae3 	bl	8003aae <HAL_TIM_IC_CaptureCallback>
 80034e8:	e005      	b.n	80034f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fad5 	bl	8003a9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fae6 	bl	8003ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b04      	cmp	r3, #4
 8003508:	d122      	bne.n	8003550 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b04      	cmp	r3, #4
 8003516:	d11b      	bne.n	8003550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0204 	mvn.w	r2, #4
 8003520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2202      	movs	r2, #2
 8003526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fab9 	bl	8003aae <HAL_TIM_IC_CaptureCallback>
 800353c:	e005      	b.n	800354a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 faab 	bl	8003a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fabc 	bl	8003ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b08      	cmp	r3, #8
 800355c:	d122      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b08      	cmp	r3, #8
 800356a:	d11b      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0208 	mvn.w	r2, #8
 8003574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2204      	movs	r2, #4
 800357a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fa8f 	bl	8003aae <HAL_TIM_IC_CaptureCallback>
 8003590:	e005      	b.n	800359e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fa81 	bl	8003a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fa92 	bl	8003ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0310 	and.w	r3, r3, #16
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d122      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d11b      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0210 	mvn.w	r2, #16
 80035c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2208      	movs	r2, #8
 80035ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fa65 	bl	8003aae <HAL_TIM_IC_CaptureCallback>
 80035e4:	e005      	b.n	80035f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fa57 	bl	8003a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fa68 	bl	8003ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b01      	cmp	r3, #1
 8003604:	d10e      	bne.n	8003624 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d107      	bne.n	8003624 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0201 	mvn.w	r2, #1
 800361c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fd f83e 	bl	80006a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362e:	2b80      	cmp	r3, #128	; 0x80
 8003630:	d10e      	bne.n	8003650 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b80      	cmp	r3, #128	; 0x80
 800363e:	d107      	bne.n	8003650 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 ffce 	bl	80045ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800365e:	d10e      	bne.n	800367e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366a:	2b80      	cmp	r3, #128	; 0x80
 800366c:	d107      	bne.n	800367e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 ffc1 	bl	8004600 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003688:	2b40      	cmp	r3, #64	; 0x40
 800368a:	d10e      	bne.n	80036aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003696:	2b40      	cmp	r3, #64	; 0x40
 8003698:	d107      	bne.n	80036aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fa16 	bl	8003ad6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d10e      	bne.n	80036d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	d107      	bne.n	80036d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f06f 0220 	mvn.w	r2, #32
 80036ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 ff81 	bl	80045d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e0ff      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b14      	cmp	r3, #20
 800370a:	f200 80f0 	bhi.w	80038ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800370e:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003714:	08003769 	.word	0x08003769
 8003718:	080038ef 	.word	0x080038ef
 800371c:	080038ef 	.word	0x080038ef
 8003720:	080038ef 	.word	0x080038ef
 8003724:	080037a9 	.word	0x080037a9
 8003728:	080038ef 	.word	0x080038ef
 800372c:	080038ef 	.word	0x080038ef
 8003730:	080038ef 	.word	0x080038ef
 8003734:	080037eb 	.word	0x080037eb
 8003738:	080038ef 	.word	0x080038ef
 800373c:	080038ef 	.word	0x080038ef
 8003740:	080038ef 	.word	0x080038ef
 8003744:	0800382b 	.word	0x0800382b
 8003748:	080038ef 	.word	0x080038ef
 800374c:	080038ef 	.word	0x080038ef
 8003750:	080038ef 	.word	0x080038ef
 8003754:	0800386d 	.word	0x0800386d
 8003758:	080038ef 	.word	0x080038ef
 800375c:	080038ef 	.word	0x080038ef
 8003760:	080038ef 	.word	0x080038ef
 8003764:	080038ad 	.word	0x080038ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fa5a 	bl	8003c28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0208 	orr.w	r2, r2, #8
 8003782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0204 	bic.w	r2, r2, #4
 8003792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6999      	ldr	r1, [r3, #24]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	619a      	str	r2, [r3, #24]
      break;
 80037a6:	e0a5      	b.n	80038f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fad4 	bl	8003d5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6999      	ldr	r1, [r3, #24]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	021a      	lsls	r2, r3, #8
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	619a      	str	r2, [r3, #24]
      break;
 80037e8:	e084      	b.n	80038f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fb47 	bl	8003e84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69da      	ldr	r2, [r3, #28]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0208 	orr.w	r2, r2, #8
 8003804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0204 	bic.w	r2, r2, #4
 8003814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69d9      	ldr	r1, [r3, #28]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	61da      	str	r2, [r3, #28]
      break;
 8003828:	e064      	b.n	80038f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	4618      	mov	r0, r3
 8003832:	f000 fbb9 	bl	8003fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69da      	ldr	r2, [r3, #28]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69d9      	ldr	r1, [r3, #28]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	021a      	lsls	r2, r3, #8
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	61da      	str	r2, [r3, #28]
      break;
 800386a:	e043      	b.n	80038f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fc08 	bl	8004088 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0208 	orr.w	r2, r2, #8
 8003886:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0204 	bic.w	r2, r2, #4
 8003896:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038aa:	e023      	b.n	80038f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fc52 	bl	800415c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	021a      	lsls	r2, r3, #8
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038ec:	e002      	b.n	80038f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	75fb      	strb	r3, [r7, #23]
      break;
 80038f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop

08003908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_TIM_ConfigClockSource+0x1c>
 8003920:	2302      	movs	r3, #2
 8003922:	e0b6      	b.n	8003a92 <HAL_TIM_ConfigClockSource+0x18a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003942:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800394e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003960:	d03e      	beq.n	80039e0 <HAL_TIM_ConfigClockSource+0xd8>
 8003962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003966:	f200 8087 	bhi.w	8003a78 <HAL_TIM_ConfigClockSource+0x170>
 800396a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396e:	f000 8086 	beq.w	8003a7e <HAL_TIM_ConfigClockSource+0x176>
 8003972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003976:	d87f      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x170>
 8003978:	2b70      	cmp	r3, #112	; 0x70
 800397a:	d01a      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0xaa>
 800397c:	2b70      	cmp	r3, #112	; 0x70
 800397e:	d87b      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x170>
 8003980:	2b60      	cmp	r3, #96	; 0x60
 8003982:	d050      	beq.n	8003a26 <HAL_TIM_ConfigClockSource+0x11e>
 8003984:	2b60      	cmp	r3, #96	; 0x60
 8003986:	d877      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x170>
 8003988:	2b50      	cmp	r3, #80	; 0x50
 800398a:	d03c      	beq.n	8003a06 <HAL_TIM_ConfigClockSource+0xfe>
 800398c:	2b50      	cmp	r3, #80	; 0x50
 800398e:	d873      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x170>
 8003990:	2b40      	cmp	r3, #64	; 0x40
 8003992:	d058      	beq.n	8003a46 <HAL_TIM_ConfigClockSource+0x13e>
 8003994:	2b40      	cmp	r3, #64	; 0x40
 8003996:	d86f      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x170>
 8003998:	2b30      	cmp	r3, #48	; 0x30
 800399a:	d064      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x15e>
 800399c:	2b30      	cmp	r3, #48	; 0x30
 800399e:	d86b      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x170>
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d060      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x15e>
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d867      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x170>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d05c      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x15e>
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d05a      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x15e>
 80039b0:	e062      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6899      	ldr	r1, [r3, #8]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f000 fcb1 	bl	8004328 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	609a      	str	r2, [r3, #8]
      break;
 80039de:	e04f      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6899      	ldr	r1, [r3, #8]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f000 fc9a 	bl	8004328 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a02:	609a      	str	r2, [r3, #8]
      break;
 8003a04:	e03c      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	6859      	ldr	r1, [r3, #4]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	461a      	mov	r2, r3
 8003a14:	f000 fc0e 	bl	8004234 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2150      	movs	r1, #80	; 0x50
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fc67 	bl	80042f2 <TIM_ITRx_SetConfig>
      break;
 8003a24:	e02c      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	6859      	ldr	r1, [r3, #4]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	461a      	mov	r2, r3
 8003a34:	f000 fc2d 	bl	8004292 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2160      	movs	r1, #96	; 0x60
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fc57 	bl	80042f2 <TIM_ITRx_SetConfig>
      break;
 8003a44:	e01c      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6859      	ldr	r1, [r3, #4]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	461a      	mov	r2, r3
 8003a54:	f000 fbee 	bl	8004234 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2140      	movs	r1, #64	; 0x40
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fc47 	bl	80042f2 <TIM_ITRx_SetConfig>
      break;
 8003a64:	e00c      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f000 fc3e 	bl	80042f2 <TIM_ITRx_SetConfig>
      break;
 8003a76:	e003      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a7c:	e000      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
	...

08003aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a42      	ldr	r2, [pc, #264]	; (8003c08 <TIM_Base_SetConfig+0x11c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d013      	beq.n	8003b2c <TIM_Base_SetConfig+0x40>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0a:	d00f      	beq.n	8003b2c <TIM_Base_SetConfig+0x40>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a3f      	ldr	r2, [pc, #252]	; (8003c0c <TIM_Base_SetConfig+0x120>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00b      	beq.n	8003b2c <TIM_Base_SetConfig+0x40>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a3e      	ldr	r2, [pc, #248]	; (8003c10 <TIM_Base_SetConfig+0x124>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d007      	beq.n	8003b2c <TIM_Base_SetConfig+0x40>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a3d      	ldr	r2, [pc, #244]	; (8003c14 <TIM_Base_SetConfig+0x128>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d003      	beq.n	8003b2c <TIM_Base_SetConfig+0x40>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a3c      	ldr	r2, [pc, #240]	; (8003c18 <TIM_Base_SetConfig+0x12c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d108      	bne.n	8003b3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a31      	ldr	r2, [pc, #196]	; (8003c08 <TIM_Base_SetConfig+0x11c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01f      	beq.n	8003b86 <TIM_Base_SetConfig+0x9a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b4c:	d01b      	beq.n	8003b86 <TIM_Base_SetConfig+0x9a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a2e      	ldr	r2, [pc, #184]	; (8003c0c <TIM_Base_SetConfig+0x120>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d017      	beq.n	8003b86 <TIM_Base_SetConfig+0x9a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a2d      	ldr	r2, [pc, #180]	; (8003c10 <TIM_Base_SetConfig+0x124>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <TIM_Base_SetConfig+0x9a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a2c      	ldr	r2, [pc, #176]	; (8003c14 <TIM_Base_SetConfig+0x128>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00f      	beq.n	8003b86 <TIM_Base_SetConfig+0x9a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a2c      	ldr	r2, [pc, #176]	; (8003c1c <TIM_Base_SetConfig+0x130>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00b      	beq.n	8003b86 <TIM_Base_SetConfig+0x9a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a2b      	ldr	r2, [pc, #172]	; (8003c20 <TIM_Base_SetConfig+0x134>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d007      	beq.n	8003b86 <TIM_Base_SetConfig+0x9a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a2a      	ldr	r2, [pc, #168]	; (8003c24 <TIM_Base_SetConfig+0x138>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <TIM_Base_SetConfig+0x9a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a25      	ldr	r2, [pc, #148]	; (8003c18 <TIM_Base_SetConfig+0x12c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d108      	bne.n	8003b98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a12      	ldr	r2, [pc, #72]	; (8003c08 <TIM_Base_SetConfig+0x11c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d013      	beq.n	8003bec <TIM_Base_SetConfig+0x100>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a13      	ldr	r2, [pc, #76]	; (8003c14 <TIM_Base_SetConfig+0x128>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00f      	beq.n	8003bec <TIM_Base_SetConfig+0x100>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a13      	ldr	r2, [pc, #76]	; (8003c1c <TIM_Base_SetConfig+0x130>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00b      	beq.n	8003bec <TIM_Base_SetConfig+0x100>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <TIM_Base_SetConfig+0x134>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d007      	beq.n	8003bec <TIM_Base_SetConfig+0x100>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a11      	ldr	r2, [pc, #68]	; (8003c24 <TIM_Base_SetConfig+0x138>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <TIM_Base_SetConfig+0x100>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <TIM_Base_SetConfig+0x12c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d103      	bne.n	8003bf4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	615a      	str	r2, [r3, #20]
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40000800 	.word	0x40000800
 8003c14:	40013400 	.word	0x40013400
 8003c18:	40015000 	.word	0x40015000
 8003c1c:	40014000 	.word	0x40014000
 8003c20:	40014400 	.word	0x40014400
 8003c24:	40014800 	.word	0x40014800

08003c28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	f023 0201 	bic.w	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0303 	bic.w	r3, r3, #3
 8003c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f023 0302 	bic.w	r3, r3, #2
 8003c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a30      	ldr	r2, [pc, #192]	; (8003d44 <TIM_OC1_SetConfig+0x11c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d013      	beq.n	8003cb0 <TIM_OC1_SetConfig+0x88>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a2f      	ldr	r2, [pc, #188]	; (8003d48 <TIM_OC1_SetConfig+0x120>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00f      	beq.n	8003cb0 <TIM_OC1_SetConfig+0x88>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a2e      	ldr	r2, [pc, #184]	; (8003d4c <TIM_OC1_SetConfig+0x124>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00b      	beq.n	8003cb0 <TIM_OC1_SetConfig+0x88>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a2d      	ldr	r2, [pc, #180]	; (8003d50 <TIM_OC1_SetConfig+0x128>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d007      	beq.n	8003cb0 <TIM_OC1_SetConfig+0x88>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a2c      	ldr	r2, [pc, #176]	; (8003d54 <TIM_OC1_SetConfig+0x12c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_OC1_SetConfig+0x88>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a2b      	ldr	r2, [pc, #172]	; (8003d58 <TIM_OC1_SetConfig+0x130>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d10c      	bne.n	8003cca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f023 0308 	bic.w	r3, r3, #8
 8003cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f023 0304 	bic.w	r3, r3, #4
 8003cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <TIM_OC1_SetConfig+0x11c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <TIM_OC1_SetConfig+0xd2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a1c      	ldr	r2, [pc, #112]	; (8003d48 <TIM_OC1_SetConfig+0x120>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00f      	beq.n	8003cfa <TIM_OC1_SetConfig+0xd2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a1b      	ldr	r2, [pc, #108]	; (8003d4c <TIM_OC1_SetConfig+0x124>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00b      	beq.n	8003cfa <TIM_OC1_SetConfig+0xd2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a1a      	ldr	r2, [pc, #104]	; (8003d50 <TIM_OC1_SetConfig+0x128>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d007      	beq.n	8003cfa <TIM_OC1_SetConfig+0xd2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a19      	ldr	r2, [pc, #100]	; (8003d54 <TIM_OC1_SetConfig+0x12c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <TIM_OC1_SetConfig+0xd2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <TIM_OC1_SetConfig+0x130>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d111      	bne.n	8003d1e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	621a      	str	r2, [r3, #32]
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40012c00 	.word	0x40012c00
 8003d48:	40013400 	.word	0x40013400
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40014400 	.word	0x40014400
 8003d54:	40014800 	.word	0x40014800
 8003d58:	40015000 	.word	0x40015000

08003d5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	f023 0210 	bic.w	r2, r3, #16
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f023 0320 	bic.w	r3, r3, #32
 8003daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a2c      	ldr	r2, [pc, #176]	; (8003e6c <TIM_OC2_SetConfig+0x110>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d007      	beq.n	8003dd0 <TIM_OC2_SetConfig+0x74>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a2b      	ldr	r2, [pc, #172]	; (8003e70 <TIM_OC2_SetConfig+0x114>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <TIM_OC2_SetConfig+0x74>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a2a      	ldr	r2, [pc, #168]	; (8003e74 <TIM_OC2_SetConfig+0x118>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10d      	bne.n	8003dec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a1f      	ldr	r2, [pc, #124]	; (8003e6c <TIM_OC2_SetConfig+0x110>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d013      	beq.n	8003e1c <TIM_OC2_SetConfig+0xc0>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a1e      	ldr	r2, [pc, #120]	; (8003e70 <TIM_OC2_SetConfig+0x114>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00f      	beq.n	8003e1c <TIM_OC2_SetConfig+0xc0>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a1e      	ldr	r2, [pc, #120]	; (8003e78 <TIM_OC2_SetConfig+0x11c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00b      	beq.n	8003e1c <TIM_OC2_SetConfig+0xc0>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a1d      	ldr	r2, [pc, #116]	; (8003e7c <TIM_OC2_SetConfig+0x120>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d007      	beq.n	8003e1c <TIM_OC2_SetConfig+0xc0>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <TIM_OC2_SetConfig+0x124>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d003      	beq.n	8003e1c <TIM_OC2_SetConfig+0xc0>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a17      	ldr	r2, [pc, #92]	; (8003e74 <TIM_OC2_SetConfig+0x118>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d113      	bne.n	8003e44 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e22:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e2a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	621a      	str	r2, [r3, #32]
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40013400 	.word	0x40013400
 8003e74:	40015000 	.word	0x40015000
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800

08003e84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0303 	bic.w	r3, r3, #3
 8003ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2b      	ldr	r2, [pc, #172]	; (8003f90 <TIM_OC3_SetConfig+0x10c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d007      	beq.n	8003ef6 <TIM_OC3_SetConfig+0x72>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2a      	ldr	r2, [pc, #168]	; (8003f94 <TIM_OC3_SetConfig+0x110>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <TIM_OC3_SetConfig+0x72>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a29      	ldr	r2, [pc, #164]	; (8003f98 <TIM_OC3_SetConfig+0x114>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d10d      	bne.n	8003f12 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f10:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a1e      	ldr	r2, [pc, #120]	; (8003f90 <TIM_OC3_SetConfig+0x10c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <TIM_OC3_SetConfig+0xbe>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a1d      	ldr	r2, [pc, #116]	; (8003f94 <TIM_OC3_SetConfig+0x110>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <TIM_OC3_SetConfig+0xbe>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a1d      	ldr	r2, [pc, #116]	; (8003f9c <TIM_OC3_SetConfig+0x118>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_OC3_SetConfig+0xbe>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <TIM_OC3_SetConfig+0x11c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_OC3_SetConfig+0xbe>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a1b      	ldr	r2, [pc, #108]	; (8003fa4 <TIM_OC3_SetConfig+0x120>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_OC3_SetConfig+0xbe>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a16      	ldr	r2, [pc, #88]	; (8003f98 <TIM_OC3_SetConfig+0x114>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d113      	bne.n	8003f6a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	621a      	str	r2, [r3, #32]
}
 8003f84:	bf00      	nop
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40013400 	.word	0x40013400
 8003f98:	40015000 	.word	0x40015000
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40014400 	.word	0x40014400
 8003fa4:	40014800 	.word	0x40014800

08003fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	031b      	lsls	r3, r3, #12
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a1a      	ldr	r2, [pc, #104]	; (8004070 <TIM_OC4_SetConfig+0xc8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d013      	beq.n	8004034 <TIM_OC4_SetConfig+0x8c>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a19      	ldr	r2, [pc, #100]	; (8004074 <TIM_OC4_SetConfig+0xcc>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00f      	beq.n	8004034 <TIM_OC4_SetConfig+0x8c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a18      	ldr	r2, [pc, #96]	; (8004078 <TIM_OC4_SetConfig+0xd0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00b      	beq.n	8004034 <TIM_OC4_SetConfig+0x8c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a17      	ldr	r2, [pc, #92]	; (800407c <TIM_OC4_SetConfig+0xd4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d007      	beq.n	8004034 <TIM_OC4_SetConfig+0x8c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a16      	ldr	r2, [pc, #88]	; (8004080 <TIM_OC4_SetConfig+0xd8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d003      	beq.n	8004034 <TIM_OC4_SetConfig+0x8c>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a15      	ldr	r2, [pc, #84]	; (8004084 <TIM_OC4_SetConfig+0xdc>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d109      	bne.n	8004048 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800403a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	019b      	lsls	r3, r3, #6
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40012c00 	.word	0x40012c00
 8004074:	40013400 	.word	0x40013400
 8004078:	40014000 	.word	0x40014000
 800407c:	40014400 	.word	0x40014400
 8004080:	40014800 	.word	0x40014800
 8004084:	40015000 	.word	0x40015000

08004088 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80040cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a19      	ldr	r2, [pc, #100]	; (8004144 <TIM_OC5_SetConfig+0xbc>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d013      	beq.n	800410a <TIM_OC5_SetConfig+0x82>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a18      	ldr	r2, [pc, #96]	; (8004148 <TIM_OC5_SetConfig+0xc0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00f      	beq.n	800410a <TIM_OC5_SetConfig+0x82>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a17      	ldr	r2, [pc, #92]	; (800414c <TIM_OC5_SetConfig+0xc4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00b      	beq.n	800410a <TIM_OC5_SetConfig+0x82>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a16      	ldr	r2, [pc, #88]	; (8004150 <TIM_OC5_SetConfig+0xc8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d007      	beq.n	800410a <TIM_OC5_SetConfig+0x82>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a15      	ldr	r2, [pc, #84]	; (8004154 <TIM_OC5_SetConfig+0xcc>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d003      	beq.n	800410a <TIM_OC5_SetConfig+0x82>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a14      	ldr	r2, [pc, #80]	; (8004158 <TIM_OC5_SetConfig+0xd0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d109      	bne.n	800411e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004110:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	021b      	lsls	r3, r3, #8
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	621a      	str	r2, [r3, #32]
}
 8004138:	bf00      	nop
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40013400 	.word	0x40013400
 800414c:	40014000 	.word	0x40014000
 8004150:	40014400 	.word	0x40014400
 8004154:	40014800 	.word	0x40014800
 8004158:	40015000 	.word	0x40015000

0800415c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800418a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	021b      	lsls	r3, r3, #8
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	051b      	lsls	r3, r3, #20
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a1a      	ldr	r2, [pc, #104]	; (800421c <TIM_OC6_SetConfig+0xc0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d013      	beq.n	80041e0 <TIM_OC6_SetConfig+0x84>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a19      	ldr	r2, [pc, #100]	; (8004220 <TIM_OC6_SetConfig+0xc4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00f      	beq.n	80041e0 <TIM_OC6_SetConfig+0x84>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a18      	ldr	r2, [pc, #96]	; (8004224 <TIM_OC6_SetConfig+0xc8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00b      	beq.n	80041e0 <TIM_OC6_SetConfig+0x84>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a17      	ldr	r2, [pc, #92]	; (8004228 <TIM_OC6_SetConfig+0xcc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d007      	beq.n	80041e0 <TIM_OC6_SetConfig+0x84>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a16      	ldr	r2, [pc, #88]	; (800422c <TIM_OC6_SetConfig+0xd0>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d003      	beq.n	80041e0 <TIM_OC6_SetConfig+0x84>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a15      	ldr	r2, [pc, #84]	; (8004230 <TIM_OC6_SetConfig+0xd4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d109      	bne.n	80041f4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	029b      	lsls	r3, r3, #10
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40013400 	.word	0x40013400
 8004224:	40014000 	.word	0x40014000
 8004228:	40014400 	.word	0x40014400
 800422c:	40014800 	.word	0x40014800
 8004230:	40015000 	.word	0x40015000

08004234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f023 0201 	bic.w	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800425e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f023 030a 	bic.w	r3, r3, #10
 8004270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	621a      	str	r2, [r3, #32]
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004292:	b480      	push	{r7}
 8004294:	b087      	sub	sp, #28
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	f023 0210 	bic.w	r2, r3, #16
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	031b      	lsls	r3, r3, #12
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004308:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	f043 0307 	orr.w	r3, r3, #7
 8004314:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	609a      	str	r2, [r3, #8]
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004342:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	021a      	lsls	r2, r3, #8
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	431a      	orrs	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4313      	orrs	r3, r2
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	609a      	str	r2, [r3, #8]
}
 800435c:	bf00      	nop
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	2201      	movs	r2, #1
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a1a      	ldr	r2, [r3, #32]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	43db      	mvns	r3, r3
 800438a:	401a      	ands	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a1a      	ldr	r2, [r3, #32]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f003 031f 	and.w	r3, r3, #31
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	fa01 f303 	lsl.w	r3, r1, r3
 80043a0:	431a      	orrs	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	621a      	str	r2, [r3, #32]
}
 80043a6:	bf00      	nop
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e06d      	b.n	80044a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a30      	ldr	r2, [pc, #192]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d009      	beq.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a2f      	ldr	r2, [pc, #188]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d004      	beq.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a2d      	ldr	r2, [pc, #180]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d108      	bne.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004410:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a1e      	ldr	r2, [pc, #120]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d01d      	beq.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004448:	d018      	beq.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00e      	beq.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a15      	ldr	r2, [pc, #84]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a11      	ldr	r2, [pc, #68]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d10c      	bne.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004482:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	4313      	orrs	r3, r2
 800448c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	40012c00 	.word	0x40012c00
 80044b8:	40013400 	.word	0x40013400
 80044bc:	40015000 	.word	0x40015000
 80044c0:	40000400 	.word	0x40000400
 80044c4:	40000800 	.word	0x40000800
 80044c8:	40014000 	.word	0x40014000

080044cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e06a      	b.n	80045be <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a19      	ldr	r2, [pc, #100]	; (80045cc <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d009      	beq.n	8004580 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a17      	ldr	r2, [pc, #92]	; (80045d0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a16      	ldr	r2, [pc, #88]	; (80045d4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d115      	bne.n	80045ac <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	051b      	lsls	r3, r3, #20
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40012c00 	.word	0x40012c00
 80045d0:	40013400 	.word	0x40013400
 80045d4:	40015000 	.word	0x40015000

080045d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <__libc_init_array>:
 8004614:	b570      	push	{r4, r5, r6, lr}
 8004616:	4d0d      	ldr	r5, [pc, #52]	; (800464c <__libc_init_array+0x38>)
 8004618:	4c0d      	ldr	r4, [pc, #52]	; (8004650 <__libc_init_array+0x3c>)
 800461a:	1b64      	subs	r4, r4, r5
 800461c:	10a4      	asrs	r4, r4, #2
 800461e:	2600      	movs	r6, #0
 8004620:	42a6      	cmp	r6, r4
 8004622:	d109      	bne.n	8004638 <__libc_init_array+0x24>
 8004624:	4d0b      	ldr	r5, [pc, #44]	; (8004654 <__libc_init_array+0x40>)
 8004626:	4c0c      	ldr	r4, [pc, #48]	; (8004658 <__libc_init_array+0x44>)
 8004628:	f000 f820 	bl	800466c <_init>
 800462c:	1b64      	subs	r4, r4, r5
 800462e:	10a4      	asrs	r4, r4, #2
 8004630:	2600      	movs	r6, #0
 8004632:	42a6      	cmp	r6, r4
 8004634:	d105      	bne.n	8004642 <__libc_init_array+0x2e>
 8004636:	bd70      	pop	{r4, r5, r6, pc}
 8004638:	f855 3b04 	ldr.w	r3, [r5], #4
 800463c:	4798      	blx	r3
 800463e:	3601      	adds	r6, #1
 8004640:	e7ee      	b.n	8004620 <__libc_init_array+0xc>
 8004642:	f855 3b04 	ldr.w	r3, [r5], #4
 8004646:	4798      	blx	r3
 8004648:	3601      	adds	r6, #1
 800464a:	e7f2      	b.n	8004632 <__libc_init_array+0x1e>
 800464c:	080046b4 	.word	0x080046b4
 8004650:	080046b4 	.word	0x080046b4
 8004654:	080046b4 	.word	0x080046b4
 8004658:	080046b8 	.word	0x080046b8

0800465c <memset>:
 800465c:	4402      	add	r2, r0
 800465e:	4603      	mov	r3, r0
 8004660:	4293      	cmp	r3, r2
 8004662:	d100      	bne.n	8004666 <memset+0xa>
 8004664:	4770      	bx	lr
 8004666:	f803 1b01 	strb.w	r1, [r3], #1
 800466a:	e7f9      	b.n	8004660 <memset+0x4>

0800466c <_init>:
 800466c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466e:	bf00      	nop
 8004670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004672:	bc08      	pop	{r3}
 8004674:	469e      	mov	lr, r3
 8004676:	4770      	bx	lr

08004678 <_fini>:
 8004678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467a:	bf00      	nop
 800467c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800467e:	bc08      	pop	{r3}
 8004680:	469e      	mov	lr, r3
 8004682:	4770      	bx	lr
