
BLDC_6_Step_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004744  08004744  00014744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800477c  0800477c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800477c  0800477c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800477c  0800477c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800477c  0800477c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004780  08004780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000284  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000290  20000290  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d1d6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e35  00000000  00000000  0002d212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad0  00000000  00000000  0002f048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009e8  00000000  00000000  0002fb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200bf  00000000  00000000  00030500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbab  00000000  00000000  000505bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7a11  00000000  00000000  0005e16a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00125b7b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bfc  00000000  00000000  00125bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800472c 	.word	0x0800472c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800472c 	.word	0x0800472c

080001d4 <PeripheralsStart>:
#include "TimeTask.h"

const uint8_t Trigger_Control_State[6] = {State_A_B,State_A_C,State_B_C,State_B_A,State_C_A,State_C_B};

void PeripheralsStart()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	  Motor_Control.Duty_Cycle = 30;
 80001d8:	4b28      	ldr	r3, [pc, #160]	; (800027c <PeripheralsStart+0xa8>)
 80001da:	221e      	movs	r2, #30
 80001dc:	705a      	strb	r2, [r3, #1]
	  Motor_Control.Pulse_Center = 0;
 80001de:	4b27      	ldr	r3, [pc, #156]	; (800027c <PeripheralsStart+0xa8>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	619a      	str	r2, [r3, #24]

	  Motor_Control.A_Out = 0;
 80001e4:	4b25      	ldr	r3, [pc, #148]	; (800027c <PeripheralsStart+0xa8>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	605a      	str	r2, [r3, #4]
	  Motor_Control.B_Out = 0;
 80001ea:	4b24      	ldr	r3, [pc, #144]	; (800027c <PeripheralsStart+0xa8>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	609a      	str	r2, [r3, #8]
	  Motor_Control.C_Out = 0;
 80001f0:	4b22      	ldr	r3, [pc, #136]	; (800027c <PeripheralsStart+0xa8>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	60da      	str	r2, [r3, #12]

	  Motor_Control.Rotor_Position = 0;
 80001f6:	4b21      	ldr	r3, [pc, #132]	; (800027c <PeripheralsStart+0xa8>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	709a      	strb	r2, [r3, #2]

	  Motor_Control.Signal = 0;
 80001fc:	4b1f      	ldr	r3, [pc, #124]	; (800027c <PeripheralsStart+0xa8>)
 80001fe:	2200      	movs	r2, #0
 8000200:	611a      	str	r2, [r3, #16]
	  Motor_Control.Max_Signal = 0;
 8000202:	4b1e      	ldr	r3, [pc, #120]	; (800027c <PeripheralsStart+0xa8>)
 8000204:	2200      	movs	r2, #0
 8000206:	615a      	str	r2, [r3, #20]

	  Start_Up.Duty_Cycle = 50;
 8000208:	4b1d      	ldr	r3, [pc, #116]	; (8000280 <PeripheralsStart+0xac>)
 800020a:	2232      	movs	r2, #50	; 0x32
 800020c:	701a      	strb	r2, [r3, #0]
	  Start_Up.Delay_Seconds = 0.00005f; // 50 mikro saniye (20k task'ta yapılabilecek minimum süre)
 800020e:	4b1c      	ldr	r3, [pc, #112]	; (8000280 <PeripheralsStart+0xac>)
 8000210:	4a1c      	ldr	r2, [pc, #112]	; (8000284 <PeripheralsStart+0xb0>)
 8000212:	605a      	str	r2, [r3, #4]
	  Start_Up.Tour = 3;
 8000214:	4b1a      	ldr	r3, [pc, #104]	; (8000280 <PeripheralsStart+0xac>)
 8000216:	2203      	movs	r2, #3
 8000218:	805a      	strh	r2, [r3, #2]

	  Start_Up.Align_Coefficient = 2;
 800021a:	4b19      	ldr	r3, [pc, #100]	; (8000280 <PeripheralsStart+0xac>)
 800021c:	2202      	movs	r2, #2
 800021e:	819a      	strh	r2, [r3, #12]
	  Start_Up.Align_DutyCycle = 50;
 8000220:	4b17      	ldr	r3, [pc, #92]	; (8000280 <PeripheralsStart+0xac>)
 8000222:	2232      	movs	r2, #50	; 0x32
 8000224:	81da      	strh	r2, [r3, #14]

	  Motor_Control.Drive_Stage = START_UP;
 8000226:	4b15      	ldr	r3, [pc, #84]	; (800027c <PeripheralsStart+0xa8>)
 8000228:	2200      	movs	r2, #0
 800022a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// Phase A High
 800022e:	2100      	movs	r1, #0
 8000230:	4815      	ldr	r0, [pc, #84]	; (8000288 <PeripheralsStart+0xb4>)
 8000232:	f003 f889 	bl	8003348 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	// Phase B High
 8000236:	2104      	movs	r1, #4
 8000238:	4813      	ldr	r0, [pc, #76]	; (8000288 <PeripheralsStart+0xb4>)
 800023a:	f003 f885 	bl	8003348 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	// Phase C High
 800023e:	2108      	movs	r1, #8
 8000240:	4811      	ldr	r0, [pc, #68]	; (8000288 <PeripheralsStart+0xb4>)
 8000242:	f003 f881 	bl	8003348 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	// Phase A Low
 8000246:	2100      	movs	r1, #0
 8000248:	4810      	ldr	r0, [pc, #64]	; (800028c <PeripheralsStart+0xb8>)
 800024a:	f003 f87d 	bl	8003348 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);	// Phase B Low
 800024e:	2104      	movs	r1, #4
 8000250:	480e      	ldr	r0, [pc, #56]	; (800028c <PeripheralsStart+0xb8>)
 8000252:	f003 f879 	bl	8003348 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);	// Phase C Low
 8000256:	2108      	movs	r1, #8
 8000258:	480c      	ldr	r0, [pc, #48]	; (800028c <PeripheralsStart+0xb8>)
 800025a:	f003 f875 	bl	8003348 <HAL_TIM_PWM_Start>

	  HAL_COMP_Start(&hcomp1);
 800025e:	480c      	ldr	r0, [pc, #48]	; (8000290 <PeripheralsStart+0xbc>)
 8000260:	f001 f874 	bl	800134c <HAL_COMP_Start>
	  HAL_COMP_Start(&hcomp3);
 8000264:	480b      	ldr	r0, [pc, #44]	; (8000294 <PeripheralsStart+0xc0>)
 8000266:	f001 f871 	bl	800134c <HAL_COMP_Start>
	  HAL_COMP_Start(&hcomp5);
 800026a:	480b      	ldr	r0, [pc, #44]	; (8000298 <PeripheralsStart+0xc4>)
 800026c:	f001 f86e 	bl	800134c <HAL_COMP_Start>

	  HAL_TIM_Base_Start_IT(&htim4);
 8000270:	480a      	ldr	r0, [pc, #40]	; (800029c <PeripheralsStart+0xc8>)
 8000272:	f002 ffa1 	bl	80031b8 <HAL_TIM_Base_Start_IT>
}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	20000268 	.word	0x20000268
 8000280:	200001a8 	.word	0x200001a8
 8000284:	3851b717 	.word	0x3851b717
 8000288:	2000015c 	.word	0x2000015c
 800028c:	2000010c 	.word	0x2000010c
 8000290:	200000dc 	.word	0x200000dc
 8000294:	200001b8 	.word	0x200001b8
 8000298:	20000238 	.word	0x20000238
 800029c:	20000090 	.word	0x20000090

080002a0 <Stop_Motor>:

void Stop_Motor()
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	Set_Motor_State(Trigger_Control_State[0],0);
 80002a4:	2305      	movs	r3, #5
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f953 	bl	8000554 <Set_Motor_State>
	Set_Motor_State(Trigger_Control_State[1],0);
 80002ae:	2301      	movs	r3, #1
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 f94e 	bl	8000554 <Set_Motor_State>
	Set_Motor_State(Trigger_Control_State[2],0);
 80002b8:	2303      	movs	r3, #3
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f949 	bl	8000554 <Set_Motor_State>
	Set_Motor_State(Trigger_Control_State[3],0);
 80002c2:	2302      	movs	r3, #2
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f944 	bl	8000554 <Set_Motor_State>
	Set_Motor_State(Trigger_Control_State[4],0);
 80002cc:	2306      	movs	r3, #6
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f93f 	bl	8000554 <Set_Motor_State>
	Set_Motor_State(Trigger_Control_State[5],0);
 80002d6:	2304      	movs	r3, #4
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 f93a 	bl	8000554 <Set_Motor_State>

	Motor_Control.Drive_Stage = START_UP;
 80002e0:	4b02      	ldr	r3, [pc, #8]	; (80002ec <Stop_Motor+0x4c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20000268 	.word	0x20000268

080002f0 <Start_Up_Motor>:

void Start_Up_Motor()
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	static int Tour_Counter = 0;

	if(Motor_Control.Control_Counter++ >= MOTOR_CONTROL_TASK_HZ*Start_Up.Delay_Seconds)
 80002f4:	4b2b      	ldr	r3, [pc, #172]	; (80003a4 <Start_Up_Motor+0xb4>)
 80002f6:	69da      	ldr	r2, [r3, #28]
 80002f8:	1c53      	adds	r3, r2, #1
 80002fa:	492a      	ldr	r1, [pc, #168]	; (80003a4 <Start_Up_Motor+0xb4>)
 80002fc:	61cb      	str	r3, [r1, #28]
 80002fe:	ee07 2a90 	vmov	s15, r2
 8000302:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000306:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <Start_Up_Motor+0xb8>)
 8000308:	edd3 7a01 	vldr	s15, [r3, #4]
 800030c:	eddf 6a27 	vldr	s13, [pc, #156]	; 80003ac <Start_Up_Motor+0xbc>
 8000310:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800031c:	da00      	bge.n	8000320 <Start_Up_Motor+0x30>
		else
		{
			Motor_Control.Motor_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
		}
	}
}
 800031e:	e03e      	b.n	800039e <Start_Up_Motor+0xae>
		Motor_Control.Control_Counter = 0;
 8000320:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <Start_Up_Motor+0xb4>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
		Set_Motor_State(Trigger_Control_State[Motor_Control.Motor_State_Index], Start_Up.Duty_Cycle);
 8000326:	4b1f      	ldr	r3, [pc, #124]	; (80003a4 <Start_Up_Motor+0xb4>)
 8000328:	f893 3020 	ldrb.w	r3, [r3, #32]
 800032c:	461a      	mov	r2, r3
 800032e:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <Start_Up_Motor+0xc0>)
 8000330:	5c9b      	ldrb	r3, [r3, r2]
 8000332:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <Start_Up_Motor+0xb8>)
 8000334:	7812      	ldrb	r2, [r2, #0]
 8000336:	b292      	uxth	r2, r2
 8000338:	4611      	mov	r1, r2
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f90a 	bl	8000554 <Set_Motor_State>
		if( (Trigger_Control_State[Motor_Control.Motor_State_Index] == State_C_B) && Tour_Counter++ >= Start_Up.Tour)	// BU DA
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <Start_Up_Motor+0xb4>)
 8000342:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000346:	461a      	mov	r2, r3
 8000348:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <Start_Up_Motor+0xc0>)
 800034a:	5c9b      	ldrb	r3, [r3, r2]
 800034c:	2b04      	cmp	r3, #4
 800034e:	d114      	bne.n	800037a <Start_Up_Motor+0x8a>
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <Start_Up_Motor+0xc4>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	1c5a      	adds	r2, r3, #1
 8000356:	4917      	ldr	r1, [pc, #92]	; (80003b4 <Start_Up_Motor+0xc4>)
 8000358:	600a      	str	r2, [r1, #0]
 800035a:	4a13      	ldr	r2, [pc, #76]	; (80003a8 <Start_Up_Motor+0xb8>)
 800035c:	8852      	ldrh	r2, [r2, #2]
 800035e:	4293      	cmp	r3, r2
 8000360:	db0b      	blt.n	800037a <Start_Up_Motor+0x8a>
			Motor_Control.Drive_Stage = ALIGN;
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <Start_Up_Motor+0xb4>)
 8000364:	2201      	movs	r2, #1
 8000366:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			Tour_Counter = 0;
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <Start_Up_Motor+0xc4>)
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
			Motor_Control.Motor_State_Index = 0;
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <Start_Up_Motor+0xb4>)
 8000372:	2200      	movs	r2, #0
 8000374:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000378:	e011      	b.n	800039e <Start_Up_Motor+0xae>
			Motor_Control.Motor_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <Start_Up_Motor+0xb4>)
 800037c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000380:	1c5a      	adds	r2, r3, #1
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <Start_Up_Motor+0xc8>)
 8000384:	fb83 3102 	smull	r3, r1, r3, r2
 8000388:	17d3      	asrs	r3, r2, #31
 800038a:	1ac9      	subs	r1, r1, r3
 800038c:	460b      	mov	r3, r1
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	440b      	add	r3, r1
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	1ad1      	subs	r1, r2, r3
 8000396:	b2ca      	uxtb	r2, r1
 8000398:	4b02      	ldr	r3, [pc, #8]	; (80003a4 <Start_Up_Motor+0xb4>)
 800039a:	f883 2020 	strb.w	r2, [r3, #32]
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000268 	.word	0x20000268
 80003a8:	200001a8 	.word	0x200001a8
 80003ac:	469c4000 	.word	0x469c4000
 80003b0:	08004744 	.word	0x08004744
 80003b4:	20000028 	.word	0x20000028
 80003b8:	2aaaaaab 	.word	0x2aaaaaab

080003bc <Align_Motor>:

void Align_Motor()
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	static int Tour_Counter = 0;

	if(Motor_Control.Control_Counter++ >= MOTOR_CONTROL_TASK_HZ*Start_Up.Delay_Seconds)
 80003c0:	4b2b      	ldr	r3, [pc, #172]	; (8000470 <Align_Motor+0xb4>)
 80003c2:	69da      	ldr	r2, [r3, #28]
 80003c4:	1c53      	adds	r3, r2, #1
 80003c6:	492a      	ldr	r1, [pc, #168]	; (8000470 <Align_Motor+0xb4>)
 80003c8:	61cb      	str	r3, [r1, #28]
 80003ca:	ee07 2a90 	vmov	s15, r2
 80003ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80003d2:	4b28      	ldr	r3, [pc, #160]	; (8000474 <Align_Motor+0xb8>)
 80003d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80003d8:	eddf 6a27 	vldr	s13, [pc, #156]	; 8000478 <Align_Motor+0xbc>
 80003dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80003e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80003e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003e8:	da00      	bge.n	80003ec <Align_Motor+0x30>
		else
		{
			Motor_Control.Motor_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
		}
	}
}
 80003ea:	e03e      	b.n	800046a <Align_Motor+0xae>
		Motor_Control.Control_Counter = 0;
 80003ec:	4b20      	ldr	r3, [pc, #128]	; (8000470 <Align_Motor+0xb4>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
		Set_Motor_State(Trigger_Control_State[Motor_Control.Motor_State_Index], Start_Up.Align_DutyCycle);
 80003f2:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <Align_Motor+0xb4>)
 80003f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80003f8:	461a      	mov	r2, r3
 80003fa:	4b20      	ldr	r3, [pc, #128]	; (800047c <Align_Motor+0xc0>)
 80003fc:	5c9b      	ldrb	r3, [r3, r2]
 80003fe:	4a1d      	ldr	r2, [pc, #116]	; (8000474 <Align_Motor+0xb8>)
 8000400:	89d2      	ldrh	r2, [r2, #14]
 8000402:	4611      	mov	r1, r2
 8000404:	4618      	mov	r0, r3
 8000406:	f000 f8a5 	bl	8000554 <Set_Motor_State>
		if( (Trigger_Control_State[Motor_Control.Motor_State_Index] == State_C_B) && Tour_Counter++ >= Start_Up.Tour*Start_Up.Align_Coefficient)
 800040a:	4b19      	ldr	r3, [pc, #100]	; (8000470 <Align_Motor+0xb4>)
 800040c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000410:	461a      	mov	r2, r3
 8000412:	4b1a      	ldr	r3, [pc, #104]	; (800047c <Align_Motor+0xc0>)
 8000414:	5c9b      	ldrb	r3, [r3, r2]
 8000416:	2b04      	cmp	r3, #4
 8000418:	d115      	bne.n	8000446 <Align_Motor+0x8a>
 800041a:	4b19      	ldr	r3, [pc, #100]	; (8000480 <Align_Motor+0xc4>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	1c5a      	adds	r2, r3, #1
 8000420:	4917      	ldr	r1, [pc, #92]	; (8000480 <Align_Motor+0xc4>)
 8000422:	600a      	str	r2, [r1, #0]
 8000424:	4a13      	ldr	r2, [pc, #76]	; (8000474 <Align_Motor+0xb8>)
 8000426:	8852      	ldrh	r2, [r2, #2]
 8000428:	4611      	mov	r1, r2
 800042a:	4a12      	ldr	r2, [pc, #72]	; (8000474 <Align_Motor+0xb8>)
 800042c:	8992      	ldrh	r2, [r2, #12]
 800042e:	fb02 f201 	mul.w	r2, r2, r1
 8000432:	4293      	cmp	r3, r2
 8000434:	db07      	blt.n	8000446 <Align_Motor+0x8a>
			Motor_Control.Drive_Stage = RUN;
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <Align_Motor+0xb4>)
 8000438:	2202      	movs	r2, #2
 800043a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			Tour_Counter = 0;
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <Align_Motor+0xc4>)
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
}
 8000444:	e011      	b.n	800046a <Align_Motor+0xae>
			Motor_Control.Motor_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <Align_Motor+0xb4>)
 8000448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800044c:	1c5a      	adds	r2, r3, #1
 800044e:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <Align_Motor+0xc8>)
 8000450:	fb83 3102 	smull	r3, r1, r3, r2
 8000454:	17d3      	asrs	r3, r2, #31
 8000456:	1ac9      	subs	r1, r1, r3
 8000458:	460b      	mov	r3, r1
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	440b      	add	r3, r1
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	1ad1      	subs	r1, r2, r3
 8000462:	b2ca      	uxtb	r2, r1
 8000464:	4b02      	ldr	r3, [pc, #8]	; (8000470 <Align_Motor+0xb4>)
 8000466:	f883 2020 	strb.w	r2, [r3, #32]
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000268 	.word	0x20000268
 8000474:	200001a8 	.word	0x200001a8
 8000478:	469c4000 	.word	0x469c4000
 800047c:	08004744 	.word	0x08004744
 8000480:	2000002c 	.word	0x2000002c
 8000484:	2aaaaaab 	.word	0x2aaaaaab

08000488 <Run_Motor>:

void Run_Motor()
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	  static uint8_t Next_State_Index = 0;

	  Motor_Control.A_Out = HAL_COMP_GetOutputLevel(&hcomp1) >> 30;
 800048c:	482a      	ldr	r0, [pc, #168]	; (8000538 <Run_Motor+0xb0>)
 800048e:	f001 f84d 	bl	800152c <HAL_COMP_GetOutputLevel>
 8000492:	4603      	mov	r3, r0
 8000494:	0f9b      	lsrs	r3, r3, #30
 8000496:	4a29      	ldr	r2, [pc, #164]	; (800053c <Run_Motor+0xb4>)
 8000498:	6053      	str	r3, [r2, #4]
	  Motor_Control.B_Out = HAL_COMP_GetOutputLevel(&hcomp3) >> 30;
 800049a:	4829      	ldr	r0, [pc, #164]	; (8000540 <Run_Motor+0xb8>)
 800049c:	f001 f846 	bl	800152c <HAL_COMP_GetOutputLevel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	0f9b      	lsrs	r3, r3, #30
 80004a4:	4a25      	ldr	r2, [pc, #148]	; (800053c <Run_Motor+0xb4>)
 80004a6:	6093      	str	r3, [r2, #8]
	  Motor_Control.C_Out = HAL_COMP_GetOutputLevel(&hcomp5) >> 30;
 80004a8:	4826      	ldr	r0, [pc, #152]	; (8000544 <Run_Motor+0xbc>)
 80004aa:	f001 f83f 	bl	800152c <HAL_COMP_GetOutputLevel>
 80004ae:	4603      	mov	r3, r0
 80004b0:	0f9b      	lsrs	r3, r3, #30
 80004b2:	4a22      	ldr	r2, [pc, #136]	; (800053c <Run_Motor+0xb4>)
 80004b4:	60d3      	str	r3, [r2, #12]

	  Motor_Control.Rotor_Position = (Motor_Control.C_Out << 2) + (Motor_Control.B_Out << 1) + (Motor_Control.A_Out);
 80004b6:	4b21      	ldr	r3, [pc, #132]	; (800053c <Run_Motor+0xb4>)
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	4b1e      	ldr	r3, [pc, #120]	; (800053c <Run_Motor+0xb4>)
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	4413      	add	r3, r2
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4b1b      	ldr	r3, [pc, #108]	; (800053c <Run_Motor+0xb4>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	4413      	add	r3, r2
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <Run_Motor+0xb4>)
 80004da:	709a      	strb	r2, [r3, #2]

	  Next_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
 80004dc:	4b17      	ldr	r3, [pc, #92]	; (800053c <Run_Motor+0xb4>)
 80004de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004e2:	1c5a      	adds	r2, r3, #1
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <Run_Motor+0xc0>)
 80004e6:	fb83 3102 	smull	r3, r1, r3, r2
 80004ea:	17d3      	asrs	r3, r2, #31
 80004ec:	1ac9      	subs	r1, r1, r3
 80004ee:	460b      	mov	r3, r1
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	440b      	add	r3, r1
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	1ad1      	subs	r1, r2, r3
 80004f8:	b2ca      	uxtb	r2, r1
 80004fa:	4b14      	ldr	r3, [pc, #80]	; (800054c <Run_Motor+0xc4>)
 80004fc:	701a      	strb	r2, [r3, #0]

	  if(Motor_Control.Rotor_Position == Trigger_Control_State[Next_State_Index])
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <Run_Motor+0xb4>)
 8000500:	789a      	ldrb	r2, [r3, #2]
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <Run_Motor+0xc4>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	4619      	mov	r1, r3
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <Run_Motor+0xc8>)
 800050a:	5c5b      	ldrb	r3, [r3, r1]
 800050c:	429a      	cmp	r2, r3
 800050e:	d111      	bne.n	8000534 <Run_Motor+0xac>
	  {
		  Motor_Control.Motor_State_Index = Next_State_Index;
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <Run_Motor+0xc4>)
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <Run_Motor+0xb4>)
 8000516:	f883 2020 	strb.w	r2, [r3, #32]

		  Set_Motor_State(Trigger_Control_State[Motor_Control.Motor_State_Index], Motor_Control.Duty_Cycle);
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <Run_Motor+0xb4>)
 800051c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000520:	461a      	mov	r2, r3
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <Run_Motor+0xc8>)
 8000524:	5c9b      	ldrb	r3, [r3, r2]
 8000526:	4a05      	ldr	r2, [pc, #20]	; (800053c <Run_Motor+0xb4>)
 8000528:	7852      	ldrb	r2, [r2, #1]
 800052a:	b292      	uxth	r2, r2
 800052c:	4611      	mov	r1, r2
 800052e:	4618      	mov	r0, r3
 8000530:	f000 f810 	bl	8000554 <Set_Motor_State>
	  }
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200000dc 	.word	0x200000dc
 800053c:	20000268 	.word	0x20000268
 8000540:	200001b8 	.word	0x200001b8
 8000544:	20000238 	.word	0x20000238
 8000548:	2aaaaaab 	.word	0x2aaaaaab
 800054c:	20000030 	.word	0x20000030
 8000550:	08004744 	.word	0x08004744

08000554 <Set_Motor_State>:

void Set_Motor_State(uint8_t State, uint16_t DutyCycle)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	460a      	mov	r2, r1
 800055e:	71fb      	strb	r3, [r7, #7]
 8000560:	4613      	mov	r3, r2
 8000562:	80bb      	strh	r3, [r7, #4]
	Motor_Control.Signal = (htim1.Init.Period+1)*DutyCycle/100;	// CCR
 8000564:	4b70      	ldr	r3, [pc, #448]	; (8000728 <Set_Motor_State+0x1d4>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	3301      	adds	r3, #1
 800056a:	88ba      	ldrh	r2, [r7, #4]
 800056c:	fb02 f303 	mul.w	r3, r2, r3
 8000570:	4a6e      	ldr	r2, [pc, #440]	; (800072c <Set_Motor_State+0x1d8>)
 8000572:	fba2 2303 	umull	r2, r3, r2, r3
 8000576:	095b      	lsrs	r3, r3, #5
 8000578:	4a6d      	ldr	r2, [pc, #436]	; (8000730 <Set_Motor_State+0x1dc>)
 800057a:	6113      	str	r3, [r2, #16]
	Motor_Control.Max_Signal = htim1.Init.Period+1;				// ARR
 800057c:	4b6a      	ldr	r3, [pc, #424]	; (8000728 <Set_Motor_State+0x1d4>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	3301      	adds	r3, #1
 8000582:	4a6b      	ldr	r2, [pc, #428]	; (8000730 <Set_Motor_State+0x1dc>)
 8000584:	6153      	str	r3, [r2, #20]

	switch(State)
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	3b01      	subs	r3, #1
 800058a:	2b05      	cmp	r3, #5
 800058c:	f200 80c4 	bhi.w	8000718 <Set_Motor_State+0x1c4>
 8000590:	a201      	add	r2, pc, #4	; (adr r2, 8000598 <Set_Motor_State+0x44>)
 8000592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000596:	bf00      	nop
 8000598:	080005f3 	.word	0x080005f3
 800059c:	0800066b 	.word	0x0800066b
 80005a0:	08000629 	.word	0x08000629
 80005a4:	080006e3 	.word	0x080006e3
 80005a8:	080005b1 	.word	0x080005b1
 80005ac:	080006a1 	.word	0x080006a1
	{

		case State_A_B:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,Motor_Control.Signal);		// A HIGH ACTIVE
 80005b0:	4b5d      	ldr	r3, [pc, #372]	; (8000728 <Set_Motor_State+0x1d4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a5e      	ldr	r2, [pc, #376]	; (8000730 <Set_Motor_State+0x1dc>)
 80005b6:	6912      	ldr	r2, [r2, #16]
 80005b8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,Motor_Control.Max_Signal);	// B LOW AVTIVE
 80005ba:	4b5e      	ldr	r3, [pc, #376]	; (8000734 <Set_Motor_State+0x1e0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a5c      	ldr	r2, [pc, #368]	; (8000730 <Set_Motor_State+0x1dc>)
 80005c0:	6952      	ldr	r2, [r2, #20]
 80005c2:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
 80005c4:	4b5b      	ldr	r3, [pc, #364]	; (8000734 <Set_Motor_State+0x1e0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2200      	movs	r2, #0
 80005ca:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,0);
 80005cc:	4b59      	ldr	r3, [pc, #356]	; (8000734 <Set_Motor_State+0x1e0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2200      	movs	r2, #0
 80005d2:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80005d4:	4b54      	ldr	r3, [pc, #336]	; (8000728 <Set_Motor_State+0x1d4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2200      	movs	r2, #0
 80005da:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80005dc:	4b52      	ldr	r3, [pc, #328]	; (8000728 <Set_Motor_State+0x1d4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2200      	movs	r2, #0
 80005e2:	63da      	str	r2, [r3, #60]	; 0x3c

			Motor_Control.Pulse_Center = htim1.Instance->CCR1 / 2;	//DutyCycle bu State'de iken değişirse kontrol güncellenir
 80005e4:	4b50      	ldr	r3, [pc, #320]	; (8000728 <Set_Motor_State+0x1d4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ea:	085b      	lsrs	r3, r3, #1
 80005ec:	4a50      	ldr	r2, [pc, #320]	; (8000730 <Set_Motor_State+0x1dc>)
 80005ee:	6193      	str	r3, [r2, #24]

			break;
 80005f0:	e093      	b.n	800071a <Set_Motor_State+0x1c6>

		case State_A_C:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,Motor_Control.Signal);		// A HIGH ACTIVE
 80005f2:	4b4d      	ldr	r3, [pc, #308]	; (8000728 <Set_Motor_State+0x1d4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a4e      	ldr	r2, [pc, #312]	; (8000730 <Set_Motor_State+0x1dc>)
 80005f8:	6912      	ldr	r2, [r2, #16]
 80005fa:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,Motor_Control.Max_Signal);	// C LOW ACTIVE
 80005fc:	4b4d      	ldr	r3, [pc, #308]	; (8000734 <Set_Motor_State+0x1e0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a4b      	ldr	r2, [pc, #300]	; (8000730 <Set_Motor_State+0x1dc>)
 8000602:	6952      	ldr	r2, [r2, #20]
 8000604:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
 8000606:	4b4b      	ldr	r3, [pc, #300]	; (8000734 <Set_Motor_State+0x1e0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2200      	movs	r2, #0
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
 800060e:	4b49      	ldr	r3, [pc, #292]	; (8000734 <Set_Motor_State+0x1e0>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000616:	4b44      	ldr	r3, [pc, #272]	; (8000728 <Set_Motor_State+0x1d4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 800061e:	4b42      	ldr	r3, [pc, #264]	; (8000728 <Set_Motor_State+0x1d4>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2200      	movs	r2, #0
 8000624:	63da      	str	r2, [r3, #60]	; 0x3c

			break;
 8000626:	e078      	b.n	800071a <Set_Motor_State+0x1c6>

		case State_B_C:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Motor_Control.Signal);		// B HIGH ACTIVE
 8000628:	4b3f      	ldr	r3, [pc, #252]	; (8000728 <Set_Motor_State+0x1d4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a40      	ldr	r2, [pc, #256]	; (8000730 <Set_Motor_State+0x1dc>)
 800062e:	6912      	ldr	r2, [r2, #16]
 8000630:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,Motor_Control.Max_Signal);	// C LOW ACTIVE
 8000632:	4b40      	ldr	r3, [pc, #256]	; (8000734 <Set_Motor_State+0x1e0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a3e      	ldr	r2, [pc, #248]	; (8000730 <Set_Motor_State+0x1dc>)
 8000638:	6952      	ldr	r2, [r2, #20]
 800063a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
 800063c:	4b3d      	ldr	r3, [pc, #244]	; (8000734 <Set_Motor_State+0x1e0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2200      	movs	r2, #0
 8000642:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
 8000644:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <Set_Motor_State+0x1e0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2200      	movs	r2, #0
 800064a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 800064c:	4b36      	ldr	r3, [pc, #216]	; (8000728 <Set_Motor_State+0x1d4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2200      	movs	r2, #0
 8000652:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000654:	4b34      	ldr	r3, [pc, #208]	; (8000728 <Set_Motor_State+0x1d4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2200      	movs	r2, #0
 800065a:	63da      	str	r2, [r3, #60]	; 0x3c

			Motor_Control.Pulse_Center = htim1.Instance->CCR2 / 2;	//DutyCycle bu State'de iken değişirse kontrol güncellenir
 800065c:	4b32      	ldr	r3, [pc, #200]	; (8000728 <Set_Motor_State+0x1d4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000662:	085b      	lsrs	r3, r3, #1
 8000664:	4a32      	ldr	r2, [pc, #200]	; (8000730 <Set_Motor_State+0x1dc>)
 8000666:	6193      	str	r3, [r2, #24]

			break;
 8000668:	e057      	b.n	800071a <Set_Motor_State+0x1c6>

		case State_B_A:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Motor_Control.Signal);	// B HIGH ACTIVE
 800066a:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <Set_Motor_State+0x1d4>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a30      	ldr	r2, [pc, #192]	; (8000730 <Set_Motor_State+0x1dc>)
 8000670:	6912      	ldr	r2, [r2, #16]
 8000672:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,Motor_Control.Max_Signal);	// A LOW ACTIVE
 8000674:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <Set_Motor_State+0x1e0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a2d      	ldr	r2, [pc, #180]	; (8000730 <Set_Motor_State+0x1dc>)
 800067a:	6952      	ldr	r2, [r2, #20]
 800067c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <Set_Motor_State+0x1e0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2200      	movs	r2, #0
 8000684:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,0);
 8000686:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <Set_Motor_State+0x1e0>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2200      	movs	r2, #0
 800068c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <Set_Motor_State+0x1d4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2200      	movs	r2, #0
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000696:	4b24      	ldr	r3, [pc, #144]	; (8000728 <Set_Motor_State+0x1d4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2200      	movs	r2, #0
 800069c:	63da      	str	r2, [r3, #60]	; 0x3c

			break;
 800069e:	e03c      	b.n	800071a <Set_Motor_State+0x1c6>

		case State_C_A:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,Motor_Control.Signal);	// C HIGH ACTIVE
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <Set_Motor_State+0x1d4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a22      	ldr	r2, [pc, #136]	; (8000730 <Set_Motor_State+0x1dc>)
 80006a6:	6912      	ldr	r2, [r2, #16]
 80006a8:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,Motor_Control.Max_Signal);	// A LOW ACTIVE
 80006aa:	4b22      	ldr	r3, [pc, #136]	; (8000734 <Set_Motor_State+0x1e0>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a20      	ldr	r2, [pc, #128]	; (8000730 <Set_Motor_State+0x1dc>)
 80006b0:	6952      	ldr	r2, [r2, #20]
 80006b2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <Set_Motor_State+0x1e0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2200      	movs	r2, #0
 80006ba:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,0);
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <Set_Motor_State+0x1e0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2200      	movs	r2, #0
 80006c2:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <Set_Motor_State+0x1d4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2200      	movs	r2, #0
 80006ca:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <Set_Motor_State+0x1d4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2200      	movs	r2, #0
 80006d2:	639a      	str	r2, [r3, #56]	; 0x38

			Motor_Control.Pulse_Center = htim1.Instance->CCR3 / 2;	//DutyCycle bu State'de iken değişirse kontrol güncellenir
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <Set_Motor_State+0x1d4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006da:	085b      	lsrs	r3, r3, #1
 80006dc:	4a14      	ldr	r2, [pc, #80]	; (8000730 <Set_Motor_State+0x1dc>)
 80006de:	6193      	str	r3, [r2, #24]

			break;
 80006e0:	e01b      	b.n	800071a <Set_Motor_State+0x1c6>

		case State_C_B:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,Motor_Control.Signal);	// C HIGH ACTIVE
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <Set_Motor_State+0x1d4>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <Set_Motor_State+0x1dc>)
 80006e8:	6912      	ldr	r2, [r2, #16]
 80006ea:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,Motor_Control.Max_Signal);	// B LOW ACTIVE
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <Set_Motor_State+0x1e0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <Set_Motor_State+0x1dc>)
 80006f2:	6952      	ldr	r2, [r2, #20]
 80006f4:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <Set_Motor_State+0x1e0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2200      	movs	r2, #0
 80006fc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,0);
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <Set_Motor_State+0x1e0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2200      	movs	r2, #0
 8000704:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <Set_Motor_State+0x1d4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2200      	movs	r2, #0
 800070c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <Set_Motor_State+0x1d4>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	639a      	str	r2, [r3, #56]	; 0x38

			break;
 8000716:	e000      	b.n	800071a <Set_Motor_State+0x1c6>

		default:
			break;
 8000718:	bf00      	nop

	}
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	2000015c 	.word	0x2000015c
 800072c:	51eb851f 	.word	0x51eb851f
 8000730:	20000268 	.word	0x20000268
 8000734:	2000010c 	.word	0x2000010c

08000738 <HAL_TIM_PeriodElapsedCallback>:
#include "TimeTask.h"
#include "SixStepCommutation.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a07      	ldr	r2, [pc, #28]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d104      	bne.n	8000752 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		timerCounter++;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	4a05      	ldr	r2, [pc, #20]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000750:	6013      	str	r3, [r2, #0]
//		{
//			Time.Task.Hz_100 = 1;
//		}

	}
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000090 	.word	0x20000090
 8000764:	20000158 	.word	0x20000158

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f000 fd0e 	bl	800118c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f83c 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f000 fa72 	bl	8000c5c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000778:	f000 f90c 	bl	8000994 <MX_TIM1_Init>
  MX_TIM3_Init();
 800077c:	f000 f9b0 	bl	8000ae0 <MX_TIM3_Init>
  MX_COMP1_Init();
 8000780:	f000 f896 	bl	80008b0 <MX_COMP1_Init>
  MX_COMP3_Init();
 8000784:	f000 f8ba 	bl	80008fc <MX_COMP3_Init>
  MX_COMP5_Init();
 8000788:	f000 f8de 	bl	8000948 <MX_COMP5_Init>
  MX_TIM4_Init();
 800078c:	f000 fa18 	bl	8000bc0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  PeripheralsStart();
 8000790:	f7ff fd20 	bl	80001d4 <PeripheralsStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Motor_Control.System_Enable == 1)
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <main+0x7c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d11b      	bne.n	80007d4 <main+0x6c>
	  {
		  if(htim1.Instance->CNT == Motor_Control.Pulse_Center)
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <main+0x80>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <main+0x7c>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d117      	bne.n	80007da <main+0x72>
		  {
			  switch(Motor_Control.Drive_Stage)
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <main+0x7c>)
 80007ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80007b0:	2b02      	cmp	r3, #2
 80007b2:	d00c      	beq.n	80007ce <main+0x66>
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	dc12      	bgt.n	80007de <main+0x76>
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d002      	beq.n	80007c2 <main+0x5a>
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d003      	beq.n	80007c8 <main+0x60>

					  break;
				  }

				  default:
					  break;
 80007c0:	e00d      	b.n	80007de <main+0x76>
					  Start_Up_Motor();
 80007c2:	f7ff fd95 	bl	80002f0 <Start_Up_Motor>
					  break;
 80007c6:	e00b      	b.n	80007e0 <main+0x78>
					  Align_Motor();
 80007c8:	f7ff fdf8 	bl	80003bc <Align_Motor>
					  break;
 80007cc:	e008      	b.n	80007e0 <main+0x78>
					  Run_Motor();
 80007ce:	f7ff fe5b 	bl	8000488 <Run_Motor>
					  break;
 80007d2:	e005      	b.n	80007e0 <main+0x78>
			  }
		  }
	  }
	  else
	  {
		  Stop_Motor();
 80007d4:	f7ff fd64 	bl	80002a0 <Stop_Motor>
 80007d8:	e7dc      	b.n	8000794 <main+0x2c>
		  }
 80007da:	bf00      	nop
 80007dc:	e7da      	b.n	8000794 <main+0x2c>
					  break;
 80007de:	bf00      	nop
	  if(Motor_Control.System_Enable == 1)
 80007e0:	e7d8      	b.n	8000794 <main+0x2c>
 80007e2:	bf00      	nop
 80007e4:	20000268 	.word	0x20000268
 80007e8:	2000015c 	.word	0x2000015c

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0a6      	sub	sp, #152	; 0x98
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007f6:	2228      	movs	r2, #40	; 0x28
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 ff8e 	bl	800471c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2258      	movs	r2, #88	; 0x58
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f003 ff80 	bl	800471c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081c:	2302      	movs	r3, #2
 800081e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000824:	2310      	movs	r3, #16
 8000826:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000834:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000838:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800083c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800084a:	4618      	mov	r0, r3
 800084c:	f001 f942 	bl	8001ad4 <HAL_RCC_OscConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000856:	f000 fa65 	bl	8000d24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	230f      	movs	r3, #15
 800085c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2302      	movs	r3, #2
 8000860:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000870:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000874:	2102      	movs	r1, #2
 8000876:	4618      	mov	r0, r3
 8000878:	f002 f842 	bl	8002900 <HAL_RCC_ClockConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000882:	f000 fa4f 	bl	8000d24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM34;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <SystemClock_Config+0xc0>)
 8000888:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800088a:	2300      	movs	r3, #0
 800088c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800088e:	2300      	movs	r3, #0
 8000890:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4618      	mov	r0, r3
 8000896:	f002 fa19 	bl	8002ccc <HAL_RCCEx_PeriphCLKConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80008a0:	f000 fa40 	bl	8000d24 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3798      	adds	r7, #152	; 0x98
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	00201000 	.word	0x00201000

080008b0 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_COMP1_Init+0x44>)
 80008b6:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <MX_COMP1_Init+0x48>)
 80008b8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH2;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_COMP1_Init+0x44>)
 80008bc:	2250      	movs	r2, #80	; 0x50
 80008be:	605a      	str	r2, [r3, #4]
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_COMP1_Init+0x44>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Output = COMP_OUTPUT_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_COMP1_Init+0x44>)
 80008c8:	227f      	movs	r2, #127	; 0x7f
 80008ca:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_COMP1_Init+0x44>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_COMP1_Init+0x44>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_COMP1_Init+0x44>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_COMP1_Init+0x44>)
 80008e0:	f000 fcba 	bl	8001258 <HAL_COMP_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 80008ea:	f000 fa1b 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000dc 	.word	0x200000dc
 80008f8:	4001001c 	.word	0x4001001c

080008fc <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_COMP3_Init+0x44>)
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <MX_COMP3_Init+0x48>)
 8000904:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_COMP3_Init+0x44>)
 8000908:	2270      	movs	r2, #112	; 0x70
 800090a:	605a      	str	r2, [r3, #4]
  hcomp3.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_COMP3_Init+0x44>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hcomp3.Init.Output = COMP_OUTPUT_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_COMP3_Init+0x44>)
 8000914:	227f      	movs	r2, #127	; 0x7f
 8000916:	60da      	str	r2, [r3, #12]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_COMP3_Init+0x44>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_COMP3_Init+0x44>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_COMP3_Init+0x44>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_COMP3_Init+0x44>)
 800092c:	f000 fc94 	bl	8001258 <HAL_COMP_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_COMP3_Init+0x3e>
  {
    Error_Handler();
 8000936:	f000 f9f5 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200001b8 	.word	0x200001b8
 8000944:	40010024 	.word	0x40010024

08000948 <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_COMP5_Init+0x44>)
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <MX_COMP5_Init+0x48>)
 8000950:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_COMP5_Init+0x44>)
 8000954:	2270      	movs	r2, #112	; 0x70
 8000956:	605a      	str	r2, [r3, #4]
  hcomp5.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_COMP5_Init+0x44>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hcomp5.Init.Output = COMP_OUTPUT_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_COMP5_Init+0x44>)
 8000960:	227f      	movs	r2, #127	; 0x7f
 8000962:	60da      	str	r2, [r3, #12]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_COMP5_Init+0x44>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_COMP5_Init+0x44>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_COMP5_Init+0x44>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_COMP5_Init+0x44>)
 8000978:	f000 fc6e 	bl	8001258 <HAL_COMP_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_COMP5_Init+0x3e>
  {
    Error_Handler();
 8000982:	f000 f9cf 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000238 	.word	0x20000238
 8000990:	4001002c 	.word	0x4001002c

08000994 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b096      	sub	sp, #88	; 0x58
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
 80009b6:	615a      	str	r2, [r3, #20]
 80009b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	222c      	movs	r2, #44	; 0x2c
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f003 feab 	bl	800471c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009c6:	4b44      	ldr	r3, [pc, #272]	; (8000ad8 <MX_TIM1_Init+0x144>)
 80009c8:	4a44      	ldr	r2, [pc, #272]	; (8000adc <MX_TIM1_Init+0x148>)
 80009ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80009cc:	4b42      	ldr	r3, [pc, #264]	; (8000ad8 <MX_TIM1_Init+0x144>)
 80009ce:	2247      	movs	r2, #71	; 0x47
 80009d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d2:	4b41      	ldr	r3, [pc, #260]	; (8000ad8 <MX_TIM1_Init+0x144>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 80009d8:	4b3f      	ldr	r3, [pc, #252]	; (8000ad8 <MX_TIM1_Init+0x144>)
 80009da:	2231      	movs	r2, #49	; 0x31
 80009dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009de:	4b3e      	ldr	r3, [pc, #248]	; (8000ad8 <MX_TIM1_Init+0x144>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009e4:	4b3c      	ldr	r3, [pc, #240]	; (8000ad8 <MX_TIM1_Init+0x144>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ea:	4b3b      	ldr	r3, [pc, #236]	; (8000ad8 <MX_TIM1_Init+0x144>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009f0:	4839      	ldr	r0, [pc, #228]	; (8000ad8 <MX_TIM1_Init+0x144>)
 80009f2:	f002 fc51 	bl	8003298 <HAL_TIM_PWM_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80009fc:	f000 f992 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a00:	2300      	movs	r3, #0
 8000a02:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a10:	4619      	mov	r1, r3
 8000a12:	4831      	ldr	r0, [pc, #196]	; (8000ad8 <MX_TIM1_Init+0x144>)
 8000a14:	f003 fd2e 	bl	8004474 <HAL_TIMEx_MasterConfigSynchronization>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000a1e:	f000 f981 	bl	8000d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a22:	2360      	movs	r3, #96	; 0x60
 8000a24:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a42:	2200      	movs	r2, #0
 8000a44:	4619      	mov	r1, r3
 8000a46:	4824      	ldr	r0, [pc, #144]	; (8000ad8 <MX_TIM1_Init+0x144>)
 8000a48:	f002 feaa 	bl	80037a0 <HAL_TIM_PWM_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000a52:	f000 f967 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	481e      	ldr	r0, [pc, #120]	; (8000ad8 <MX_TIM1_Init+0x144>)
 8000a60:	f002 fe9e 	bl	80037a0 <HAL_TIM_PWM_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000a6a:	f000 f95b 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a72:	2208      	movs	r2, #8
 8000a74:	4619      	mov	r1, r3
 8000a76:	4818      	ldr	r0, [pc, #96]	; (8000ad8 <MX_TIM1_Init+0x144>)
 8000a78:	f002 fe92 	bl	80037a0 <HAL_TIM_PWM_ConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000a82:	f000 f94f 	bl	8000d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <MX_TIM1_Init+0x144>)
 8000abc:	f003 fd66 	bl	800458c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000ac6:	f000 f92d 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aca:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <MX_TIM1_Init+0x144>)
 8000acc:	f000 fa72 	bl	8000fb4 <HAL_TIM_MspPostInit>

}
 8000ad0:	bf00      	nop
 8000ad2:	3758      	adds	r7, #88	; 0x58
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2000015c 	.word	0x2000015c
 8000adc:	40012c00 	.word	0x40012c00

08000ae0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af2:	463b      	mov	r3, r7
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
 8000b00:	615a      	str	r2, [r3, #20]
 8000b02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b04:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <MX_TIM3_Init+0xd8>)
 8000b06:	4a2d      	ldr	r2, [pc, #180]	; (8000bbc <MX_TIM3_Init+0xdc>)
 8000b08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <MX_TIM3_Init+0xd8>)
 8000b0c:	2247      	movs	r2, #71	; 0x47
 8000b0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b10:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <MX_TIM3_Init+0xd8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50-1;
 8000b16:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <MX_TIM3_Init+0xd8>)
 8000b18:	2231      	movs	r2, #49	; 0x31
 8000b1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <MX_TIM3_Init+0xd8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <MX_TIM3_Init+0xd8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b28:	4823      	ldr	r0, [pc, #140]	; (8000bb8 <MX_TIM3_Init+0xd8>)
 8000b2a:	f002 fbb5 	bl	8003298 <HAL_TIM_PWM_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000b34:	f000 f8f6 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	481c      	ldr	r0, [pc, #112]	; (8000bb8 <MX_TIM3_Init+0xd8>)
 8000b48:	f003 fc94 	bl	8004474 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000b52:	f000 f8e7 	bl	8000d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b56:	2360      	movs	r3, #96	; 0x60
 8000b58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b66:	463b      	mov	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4812      	ldr	r0, [pc, #72]	; (8000bb8 <MX_TIM3_Init+0xd8>)
 8000b6e:	f002 fe17 	bl	80037a0 <HAL_TIM_PWM_ConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000b78:	f000 f8d4 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	2204      	movs	r2, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <MX_TIM3_Init+0xd8>)
 8000b84:	f002 fe0c 	bl	80037a0 <HAL_TIM_PWM_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b8e:	f000 f8c9 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b92:	463b      	mov	r3, r7
 8000b94:	2208      	movs	r2, #8
 8000b96:	4619      	mov	r1, r3
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <MX_TIM3_Init+0xd8>)
 8000b9a:	f002 fe01 	bl	80037a0 <HAL_TIM_PWM_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000ba4:	f000 f8be 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <MX_TIM3_Init+0xd8>)
 8000baa:	f000 fa03 	bl	8000fb4 <HAL_TIM_MspPostInit>

}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000010c 	.word	0x2000010c
 8000bbc:	40000400 	.word	0x40000400

08000bc0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bde:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <MX_TIM4_Init+0x94>)
 8000be0:	4a1d      	ldr	r2, [pc, #116]	; (8000c58 <MX_TIM4_Init+0x98>)
 8000be2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <MX_TIM4_Init+0x94>)
 8000be6:	2247      	movs	r2, #71	; 0x47
 8000be8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_TIM4_Init+0x94>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <MX_TIM4_Init+0x94>)
 8000bf2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bf6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <MX_TIM4_Init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_TIM4_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c04:	4813      	ldr	r0, [pc, #76]	; (8000c54 <MX_TIM4_Init+0x94>)
 8000c06:	f002 fa7f 	bl	8003108 <HAL_TIM_Base_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000c10:	f000 f888 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <MX_TIM4_Init+0x94>)
 8000c22:	f002 fed1 	bl	80039c8 <HAL_TIM_ConfigClockSource>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000c2c:	f000 f87a 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_TIM4_Init+0x94>)
 8000c3e:	f003 fc19 	bl	8004474 <HAL_TIMEx_MasterConfigSynchronization>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000c48:	f000 f86c 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	3720      	adds	r7, #32
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000090 	.word	0x20000090
 8000c58:	40000800 	.word	0x40000800

08000c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c72:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <MX_GPIO_Init+0xc0>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	4a29      	ldr	r2, [pc, #164]	; (8000d1c <MX_GPIO_Init+0xc0>)
 8000c78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c7c:	6153      	str	r3, [r2, #20]
 8000c7e:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <MX_GPIO_Init+0xc0>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <MX_GPIO_Init+0xc0>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a23      	ldr	r2, [pc, #140]	; (8000d1c <MX_GPIO_Init+0xc0>)
 8000c90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c94:	6153      	str	r3, [r2, #20]
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_GPIO_Init+0xc0>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <MX_GPIO_Init+0xc0>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	4a1d      	ldr	r2, [pc, #116]	; (8000d1c <MX_GPIO_Init+0xc0>)
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	6153      	str	r3, [r2, #20]
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_GPIO_Init+0xc0>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_GPIO_Init+0xc0>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <MX_GPIO_Init+0xc0>)
 8000cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc4:	6153      	str	r3, [r2, #20]
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_GPIO_Init+0xc0>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(deneme_GPIO_Port, deneme_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4812      	ldr	r0, [pc, #72]	; (8000d20 <MX_GPIO_Init+0xc4>)
 8000cd8:	f000 fee4 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : bos_Pin */
  GPIO_InitStruct.Pin = bos_Pin;
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(bos_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf2:	f000 fd4d 	bl	8001790 <HAL_GPIO_Init>

  /*Configure GPIO pin : deneme_Pin */
  GPIO_InitStruct.Pin = deneme_Pin;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(deneme_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_GPIO_Init+0xc4>)
 8000d0e:	f000 fd3f 	bl	8001790 <HAL_GPIO_Init>

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	48000400 	.word	0x48000400

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <Error_Handler+0x8>
	...

08000d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_MspInit+0x44>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <HAL_MspInit+0x44>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6193      	str	r3, [r2, #24]
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_MspInit+0x44>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_MspInit+0x44>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <HAL_MspInit+0x44>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_MspInit+0x44>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d66:	2007      	movs	r0, #7
 8000d68:	f000 fcca 	bl	8001700 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40021000 	.word	0x40021000

08000d78 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	; 0x30
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a54      	ldr	r2, [pc, #336]	; (8000ee8 <HAL_COMP_MspInit+0x170>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12a      	bne.n	8000df0 <HAL_COMP_MspInit+0x78>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b54      	ldr	r3, [pc, #336]	; (8000eec <HAL_COMP_MspInit+0x174>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	4a53      	ldr	r2, [pc, #332]	; (8000eec <HAL_COMP_MspInit+0x174>)
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	6153      	str	r3, [r2, #20]
 8000da6:	4b51      	ldr	r3, [pc, #324]	; (8000eec <HAL_COMP_MspInit+0x174>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	61bb      	str	r3, [r7, #24]
 8000db0:	69bb      	ldr	r3, [r7, #24]
    /**COMP1 GPIO Configuration
    PA0     ------> COMP1_OUT
    PA1     ------> COMP1_INP
    PA5     ------> COMP1_INM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP1;
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd0:	f000 fcde 	bl	8001790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000dd4:	2322      	movs	r3, #34	; 0x22
 8000dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dea:	f000 fcd1 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP5_MspInit 1 */

  /* USER CODE END COMP5_MspInit 1 */
  }

}
 8000dee:	e076      	b.n	8000ede <HAL_COMP_MspInit+0x166>
  else if(hcomp->Instance==COMP3)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a3e      	ldr	r2, [pc, #248]	; (8000ef0 <HAL_COMP_MspInit+0x178>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d137      	bne.n	8000e6a <HAL_COMP_MspInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	4b3c      	ldr	r3, [pc, #240]	; (8000eec <HAL_COMP_MspInit+0x174>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	4a3b      	ldr	r2, [pc, #236]	; (8000eec <HAL_COMP_MspInit+0x174>)
 8000e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e04:	6153      	str	r3, [r2, #20]
 8000e06:	4b39      	ldr	r3, [pc, #228]	; (8000eec <HAL_COMP_MspInit+0x174>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b36      	ldr	r3, [pc, #216]	; (8000eec <HAL_COMP_MspInit+0x174>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	4a35      	ldr	r2, [pc, #212]	; (8000eec <HAL_COMP_MspInit+0x174>)
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	6153      	str	r3, [r2, #20]
 8000e1e:	4b33      	ldr	r3, [pc, #204]	; (8000eec <HAL_COMP_MspInit+0x174>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000e2a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e30:	2303      	movs	r3, #3
 8000e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	482d      	ldr	r0, [pc, #180]	; (8000ef4 <HAL_COMP_MspInit+0x17c>)
 8000e40:	f000 fca6 	bl	8001790 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP3;
 8000e56:	2308      	movs	r3, #8
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f000 fc94 	bl	8001790 <HAL_GPIO_Init>
}
 8000e68:	e039      	b.n	8000ede <HAL_COMP_MspInit+0x166>
  else if(hcomp->Instance==COMP5)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a22      	ldr	r2, [pc, #136]	; (8000ef8 <HAL_COMP_MspInit+0x180>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d134      	bne.n	8000ede <HAL_COMP_MspInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <HAL_COMP_MspInit+0x174>)
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <HAL_COMP_MspInit+0x174>)
 8000e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e7e:	6153      	str	r3, [r2, #20]
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <HAL_COMP_MspInit+0x174>)
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_COMP_MspInit+0x174>)
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	4a16      	ldr	r2, [pc, #88]	; (8000eec <HAL_COMP_MspInit+0x174>)
 8000e92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e96:	6153      	str	r3, [r2, #20]
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_COMP_MspInit+0x174>)
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 8000ea4:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <HAL_COMP_MspInit+0x17c>)
 8000eba:	f000 fc69 	bl	8001790 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_COMP5;
 8000ece:	2307      	movs	r3, #7
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4808      	ldr	r0, [pc, #32]	; (8000efc <HAL_COMP_MspInit+0x184>)
 8000eda:	f000 fc59 	bl	8001790 <HAL_GPIO_Init>
}
 8000ede:	bf00      	nop
 8000ee0:	3730      	adds	r7, #48	; 0x30
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	4001001c 	.word	0x4001001c
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010024 	.word	0x40010024
 8000ef4:	48000400 	.word	0x48000400
 8000ef8:	4001002c 	.word	0x4001002c
 8000efc:	48000800 	.word	0x48000800

08000f00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <HAL_TIM_PWM_MspInit+0x5c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d10c      	bne.n	8000f2c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_TIM_PWM_MspInit+0x60>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <HAL_TIM_PWM_MspInit+0x60>)
 8000f18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f1c:	6193      	str	r3, [r2, #24]
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_TIM_PWM_MspInit+0x60>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f2a:	e010      	b.n	8000f4e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <HAL_TIM_PWM_MspInit+0x64>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10b      	bne.n	8000f4e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_TIM_PWM_MspInit+0x60>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <HAL_TIM_PWM_MspInit+0x60>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <HAL_TIM_PWM_MspInit+0x60>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40012c00 	.word	0x40012c00
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40000400 	.word	0x40000400

08000f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <HAL_TIM_Base_MspInit+0x44>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d113      	bne.n	8000fa2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_TIM_Base_MspInit+0x48>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <HAL_TIM_Base_MspInit+0x48>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	61d3      	str	r3, [r2, #28]
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_TIM_Base_MspInit+0x48>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	201e      	movs	r0, #30
 8000f98:	f000 fbbd 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f9c:	201e      	movs	r0, #30
 8000f9e:	f000 fbd6 	bl	800174e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40000800 	.word	0x40000800
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a31      	ldr	r2, [pc, #196]	; (8001098 <HAL_TIM_MspPostInit+0xe4>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d11c      	bne.n	8001010 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd6:	4b31      	ldr	r3, [pc, #196]	; (800109c <HAL_TIM_MspPostInit+0xe8>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	4a30      	ldr	r2, [pc, #192]	; (800109c <HAL_TIM_MspPostInit+0xe8>)
 8000fdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fe0:	6153      	str	r3, [r2, #20]
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <HAL_TIM_MspPostInit+0xe8>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ffe:	2302      	movs	r3, #2
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4825      	ldr	r0, [pc, #148]	; (80010a0 <HAL_TIM_MspPostInit+0xec>)
 800100a:	f000 fbc1 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800100e:	e03e      	b.n	800108e <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a23      	ldr	r2, [pc, #140]	; (80010a4 <HAL_TIM_MspPostInit+0xf0>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d139      	bne.n	800108e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_TIM_MspPostInit+0xe8>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	4a1f      	ldr	r2, [pc, #124]	; (800109c <HAL_TIM_MspPostInit+0xe8>)
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	6153      	str	r3, [r2, #20]
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_TIM_MspPostInit+0xe8>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <HAL_TIM_MspPostInit+0xe8>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a19      	ldr	r2, [pc, #100]	; (800109c <HAL_TIM_MspPostInit+0xe8>)
 8001038:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800103c:	6153      	str	r3, [r2, #20]
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_TIM_MspPostInit+0xe8>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800104a:	2350      	movs	r3, #80	; 0x50
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800105a:	2302      	movs	r3, #2
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001068:	f000 fb92 	bl	8001790 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800106c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800107e:	2302      	movs	r3, #2
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_TIM_MspPostInit+0xec>)
 800108a:	f000 fb81 	bl	8001790 <HAL_GPIO_Init>
}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40012c00 	.word	0x40012c00
 800109c:	40021000 	.word	0x40021000
 80010a0:	48000800 	.word	0x48000800
 80010a4:	40000400 	.word	0x40000400

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <NMI_Handler+0x4>

080010ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <HardFault_Handler+0x4>

080010b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <MemManage_Handler+0x4>

080010ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <BusFault_Handler+0x4>

080010c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <UsageFault_Handler+0x4>

080010c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f4:	f000 f890 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 80010f8:	f000 fb43 	bl	8001782 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <TIM4_IRQHandler+0x10>)
 8001106:	f002 fa2b 	bl	8003560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000090 	.word	0x20000090

08001114 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <SystemInit+0x20>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <SystemInit+0x20>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <Reset_Handler>:
 8001138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001170 <LoopForever+0x2>
 800113c:	480d      	ldr	r0, [pc, #52]	; (8001174 <LoopForever+0x6>)
 800113e:	490e      	ldr	r1, [pc, #56]	; (8001178 <LoopForever+0xa>)
 8001140:	4a0e      	ldr	r2, [pc, #56]	; (800117c <LoopForever+0xe>)
 8001142:	2300      	movs	r3, #0
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:
 8001146:	58d4      	ldr	r4, [r2, r3]
 8001148:	50c4      	str	r4, [r0, r3]
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:
 800114c:	18c4      	adds	r4, r0, r3
 800114e:	428c      	cmp	r4, r1
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <LoopForever+0x12>)
 8001154:	4c0b      	ldr	r4, [pc, #44]	; (8001184 <LoopForever+0x16>)
 8001156:	2300      	movs	r3, #0
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:
 800115e:	42a2      	cmp	r2, r4
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>
 8001162:	f7ff ffd7 	bl	8001114 <SystemInit>
 8001166:	f003 fab5 	bl	80046d4 <__libc_init_array>
 800116a:	f7ff fafd 	bl	8000768 <main>

0800116e <LoopForever>:
 800116e:	e7fe      	b.n	800116e <LoopForever>
 8001170:	20010000 	.word	0x20010000
 8001174:	20000000 	.word	0x20000000
 8001178:	2000000c 	.word	0x2000000c
 800117c:	08004784 	.word	0x08004784
 8001180:	2000000c 	.word	0x2000000c
 8001184:	20000290 	.word	0x20000290

08001188 <ADC1_2_IRQHandler>:
 8001188:	e7fe      	b.n	8001188 <ADC1_2_IRQHandler>
	...

0800118c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_Init+0x28>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_Init+0x28>)
 8001196:	f043 0310 	orr.w	r3, r3, #16
 800119a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 faaf 	bl	8001700 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f000 f808 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fdc2 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40022000 	.word	0x40022000

080011b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fac7 	bl	800176a <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 fa8f 	bl	8001716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	20000008 	.word	0x20000008
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008
 800123c:	2000028c 	.word	0x2000028c

08001240 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;  
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	2000028c 	.word	0x2000028c

08001258 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <HAL_COMP_Init+0x22>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	75fb      	strb	r3, [r7, #23]
 800127e:	e05e      	b.n	800133e <HAL_COMP_Init+0xe6>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001280:	4b31      	ldr	r3, [pc, #196]	; (8001348 <HAL_COMP_Init+0xf0>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a30      	ldr	r2, [pc, #192]	; (8001348 <HAL_COMP_Init+0xf0>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <HAL_COMP_Init+0xf0>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fd6d 	bl	8000d78 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d103      	bne.n	80012b2 <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f023 0202 	bic.w	r2, r3, #2
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	4313      	orrs	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80012fe:	4313      	orrs	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	695a      	ldr	r2, [r3, #20]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69da      	ldr	r2, [r3, #28]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1a      	ldr	r2, [r3, #32]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 800133e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000

0800134c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d007      	beq.n	8001372 <HAL_COMP_Start+0x26>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001368:	b2db      	uxtb	r3, r3
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <HAL_COMP_Start+0x2c>
  {
    status = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	73fb      	strb	r3, [r7, #15]
 8001376:	e0c4      	b.n	8001502 <HAL_COMP_Start+0x1b6>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b01      	cmp	r3, #1
 8001382:	f040 80bc 	bne.w	80014fe <HAL_COMP_Start+0x1b2>
    {
      /* Get the EXTI Line output configuration */
      extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a61      	ldr	r2, [pc, #388]	; (8001510 <HAL_COMP_Start+0x1c4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d028      	beq.n	80013e2 <HAL_COMP_Start+0x96>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a5f      	ldr	r2, [pc, #380]	; (8001514 <HAL_COMP_Start+0x1c8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d020      	beq.n	80013dc <HAL_COMP_Start+0x90>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a5e      	ldr	r2, [pc, #376]	; (8001518 <HAL_COMP_Start+0x1cc>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d018      	beq.n	80013d6 <HAL_COMP_Start+0x8a>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a5c      	ldr	r2, [pc, #368]	; (800151c <HAL_COMP_Start+0x1d0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d010      	beq.n	80013d0 <HAL_COMP_Start+0x84>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a5b      	ldr	r2, [pc, #364]	; (8001520 <HAL_COMP_Start+0x1d4>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d008      	beq.n	80013ca <HAL_COMP_Start+0x7e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a59      	ldr	r2, [pc, #356]	; (8001524 <HAL_COMP_Start+0x1d8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_COMP_Start+0x7a>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00f      	b.n	80013e6 <HAL_COMP_Start+0x9a>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e00d      	b.n	80013e6 <HAL_COMP_Start+0x9a>
 80013ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013ce:	e00a      	b.n	80013e6 <HAL_COMP_Start+0x9a>
 80013d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d4:	e007      	b.n	80013e6 <HAL_COMP_Start+0x9a>
 80013d6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80013da:	e004      	b.n	80013e6 <HAL_COMP_Start+0x9a>
 80013dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013e0:	e001      	b.n	80013e6 <HAL_COMP_Start+0x9a>
 80013e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013e6:	60bb      	str	r3, [r7, #8]

      /* Configure the event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_EVENT_RISING | COMP_TRIGGERMODE_EVENT_FALLING)) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d077      	beq.n	80014e4 <HAL_COMP_Start+0x198>
      {
        /* Configure the event trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_RISING) != RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d012      	beq.n	8001426 <HAL_COMP_Start+0xda>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <HAL_COMP_Start+0xcc>
 800140a:	4b47      	ldr	r3, [pc, #284]	; (8001528 <HAL_COMP_Start+0x1dc>)
 800140c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800140e:	4946      	ldr	r1, [pc, #280]	; (8001528 <HAL_COMP_Start+0x1dc>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4313      	orrs	r3, r2
 8001414:	628b      	str	r3, [r1, #40]	; 0x28
 8001416:	e01a      	b.n	800144e <HAL_COMP_Start+0x102>
 8001418:	4b43      	ldr	r3, [pc, #268]	; (8001528 <HAL_COMP_Start+0x1dc>)
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	4942      	ldr	r1, [pc, #264]	; (8001528 <HAL_COMP_Start+0x1dc>)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	4313      	orrs	r3, r2
 8001422:	608b      	str	r3, [r1, #8]
 8001424:	e013      	b.n	800144e <HAL_COMP_Start+0x102>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <HAL_COMP_Start+0xf4>
 8001430:	4b3d      	ldr	r3, [pc, #244]	; (8001528 <HAL_COMP_Start+0x1dc>)
 8001432:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	43db      	mvns	r3, r3
 8001438:	493b      	ldr	r1, [pc, #236]	; (8001528 <HAL_COMP_Start+0x1dc>)
 800143a:	4013      	ands	r3, r2
 800143c:	628b      	str	r3, [r1, #40]	; 0x28
 800143e:	e006      	b.n	800144e <HAL_COMP_Start+0x102>
 8001440:	4b39      	ldr	r3, [pc, #228]	; (8001528 <HAL_COMP_Start+0x1dc>)
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	43db      	mvns	r3, r3
 8001448:	4937      	ldr	r1, [pc, #220]	; (8001528 <HAL_COMP_Start+0x1dc>)
 800144a:	4013      	ands	r3, r2
 800144c:	608b      	str	r3, [r1, #8]
        }

        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_FALLING) != RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	2b00      	cmp	r3, #0
 8001458:	d012      	beq.n	8001480 <HAL_COMP_Start+0x134>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <HAL_COMP_Start+0x126>
 8001464:	4b30      	ldr	r3, [pc, #192]	; (8001528 <HAL_COMP_Start+0x1dc>)
 8001466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001468:	492f      	ldr	r1, [pc, #188]	; (8001528 <HAL_COMP_Start+0x1dc>)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	4313      	orrs	r3, r2
 800146e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001470:	e01a      	b.n	80014a8 <HAL_COMP_Start+0x15c>
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <HAL_COMP_Start+0x1dc>)
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	492c      	ldr	r1, [pc, #176]	; (8001528 <HAL_COMP_Start+0x1dc>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4313      	orrs	r3, r2
 800147c:	60cb      	str	r3, [r1, #12]
 800147e:	e013      	b.n	80014a8 <HAL_COMP_Start+0x15c>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_COMP_Start+0x14e>
 800148a:	4b27      	ldr	r3, [pc, #156]	; (8001528 <HAL_COMP_Start+0x1dc>)
 800148c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	43db      	mvns	r3, r3
 8001492:	4925      	ldr	r1, [pc, #148]	; (8001528 <HAL_COMP_Start+0x1dc>)
 8001494:	4013      	ands	r3, r2
 8001496:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001498:	e006      	b.n	80014a8 <HAL_COMP_Start+0x15c>
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <HAL_COMP_Start+0x1dc>)
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	4921      	ldr	r1, [pc, #132]	; (8001528 <HAL_COMP_Start+0x1dc>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	60cb      	str	r3, [r1, #12]
        }

        /* Enable EXTI event generation */
        COMP_EXTI_ENABLE_EVENT(extiline);
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d006      	beq.n	80014c0 <HAL_COMP_Start+0x174>
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <HAL_COMP_Start+0x1dc>)
 80014b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b6:	491c      	ldr	r1, [pc, #112]	; (8001528 <HAL_COMP_Start+0x1dc>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	624b      	str	r3, [r1, #36]	; 0x24
 80014be:	e005      	b.n	80014cc <HAL_COMP_Start+0x180>
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_COMP_Start+0x1dc>)
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4918      	ldr	r1, [pc, #96]	; (8001528 <HAL_COMP_Start+0x1dc>)
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]

        /* Clear COMP EXTI pending bit */
        COMP_EXTI_CLEAR_FLAG(extiline);
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_COMP_Start+0x192>
 80014d6:	4a14      	ldr	r2, [pc, #80]	; (8001528 <HAL_COMP_Start+0x1dc>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	6353      	str	r3, [r2, #52]	; 0x34
 80014dc:	e002      	b.n	80014e4 <HAL_COMP_Start+0x198>
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <HAL_COMP_Start+0x1dc>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	6153      	str	r3, [r2, #20]
      }

      /* Enable the selected comparator */
      __HAL_COMP_ENABLE(hcomp);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2202      	movs	r2, #2
 80014f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80014fc:	e001      	b.n	8001502 <HAL_COMP_Start+0x1b6>
    }
    else
    {
      status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	4001001c 	.word	0x4001001c
 8001514:	40010020 	.word	0x40010020
 8001518:	40010024 	.word	0x40010024
 800151c:	40010028 	.word	0x40010028
 8001520:	4001002c 	.word	0x4001002c
 8001524:	40010030 	.word	0x40010030
 8001528:	40010400 	.word	0x40010400

0800152c <HAL_COMP_GetOutputLevel>:
  *         @arg @ref COMP_OUTPUTLEVEL_LOW
  *         @arg @ref COMP_OUTPUTLEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t level = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]

  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  level = READ_BIT(hcomp->Instance->CSR, COMP_CSR_COMPxOUT);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001542:	60fb      	str	r3, [r7, #12]

  if (level != 0U)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <HAL_COMP_GetOutputLevel+0x24>
  {
    return (COMP_OUTPUTLEVEL_HIGH);
 800154a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800154e:	e000      	b.n	8001552 <HAL_COMP_GetOutputLevel+0x26>
  }
  return (COMP_OUTPUTLEVEL_LOW);
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4907      	ldr	r1, [pc, #28]	; (80015fc <__NVIC_EnableIRQ+0x38>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	490c      	ldr	r1, [pc, #48]	; (800164c <__NVIC_SetPriority+0x4c>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4908      	ldr	r1, [pc, #32]	; (8001650 <__NVIC_SetPriority+0x50>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3b04      	subs	r3, #4
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	4313      	orrs	r3, r2
         );
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	; 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016cc:	d301      	bcc.n	80016d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00f      	b.n	80016f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <SysTick_Config+0x40>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016da:	210f      	movs	r1, #15
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f7ff ff8e 	bl	8001600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <SysTick_Config+0x40>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <SysTick_Config+0x40>)
 80016ec:	2207      	movs	r2, #7
 80016ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	e000e010 	.word	0xe000e010

08001700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff29 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001728:	f7ff ff3e 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 800172c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	6978      	ldr	r0, [r7, #20]
 8001734:	f7ff ff8e 	bl	8001654 <NVIC_EncodePriority>
 8001738:	4602      	mov	r2, r0
 800173a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff5d 	bl	8001600 <__NVIC_SetPriority>
}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff31 	bl	80015c4 <__NVIC_EnableIRQ>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffa2 	bl	80016bc <SysTick_Config>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179e:	e160      	b.n	8001a62 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2101      	movs	r1, #1
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	4013      	ands	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 8152 	beq.w	8001a5c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d005      	beq.n	80017d0 <HAL_GPIO_Init+0x40>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d130      	bne.n	8001832 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001806:	2201      	movs	r2, #1
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	f003 0201 	and.w	r2, r3, #1
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b03      	cmp	r3, #3
 800183c:	d017      	beq.n	800186e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	2203      	movs	r2, #3
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d123      	bne.n	80018c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	08da      	lsrs	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3208      	adds	r2, #8
 8001882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	220f      	movs	r2, #15
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	08da      	lsrs	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3208      	adds	r2, #8
 80018bc:	6939      	ldr	r1, [r7, #16]
 80018be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0203 	and.w	r2, r3, #3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 80ac 	beq.w	8001a5c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001904:	4b5e      	ldr	r3, [pc, #376]	; (8001a80 <HAL_GPIO_Init+0x2f0>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a5d      	ldr	r2, [pc, #372]	; (8001a80 <HAL_GPIO_Init+0x2f0>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b5b      	ldr	r3, [pc, #364]	; (8001a80 <HAL_GPIO_Init+0x2f0>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800191c:	4a59      	ldr	r2, [pc, #356]	; (8001a84 <HAL_GPIO_Init+0x2f4>)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001946:	d025      	beq.n	8001994 <HAL_GPIO_Init+0x204>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a4f      	ldr	r2, [pc, #316]	; (8001a88 <HAL_GPIO_Init+0x2f8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d01f      	beq.n	8001990 <HAL_GPIO_Init+0x200>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a4e      	ldr	r2, [pc, #312]	; (8001a8c <HAL_GPIO_Init+0x2fc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d019      	beq.n	800198c <HAL_GPIO_Init+0x1fc>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a4d      	ldr	r2, [pc, #308]	; (8001a90 <HAL_GPIO_Init+0x300>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d013      	beq.n	8001988 <HAL_GPIO_Init+0x1f8>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a4c      	ldr	r2, [pc, #304]	; (8001a94 <HAL_GPIO_Init+0x304>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d00d      	beq.n	8001984 <HAL_GPIO_Init+0x1f4>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a4b      	ldr	r2, [pc, #300]	; (8001a98 <HAL_GPIO_Init+0x308>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d007      	beq.n	8001980 <HAL_GPIO_Init+0x1f0>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a4a      	ldr	r2, [pc, #296]	; (8001a9c <HAL_GPIO_Init+0x30c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d101      	bne.n	800197c <HAL_GPIO_Init+0x1ec>
 8001978:	2306      	movs	r3, #6
 800197a:	e00c      	b.n	8001996 <HAL_GPIO_Init+0x206>
 800197c:	2307      	movs	r3, #7
 800197e:	e00a      	b.n	8001996 <HAL_GPIO_Init+0x206>
 8001980:	2305      	movs	r3, #5
 8001982:	e008      	b.n	8001996 <HAL_GPIO_Init+0x206>
 8001984:	2304      	movs	r3, #4
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x206>
 8001988:	2303      	movs	r3, #3
 800198a:	e004      	b.n	8001996 <HAL_GPIO_Init+0x206>
 800198c:	2302      	movs	r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x206>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_GPIO_Init+0x206>
 8001994:	2300      	movs	r3, #0
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	f002 0203 	and.w	r2, r2, #3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4093      	lsls	r3, r2
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019a6:	4937      	ldr	r1, [pc, #220]	; (8001a84 <HAL_GPIO_Init+0x2f4>)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b4:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019d8:	4a31      	ldr	r2, [pc, #196]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019de:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a02:	4a27      	ldr	r2, [pc, #156]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a2c:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a56:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f47f ae97 	bne.w	80017a0 <HAL_GPIO_Init+0x10>
  }
}
 8001a72:	bf00      	nop
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010000 	.word	0x40010000
 8001a88:	48000400 	.word	0x48000400
 8001a8c:	48000800 	.word	0x48000800
 8001a90:	48000c00 	.word	0x48000c00
 8001a94:	48001000 	.word	0x48001000
 8001a98:	48001400 	.word	0x48001400
 8001a9c:	48001800 	.word	0x48001800
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab4:	787b      	ldrb	r3, [r7, #1]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ac0:	e002      	b.n	8001ac8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f000 bf01 	b.w	80028f0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 8160 	beq.w	8001dbe <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001afe:	4bae      	ldr	r3, [pc, #696]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d00c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b0a:	4bab      	ldr	r3, [pc, #684]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d159      	bne.n	8001bca <HAL_RCC_OscConfig+0xf6>
 8001b16:	4ba8      	ldr	r3, [pc, #672]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b22:	d152      	bne.n	8001bca <HAL_RCC_OscConfig+0xf6>
 8001b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b28:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b38:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3c:	fab3 f383 	clz	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d102      	bne.n	8001b56 <HAL_RCC_OscConfig+0x82>
 8001b50:	4b99      	ldr	r3, [pc, #612]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	e015      	b.n	8001b82 <HAL_RCC_OscConfig+0xae>
 8001b56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001b6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b6e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b72:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b7e:	4b8e      	ldr	r3, [pc, #568]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b86:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001b8a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001b8e:	fa92 f2a2 	rbit	r2, r2
 8001b92:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001b96:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b9a:	fab2 f282 	clz	r2, r2
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	f042 0220 	orr.w	r2, r2, #32
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	f002 021f 	and.w	r2, r2, #31
 8001baa:	2101      	movs	r1, #1
 8001bac:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 8102 	beq.w	8001dbc <HAL_RCC_OscConfig+0x2e8>
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 80fc 	bne.w	8001dbc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f000 be93 	b.w	80028f0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd4:	d106      	bne.n	8001be4 <HAL_RCC_OscConfig+0x110>
 8001bd6:	4b78      	ldr	r3, [pc, #480]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a77      	ldr	r2, [pc, #476]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e030      	b.n	8001c46 <HAL_RCC_OscConfig+0x172>
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x134>
 8001bee:	4b72      	ldr	r3, [pc, #456]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a71      	ldr	r2, [pc, #452]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b6f      	ldr	r3, [pc, #444]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a6e      	ldr	r2, [pc, #440]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e01e      	b.n	8001c46 <HAL_RCC_OscConfig+0x172>
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c12:	d10c      	bne.n	8001c2e <HAL_RCC_OscConfig+0x15a>
 8001c14:	4b68      	ldr	r3, [pc, #416]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a67      	ldr	r2, [pc, #412]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001c1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b65      	ldr	r3, [pc, #404]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a64      	ldr	r2, [pc, #400]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	e00b      	b.n	8001c46 <HAL_RCC_OscConfig+0x172>
 8001c2e:	4b62      	ldr	r3, [pc, #392]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a61      	ldr	r2, [pc, #388]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	4b5f      	ldr	r3, [pc, #380]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a5e      	ldr	r2, [pc, #376]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c44:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d059      	beq.n	8001d04 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff faf6 	bl	8001240 <HAL_GetTick>
 8001c54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c5a:	f7ff faf1 	bl	8001240 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d902      	bls.n	8001c70 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	f000 be40 	b.w	80028f0 <HAL_RCC_OscConfig+0xe1c>
 8001c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c74:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001c7c:	fa93 f3a3 	rbit	r3, r3
 8001c80:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001c84:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c88:	fab3 f383 	clz	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d102      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x1ce>
 8001c9c:	4b46      	ldr	r3, [pc, #280]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	e015      	b.n	8001cce <HAL_RCC_OscConfig+0x1fa>
 8001ca2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001cb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cba:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001cbe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001cca:	4b3b      	ldr	r3, [pc, #236]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cd2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001cd6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001cda:	fa92 f2a2 	rbit	r2, r2
 8001cde:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001ce2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ce6:	fab2 f282 	clz	r2, r2
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	f042 0220 	orr.w	r2, r2, #32
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	f002 021f 	and.w	r2, r2, #31
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0ab      	beq.n	8001c5a <HAL_RCC_OscConfig+0x186>
 8001d02:	e05c      	b.n	8001dbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff fa9c 	bl	8001240 <HAL_GetTick>
 8001d08:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0c:	e00a      	b.n	8001d24 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0e:	f7ff fa97 	bl	8001240 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d902      	bls.n	8001d24 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	f000 bde6 	b.w	80028f0 <HAL_RCC_OscConfig+0xe1c>
 8001d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d28:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001d38:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3c:	fab3 f383 	clz	r3, r3
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d102      	bne.n	8001d56 <HAL_RCC_OscConfig+0x282>
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	e015      	b.n	8001d82 <HAL_RCC_OscConfig+0x2ae>
 8001d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d6e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d72:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_RCC_OscConfig+0x2e4>)
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d86:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001d8a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001d8e:	fa92 f2a2 	rbit	r2, r2
 8001d92:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001d96:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d9a:	fab2 f282 	clz	r2, r2
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	f042 0220 	orr.w	r2, r2, #32
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	f002 021f 	and.w	r2, r2, #31
 8001daa:	2101      	movs	r1, #1
 8001dac:	fa01 f202 	lsl.w	r2, r1, r2
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1ab      	bne.n	8001d0e <HAL_RCC_OscConfig+0x23a>
 8001db6:	e002      	b.n	8001dbe <HAL_RCC_OscConfig+0x2ea>
 8001db8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 8170 	beq.w	80020ae <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dce:	4bd0      	ldr	r3, [pc, #832]	; (8002110 <HAL_RCC_OscConfig+0x63c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00c      	beq.n	8001df4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dda:	4bcd      	ldr	r3, [pc, #820]	; (8002110 <HAL_RCC_OscConfig+0x63c>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d16d      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x3ee>
 8001de6:	4bca      	ldr	r3, [pc, #808]	; (8002110 <HAL_RCC_OscConfig+0x63c>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001df2:	d166      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x3ee>
 8001df4:	2302      	movs	r3, #2
 8001df6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001e06:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d102      	bne.n	8001e24 <HAL_RCC_OscConfig+0x350>
 8001e1e:	4bbc      	ldr	r3, [pc, #752]	; (8002110 <HAL_RCC_OscConfig+0x63c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	e013      	b.n	8001e4c <HAL_RCC_OscConfig+0x378>
 8001e24:	2302      	movs	r3, #2
 8001e26:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001e36:	2302      	movs	r3, #2
 8001e38:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e3c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e48:	4bb1      	ldr	r3, [pc, #708]	; (8002110 <HAL_RCC_OscConfig+0x63c>)
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001e52:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001e56:	fa92 f2a2 	rbit	r2, r2
 8001e5a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001e5e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e62:	fab2 f282 	clz	r2, r2
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	f042 0220 	orr.w	r2, r2, #32
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	f002 021f 	and.w	r2, r2, #31
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f202 	lsl.w	r2, r1, r2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <HAL_RCC_OscConfig+0x3ba>
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d002      	beq.n	8001e8e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f000 bd31 	b.w	80028f0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8e:	4ba0      	ldr	r3, [pc, #640]	; (8002110 <HAL_RCC_OscConfig+0x63c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	21f8      	movs	r1, #248	; 0xf8
 8001e9e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001ea6:	fa91 f1a1 	rbit	r1, r1
 8001eaa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001eae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001eb2:	fab1 f181 	clz	r1, r1
 8001eb6:	b2c9      	uxtb	r1, r1
 8001eb8:	408b      	lsls	r3, r1
 8001eba:	4995      	ldr	r1, [pc, #596]	; (8002110 <HAL_RCC_OscConfig+0x63c>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec0:	e0f5      	b.n	80020ae <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8085 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x504>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ed8:	fa93 f3a3 	rbit	r3, r3
 8001edc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001ee0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee4:	fab3 f383 	clz	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7ff f9a1 	bl	8001240 <HAL_GetTick>
 8001efe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f04:	f7ff f99c 	bl	8001240 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d902      	bls.n	8001f1a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	f000 bceb 	b.w	80028f0 <HAL_RCC_OscConfig+0xe1c>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001f2c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f30:	fab3 f383 	clz	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d102      	bne.n	8001f4a <HAL_RCC_OscConfig+0x476>
 8001f44:	4b72      	ldr	r3, [pc, #456]	; (8002110 <HAL_RCC_OscConfig+0x63c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	e013      	b.n	8001f72 <HAL_RCC_OscConfig+0x49e>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f62:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f6e:	4b68      	ldr	r3, [pc, #416]	; (8002110 <HAL_RCC_OscConfig+0x63c>)
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	2202      	movs	r2, #2
 8001f74:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001f78:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f7c:	fa92 f2a2 	rbit	r2, r2
 8001f80:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001f84:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f88:	fab2 f282 	clz	r2, r2
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	f042 0220 	orr.w	r2, r2, #32
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	f002 021f 	and.w	r2, r2, #31
 8001f98:	2101      	movs	r1, #1
 8001f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0af      	beq.n	8001f04 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa4:	4b5a      	ldr	r3, [pc, #360]	; (8002110 <HAL_RCC_OscConfig+0x63c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	21f8      	movs	r1, #248	; 0xf8
 8001fb4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001fbc:	fa91 f1a1 	rbit	r1, r1
 8001fc0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001fc4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001fc8:	fab1 f181 	clz	r1, r1
 8001fcc:	b2c9      	uxtb	r1, r1
 8001fce:	408b      	lsls	r3, r1
 8001fd0:	494f      	ldr	r1, [pc, #316]	; (8002110 <HAL_RCC_OscConfig+0x63c>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
 8001fd6:	e06a      	b.n	80020ae <HAL_RCC_OscConfig+0x5da>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001fea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ff8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	461a      	mov	r2, r3
 8002000:	2300      	movs	r3, #0
 8002002:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff f91c 	bl	8001240 <HAL_GetTick>
 8002008:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200c:	e00a      	b.n	8002024 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200e:	f7ff f917 	bl	8001240 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d902      	bls.n	8002024 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	f000 bc66 	b.w	80028f0 <HAL_RCC_OscConfig+0xe1c>
 8002024:	2302      	movs	r3, #2
 8002026:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002036:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	095b      	lsrs	r3, r3, #5
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d102      	bne.n	8002054 <HAL_RCC_OscConfig+0x580>
 800204e:	4b30      	ldr	r3, [pc, #192]	; (8002110 <HAL_RCC_OscConfig+0x63c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	e013      	b.n	800207c <HAL_RCC_OscConfig+0x5a8>
 8002054:	2302      	movs	r3, #2
 8002056:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002066:	2302      	movs	r3, #2
 8002068:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800206c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002078:	4b25      	ldr	r3, [pc, #148]	; (8002110 <HAL_RCC_OscConfig+0x63c>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	2202      	movs	r2, #2
 800207e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002082:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002086:	fa92 f2a2 	rbit	r2, r2
 800208a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800208e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002092:	fab2 f282 	clz	r2, r2
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f042 0220 	orr.w	r2, r2, #32
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f002 021f 	and.w	r2, r2, #31
 80020a2:	2101      	movs	r1, #1
 80020a4:	fa01 f202 	lsl.w	r2, r1, r2
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1af      	bne.n	800200e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80da 	beq.w	8002272 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d069      	beq.n	800219c <HAL_RCC_OscConfig+0x6c8>
 80020c8:	2301      	movs	r3, #1
 80020ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80020da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_OscConfig+0x640>)
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	461a      	mov	r2, r3
 80020ee:	2301      	movs	r3, #1
 80020f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f2:	f7ff f8a5 	bl	8001240 <HAL_GetTick>
 80020f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fa:	e00d      	b.n	8002118 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fc:	f7ff f8a0 	bl	8001240 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d905      	bls.n	8002118 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e3ef      	b.n	80028f0 <HAL_RCC_OscConfig+0xe1c>
 8002110:	40021000 	.word	0x40021000
 8002114:	10908120 	.word	0x10908120
 8002118:	2302      	movs	r3, #2
 800211a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002130:	2202      	movs	r2, #2
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	fa93 f2a3 	rbit	r2, r3
 800213e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002148:	2202      	movs	r2, #2
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	fa93 f2a3 	rbit	r2, r3
 8002156:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800215a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215c:	4ba4      	ldr	r3, [pc, #656]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 800215e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002160:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002164:	2102      	movs	r1, #2
 8002166:	6019      	str	r1, [r3, #0]
 8002168:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	fa93 f1a3 	rbit	r1, r3
 8002172:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002176:	6019      	str	r1, [r3, #0]
  return result;
 8002178:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	2101      	movs	r1, #1
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	4013      	ands	r3, r2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0b0      	beq.n	80020fc <HAL_RCC_OscConfig+0x628>
 800219a:	e06a      	b.n	8002272 <HAL_RCC_OscConfig+0x79e>
 800219c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	fa93 f2a3 	rbit	r2, r3
 80021ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021b2:	601a      	str	r2, [r3, #0]
  return result;
 80021b4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021b8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b8c      	ldr	r3, [pc, #560]	; (80023f4 <HAL_RCC_OscConfig+0x920>)
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	461a      	mov	r2, r3
 80021ca:	2300      	movs	r3, #0
 80021cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7ff f837 	bl	8001240 <HAL_GetTick>
 80021d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d6:	e009      	b.n	80021ec <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d8:	f7ff f832 	bl	8001240 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e381      	b.n	80028f0 <HAL_RCC_OscConfig+0xe1c>
 80021ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021f0:	2202      	movs	r2, #2
 80021f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	fa93 f2a3 	rbit	r2, r3
 80021fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002208:	2202      	movs	r2, #2
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	fa93 f2a3 	rbit	r2, r3
 8002216:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002220:	2202      	movs	r2, #2
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	fa93 f2a3 	rbit	r2, r3
 800222e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002232:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002234:	4b6e      	ldr	r3, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 8002236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002238:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800223c:	2102      	movs	r1, #2
 800223e:	6019      	str	r1, [r3, #0]
 8002240:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	fa93 f1a3 	rbit	r1, r3
 800224a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800224e:	6019      	str	r1, [r3, #0]
  return result;
 8002250:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1b2      	bne.n	80021d8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 8157 	beq.w	8002530 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002288:	4b59      	ldr	r3, [pc, #356]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d112      	bne.n	80022ba <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002294:	4b56      	ldr	r3, [pc, #344]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	4a55      	ldr	r2, [pc, #340]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 800229a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229e:	61d3      	str	r3, [r2, #28]
 80022a0:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	f107 030c 	add.w	r3, r7, #12
 80022b2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022b4:	2301      	movs	r3, #1
 80022b6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ba:	4b4f      	ldr	r3, [pc, #316]	; (80023f8 <HAL_RCC_OscConfig+0x924>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d11a      	bne.n	80022fc <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c6:	4b4c      	ldr	r3, [pc, #304]	; (80023f8 <HAL_RCC_OscConfig+0x924>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a4b      	ldr	r2, [pc, #300]	; (80023f8 <HAL_RCC_OscConfig+0x924>)
 80022cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d2:	f7fe ffb5 	bl	8001240 <HAL_GetTick>
 80022d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022da:	e009      	b.n	80022f0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022dc:	f7fe ffb0 	bl	8001240 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b64      	cmp	r3, #100	; 0x64
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e2ff      	b.n	80028f0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	4b41      	ldr	r3, [pc, #260]	; (80023f8 <HAL_RCC_OscConfig+0x924>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0ef      	beq.n	80022dc <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d106      	bne.n	8002314 <HAL_RCC_OscConfig+0x840>
 8002306:	4b3a      	ldr	r3, [pc, #232]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4a39      	ldr	r2, [pc, #228]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6213      	str	r3, [r2, #32]
 8002312:	e02f      	b.n	8002374 <HAL_RCC_OscConfig+0x8a0>
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0x864>
 800231e:	4b34      	ldr	r3, [pc, #208]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4a33      	ldr	r2, [pc, #204]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	6213      	str	r3, [r2, #32]
 800232a:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a30      	ldr	r2, [pc, #192]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 8002330:	f023 0304 	bic.w	r3, r3, #4
 8002334:	6213      	str	r3, [r2, #32]
 8002336:	e01d      	b.n	8002374 <HAL_RCC_OscConfig+0x8a0>
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b05      	cmp	r3, #5
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x888>
 8002342:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	4a2a      	ldr	r2, [pc, #168]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	6213      	str	r3, [r2, #32]
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4a27      	ldr	r2, [pc, #156]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6213      	str	r3, [r2, #32]
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0x8a0>
 800235c:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	6213      	str	r3, [r2, #32]
 8002368:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4a20      	ldr	r2, [pc, #128]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 800236e:	f023 0304 	bic.w	r3, r3, #4
 8002372:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d06a      	beq.n	8002454 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7fe ff5f 	bl	8001240 <HAL_GetTick>
 8002382:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002386:	e00b      	b.n	80023a0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002388:	f7fe ff5a 	bl	8001240 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f241 3288 	movw	r2, #5000	; 0x1388
 8002398:	4293      	cmp	r3, r2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e2a7      	b.n	80028f0 <HAL_RCC_OscConfig+0xe1c>
 80023a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023a4:	2202      	movs	r2, #2
 80023a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	fa93 f2a3 	rbit	r2, r3
 80023b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023bc:	2202      	movs	r2, #2
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	fa93 f2a3 	rbit	r2, r3
 80023ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023ce:	601a      	str	r2, [r3, #0]
  return result;
 80023d0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d108      	bne.n	80023fc <HAL_RCC_OscConfig+0x928>
 80023ea:	4b01      	ldr	r3, [pc, #4]	; (80023f0 <HAL_RCC_OscConfig+0x91c>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	e013      	b.n	8002418 <HAL_RCC_OscConfig+0x944>
 80023f0:	40021000 	.word	0x40021000
 80023f4:	10908120 	.word	0x10908120
 80023f8:	40007000 	.word	0x40007000
 80023fc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002400:	2202      	movs	r2, #2
 8002402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	fa93 f2a3 	rbit	r2, r3
 800240e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	4bc0      	ldr	r3, [pc, #768]	; (8002718 <HAL_RCC_OscConfig+0xc44>)
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800241c:	2102      	movs	r1, #2
 800241e:	6011      	str	r1, [r2, #0]
 8002420:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	fa92 f1a2 	rbit	r1, r2
 800242a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800242e:	6011      	str	r1, [r2, #0]
  return result;
 8002430:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	fab2 f282 	clz	r2, r2
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f002 021f 	and.w	r2, r2, #31
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f202 	lsl.w	r2, r1, r2
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d09a      	beq.n	8002388 <HAL_RCC_OscConfig+0x8b4>
 8002452:	e063      	b.n	800251c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002454:	f7fe fef4 	bl	8001240 <HAL_GetTick>
 8002458:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245c:	e00b      	b.n	8002476 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7fe feef 	bl	8001240 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e23c      	b.n	80028f0 <HAL_RCC_OscConfig+0xe1c>
 8002476:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800247a:	2202      	movs	r2, #2
 800247c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	fa93 f2a3 	rbit	r2, r3
 8002488:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002492:	2202      	movs	r2, #2
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	fa93 f2a3 	rbit	r2, r3
 80024a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024a4:	601a      	str	r2, [r3, #0]
  return result;
 80024a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f043 0302 	orr.w	r3, r3, #2
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d102      	bne.n	80024c6 <HAL_RCC_OscConfig+0x9f2>
 80024c0:	4b95      	ldr	r3, [pc, #596]	; (8002718 <HAL_RCC_OscConfig+0xc44>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	e00d      	b.n	80024e2 <HAL_RCC_OscConfig+0xa0e>
 80024c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024ca:	2202      	movs	r2, #2
 80024cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	fa93 f2a3 	rbit	r2, r3
 80024d8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	4b8e      	ldr	r3, [pc, #568]	; (8002718 <HAL_RCC_OscConfig+0xc44>)
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80024e6:	2102      	movs	r1, #2
 80024e8:	6011      	str	r1, [r2, #0]
 80024ea:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	fa92 f1a2 	rbit	r1, r2
 80024f4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024f8:	6011      	str	r1, [r2, #0]
  return result;
 80024fa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	fab2 f282 	clz	r2, r2
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	f002 021f 	and.w	r2, r2, #31
 8002510:	2101      	movs	r1, #1
 8002512:	fa01 f202 	lsl.w	r2, r1, r2
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1a0      	bne.n	800245e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800251c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002520:	2b01      	cmp	r3, #1
 8002522:	d105      	bne.n	8002530 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002524:	4b7c      	ldr	r3, [pc, #496]	; (8002718 <HAL_RCC_OscConfig+0xc44>)
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	4a7b      	ldr	r2, [pc, #492]	; (8002718 <HAL_RCC_OscConfig+0xc44>)
 800252a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800252e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 81d9 	beq.w	80028ee <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800253c:	4b76      	ldr	r3, [pc, #472]	; (8002718 <HAL_RCC_OscConfig+0xc44>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b08      	cmp	r3, #8
 8002546:	f000 81a6 	beq.w	8002896 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2b02      	cmp	r3, #2
 8002552:	f040 811e 	bne.w	8002792 <HAL_RCC_OscConfig+0xcbe>
 8002556:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800255a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800255e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	fa93 f2a3 	rbit	r2, r3
 800256a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800256e:	601a      	str	r2, [r3, #0]
  return result;
 8002570:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002574:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002580:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	461a      	mov	r2, r3
 8002588:	2300      	movs	r3, #0
 800258a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7fe fe58 	bl	8001240 <HAL_GetTick>
 8002590:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002594:	e009      	b.n	80025aa <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002596:	f7fe fe53 	bl	8001240 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e1a2      	b.n	80028f0 <HAL_RCC_OscConfig+0xe1c>
 80025aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	fa93 f2a3 	rbit	r2, r3
 80025be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025c2:	601a      	str	r2, [r3, #0]
  return result;
 80025c4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	095b      	lsrs	r3, r3, #5
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d102      	bne.n	80025e4 <HAL_RCC_OscConfig+0xb10>
 80025de:	4b4e      	ldr	r3, [pc, #312]	; (8002718 <HAL_RCC_OscConfig+0xc44>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	e01b      	b.n	800261c <HAL_RCC_OscConfig+0xb48>
 80025e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	fa93 f2a3 	rbit	r2, r3
 80025f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002602:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	fa93 f2a3 	rbit	r2, r3
 8002612:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <HAL_RCC_OscConfig+0xc44>)
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002620:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002624:	6011      	str	r1, [r2, #0]
 8002626:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	fa92 f1a2 	rbit	r1, r2
 8002630:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002634:	6011      	str	r1, [r2, #0]
  return result;
 8002636:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	fab2 f282 	clz	r2, r2
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	f042 0220 	orr.w	r2, r2, #32
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	f002 021f 	and.w	r2, r2, #31
 800264c:	2101      	movs	r1, #1
 800264e:	fa01 f202 	lsl.w	r2, r1, r2
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d19e      	bne.n	8002596 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002658:	4b2f      	ldr	r3, [pc, #188]	; (8002718 <HAL_RCC_OscConfig+0xc44>)
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	f023 020f 	bic.w	r2, r3, #15
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	492c      	ldr	r1, [pc, #176]	; (8002718 <HAL_RCC_OscConfig+0xc44>)
 8002668:	4313      	orrs	r3, r2
 800266a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800266c:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <HAL_RCC_OscConfig+0xc44>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6a19      	ldr	r1, [r3, #32]
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	430b      	orrs	r3, r1
 8002682:	4925      	ldr	r1, [pc, #148]	; (8002718 <HAL_RCC_OscConfig+0xc44>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
 8002688:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800268c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026a0:	601a      	str	r2, [r3, #0]
  return result;
 80026a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026a6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	461a      	mov	r2, r3
 80026ba:	2301      	movs	r3, #1
 80026bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7fe fdbf 	bl	8001240 <HAL_GetTick>
 80026c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c6:	e009      	b.n	80026dc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe fdba 	bl	8001240 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e109      	b.n	80028f0 <HAL_RCC_OscConfig+0xe1c>
 80026dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f2a3 	rbit	r2, r3
 80026f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026f4:	601a      	str	r2, [r3, #0]
  return result;
 80026f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b01      	cmp	r3, #1
 800270e:	d105      	bne.n	800271c <HAL_RCC_OscConfig+0xc48>
 8002710:	4b01      	ldr	r3, [pc, #4]	; (8002718 <HAL_RCC_OscConfig+0xc44>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	e01e      	b.n	8002754 <HAL_RCC_OscConfig+0xc80>
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002720:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	fa93 f2a3 	rbit	r2, r3
 8002730:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800273a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	fa93 f2a3 	rbit	r2, r3
 800274a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	4b6a      	ldr	r3, [pc, #424]	; (80028fc <HAL_RCC_OscConfig+0xe28>)
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002758:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800275c:	6011      	str	r1, [r2, #0]
 800275e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	fa92 f1a2 	rbit	r1, r2
 8002768:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800276c:	6011      	str	r1, [r2, #0]
  return result;
 800276e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	fab2 f282 	clz	r2, r2
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	f042 0220 	orr.w	r2, r2, #32
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	f002 021f 	and.w	r2, r2, #31
 8002784:	2101      	movs	r1, #1
 8002786:	fa01 f202 	lsl.w	r2, r1, r2
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d09b      	beq.n	80026c8 <HAL_RCC_OscConfig+0xbf4>
 8002790:	e0ad      	b.n	80028ee <HAL_RCC_OscConfig+0xe1a>
 8002792:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002796:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800279a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fa93 f2a3 	rbit	r2, r3
 80027a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027aa:	601a      	str	r2, [r3, #0]
  return result;
 80027ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	461a      	mov	r2, r3
 80027c4:	2300      	movs	r3, #0
 80027c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7fe fd3a 	bl	8001240 <HAL_GetTick>
 80027cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d0:	e009      	b.n	80027e6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d2:	f7fe fd35 	bl	8001240 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e084      	b.n	80028f0 <HAL_RCC_OscConfig+0xe1c>
 80027e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	fa93 f2a3 	rbit	r2, r3
 80027fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027fe:	601a      	str	r2, [r3, #0]
  return result;
 8002800:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002804:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d102      	bne.n	8002820 <HAL_RCC_OscConfig+0xd4c>
 800281a:	4b38      	ldr	r3, [pc, #224]	; (80028fc <HAL_RCC_OscConfig+0xe28>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	e01b      	b.n	8002858 <HAL_RCC_OscConfig+0xd84>
 8002820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002824:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	fa93 f2a3 	rbit	r2, r3
 8002834:	f107 0320 	add.w	r3, r7, #32
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	fa93 f2a3 	rbit	r2, r3
 800284e:	f107 0318 	add.w	r3, r7, #24
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	4b29      	ldr	r3, [pc, #164]	; (80028fc <HAL_RCC_OscConfig+0xe28>)
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	f107 0214 	add.w	r2, r7, #20
 800285c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002860:	6011      	str	r1, [r2, #0]
 8002862:	f107 0214 	add.w	r2, r7, #20
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	fa92 f1a2 	rbit	r1, r2
 800286c:	f107 0210 	add.w	r2, r7, #16
 8002870:	6011      	str	r1, [r2, #0]
  return result;
 8002872:	f107 0210 	add.w	r2, r7, #16
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	fab2 f282 	clz	r2, r2
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f042 0220 	orr.w	r2, r2, #32
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	f002 021f 	and.w	r2, r2, #31
 8002888:	2101      	movs	r1, #1
 800288a:	fa01 f202 	lsl.w	r2, r1, r2
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d19e      	bne.n	80027d2 <HAL_RCC_OscConfig+0xcfe>
 8002894:	e02b      	b.n	80028ee <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e025      	b.n	80028f0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028a4:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_RCC_OscConfig+0xe28>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <HAL_RCC_OscConfig+0xe28>)
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028b8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d111      	bne.n	80028ea <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80028c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d108      	bne.n	80028ea <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80028d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028dc:	f003 020f 	and.w	r2, r3, #15
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000

08002900 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b09e      	sub	sp, #120	; 0x78
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e162      	b.n	8002bde <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4b90      	ldr	r3, [pc, #576]	; (8002b5c <HAL_RCC_ClockConfig+0x25c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d910      	bls.n	8002948 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b8d      	ldr	r3, [pc, #564]	; (8002b5c <HAL_RCC_ClockConfig+0x25c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 0207 	bic.w	r2, r3, #7
 800292e:	498b      	ldr	r1, [pc, #556]	; (8002b5c <HAL_RCC_ClockConfig+0x25c>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b89      	ldr	r3, [pc, #548]	; (8002b5c <HAL_RCC_ClockConfig+0x25c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e14a      	b.n	8002bde <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002954:	4b82      	ldr	r3, [pc, #520]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	497f      	ldr	r1, [pc, #508]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80dc 	beq.w	8002b2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d13c      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xf6>
 800297c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002980:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002984:	fa93 f3a3 	rbit	r3, r3
 8002988:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800298a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d102      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xa6>
 80029a0:	4b6f      	ldr	r3, [pc, #444]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	e00f      	b.n	80029c6 <HAL_RCC_ClockConfig+0xc6>
 80029a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	667b      	str	r3, [r7, #100]	; 0x64
 80029b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029b8:	663b      	str	r3, [r7, #96]	; 0x60
 80029ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029c2:	4b67      	ldr	r3, [pc, #412]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80029cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029ce:	fa92 f2a2 	rbit	r2, r2
 80029d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80029d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029d6:	fab2 f282 	clz	r2, r2
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	f042 0220 	orr.w	r2, r2, #32
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	f002 021f 	and.w	r2, r2, #31
 80029e6:	2101      	movs	r1, #1
 80029e8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d17b      	bne.n	8002aea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0f3      	b.n	8002bde <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d13c      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x178>
 80029fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d102      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x128>
 8002a22:	4b4f      	ldr	r3, [pc, #316]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	e00f      	b.n	8002a48 <HAL_RCC_ClockConfig+0x148>
 8002a28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	647b      	str	r3, [r7, #68]	; 0x44
 8002a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a3a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a44:	4b46      	ldr	r3, [pc, #280]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a50:	fa92 f2a2 	rbit	r2, r2
 8002a54:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a58:	fab2 f282 	clz	r2, r2
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	f042 0220 	orr.w	r2, r2, #32
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	f002 021f 	and.w	r2, r2, #31
 8002a68:	2101      	movs	r1, #1
 8002a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d13a      	bne.n	8002aea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0b2      	b.n	8002bde <HAL_RCC_ClockConfig+0x2de>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d102      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x1a0>
 8002a9a:	4b31      	ldr	r3, [pc, #196]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	e00d      	b.n	8002abc <HAL_RCC_ClockConfig+0x1bc>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8002aac:	2302      	movs	r3, #2
 8002aae:	623b      	str	r3, [r7, #32]
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	61fb      	str	r3, [r7, #28]
 8002ab8:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	2202      	movs	r2, #2
 8002abe:	61ba      	str	r2, [r7, #24]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	fa92 f2a2 	rbit	r2, r2
 8002ac6:	617a      	str	r2, [r7, #20]
  return result;
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	fab2 f282 	clz	r2, r2
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	f042 0220 	orr.w	r2, r2, #32
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	f002 021f 	and.w	r2, r2, #31
 8002ada:	2101      	movs	r1, #1
 8002adc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e079      	b.n	8002bde <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aea:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f023 0203 	bic.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	491a      	ldr	r1, [pc, #104]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002afc:	f7fe fba0 	bl	8001240 <HAL_GetTick>
 8002b00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b04:	f7fe fb9c 	bl	8001240 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e061      	b.n	8002bde <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 020c 	and.w	r2, r3, #12
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d1eb      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCC_ClockConfig+0x25c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d214      	bcs.n	8002b64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_RCC_ClockConfig+0x25c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 0207 	bic.w	r2, r3, #7
 8002b42:	4906      	ldr	r1, [pc, #24]	; (8002b5c <HAL_RCC_ClockConfig+0x25c>)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <HAL_RCC_ClockConfig+0x25c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e040      	b.n	8002bde <HAL_RCC_ClockConfig+0x2de>
 8002b5c:	40022000 	.word	0x40022000
 8002b60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	491a      	ldr	r1, [pc, #104]	; (8002be8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b8e:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4912      	ldr	r1, [pc, #72]	; (8002be8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ba2:	f000 f829 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 8002ba6:	4601      	mov	r1, r0
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <HAL_RCC_ClockConfig+0x2e8>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb0:	22f0      	movs	r2, #240	; 0xf0
 8002bb2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	fa92 f2a2 	rbit	r2, r2
 8002bba:	60fa      	str	r2, [r7, #12]
  return result;
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	fab2 f282 	clz	r2, r2
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	40d3      	lsrs	r3, r2
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <HAL_RCC_ClockConfig+0x2ec>)
 8002bc8:	5cd3      	ldrb	r3, [r2, r3]
 8002bca:	fa21 f303 	lsr.w	r3, r1, r3
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <HAL_RCC_ClockConfig+0x2f0>)
 8002bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <HAL_RCC_ClockConfig+0x2f4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe faee 	bl	80011b8 <HAL_InitTick>
  
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3778      	adds	r7, #120	; 0x78
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	0800474c 	.word	0x0800474c
 8002bf0:	20000000 	.word	0x20000000
 8002bf4:	20000004 	.word	0x20000004

08002bf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b08b      	sub	sp, #44	; 0x2c
 8002bfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c12:	4b2a      	ldr	r3, [pc, #168]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d002      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x30>
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d003      	beq.n	8002c2e <HAL_RCC_GetSysClockFreq+0x36>
 8002c26:	e03f      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c2a:	623b      	str	r3, [r7, #32]
      break;
 8002c2c:	e03f      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	fa92 f2a2 	rbit	r2, r2
 8002c40:	607a      	str	r2, [r7, #4]
  return result;
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	fab2 f282 	clz	r2, r2
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	40d3      	lsrs	r3, r2
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c52:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	220f      	movs	r2, #15
 8002c5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	fa92 f2a2 	rbit	r2, r2
 8002c64:	60fa      	str	r2, [r7, #12]
  return result;
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	fab2 f282 	clz	r2, r2
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	40d3      	lsrs	r3, r2
 8002c70:	4a15      	ldr	r2, [pc, #84]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c72:	5cd3      	ldrb	r3, [r2, r3]
 8002c74:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c80:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c90:	e007      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c92:	4a0b      	ldr	r2, [pc, #44]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	623b      	str	r3, [r7, #32]
      break;
 8002ca6:	e002      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002caa:	623b      	str	r3, [r7, #32]
      break;
 8002cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cae:	6a3b      	ldr	r3, [r7, #32]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	372c      	adds	r7, #44	; 0x2c
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	007a1200 	.word	0x007a1200
 8002cc4:	0800475c 	.word	0x0800475c
 8002cc8:	0800476c 	.word	0x0800476c

08002ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b092      	sub	sp, #72	; 0x48
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80d4 	beq.w	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf0:	4b4e      	ldr	r3, [pc, #312]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10e      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfc:	4b4b      	ldr	r3, [pc, #300]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	4a4a      	ldr	r2, [pc, #296]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d06:	61d3      	str	r3, [r2, #28]
 8002d08:	4b48      	ldr	r3, [pc, #288]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1a:	4b45      	ldr	r3, [pc, #276]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d118      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d26:	4b42      	ldr	r3, [pc, #264]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a41      	ldr	r2, [pc, #260]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d32:	f7fe fa85 	bl	8001240 <HAL_GetTick>
 8002d36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	e008      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3a:	f7fe fa81 	bl	8001240 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b64      	cmp	r3, #100	; 0x64
 8002d46:	d901      	bls.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e1d6      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	4b38      	ldr	r3, [pc, #224]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d58:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8084 	beq.w	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d07c      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d78:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b26      	ldr	r3, [pc, #152]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	461a      	mov	r2, r3
 8002da2:	2301      	movs	r3, #1
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002daa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dca:	4a18      	ldr	r2, [pc, #96]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d04b      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe fa31 	bl	8001240 <HAL_GetTick>
 8002dde:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7fe fa2d 	bl	8001240 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e180      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
 8002e04:	2302      	movs	r3, #2
 8002e06:	623b      	str	r3, [r7, #32]
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	61fb      	str	r3, [r7, #28]
  return result;
 8002e10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f043 0302 	orr.w	r3, r3, #2
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d108      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e26:	4b01      	ldr	r3, [pc, #4]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	e00d      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40007000 	.word	0x40007000
 8002e34:	10908100 	.word	0x10908100
 8002e38:	2302      	movs	r3, #2
 8002e3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	4ba0      	ldr	r3, [pc, #640]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	2202      	movs	r2, #2
 8002e4a:	613a      	str	r2, [r7, #16]
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	fa92 f2a2 	rbit	r2, r2
 8002e52:	60fa      	str	r2, [r7, #12]
  return result;
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	fab2 f282 	clz	r2, r2
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f002 021f 	and.w	r2, r2, #31
 8002e66:	2101      	movs	r1, #1
 8002e68:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0b7      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e72:	4b95      	ldr	r3, [pc, #596]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4992      	ldr	r1, [pc, #584]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8c:	4b8e      	ldr	r3, [pc, #568]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	4a8d      	ldr	r2, [pc, #564]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea4:	4b88      	ldr	r3, [pc, #544]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	f023 0203 	bic.w	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4985      	ldr	r1, [pc, #532]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ec2:	4b81      	ldr	r3, [pc, #516]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	497e      	ldr	r1, [pc, #504]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ee0:	4b79      	ldr	r3, [pc, #484]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	4976      	ldr	r1, [pc, #472]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002efe:	4b72      	ldr	r3, [pc, #456]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f023 0210 	bic.w	r2, r3, #16
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	496f      	ldr	r1, [pc, #444]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f1c:	4b6a      	ldr	r3, [pc, #424]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	4967      	ldr	r1, [pc, #412]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f3a:	4b63      	ldr	r3, [pc, #396]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f023 0220 	bic.w	r2, r3, #32
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	4960      	ldr	r1, [pc, #384]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f58:	4b5b      	ldr	r3, [pc, #364]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	4958      	ldr	r1, [pc, #352]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f76:	4b54      	ldr	r3, [pc, #336]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	4951      	ldr	r1, [pc, #324]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f94:	4b4c      	ldr	r3, [pc, #304]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	4949      	ldr	r1, [pc, #292]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fb2:	4b45      	ldr	r3, [pc, #276]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	4942      	ldr	r1, [pc, #264]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fd0:	4b3d      	ldr	r3, [pc, #244]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	493a      	ldr	r1, [pc, #232]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002fee:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	4933      	ldr	r1, [pc, #204]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800300c:	4b2e      	ldr	r3, [pc, #184]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003018:	492b      	ldr	r1, [pc, #172]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800302a:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4924      	ldr	r1, [pc, #144]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003038:	4313      	orrs	r3, r2
 800303a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003048:	4b1f      	ldr	r3, [pc, #124]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003054:	491c      	ldr	r1, [pc, #112]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003066:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003072:	4915      	ldr	r1, [pc, #84]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003074:	4313      	orrs	r3, r2
 8003076:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003084:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	490d      	ldr	r1, [pc, #52]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003092:	4313      	orrs	r3, r2
 8003094:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ae:	4906      	ldr	r1, [pc, #24]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00c      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80030c0:	4b01      	ldr	r3, [pc, #4]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	e002      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x400>
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d4:	490b      	ldr	r1, [pc, #44]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80030e6:	4b07      	ldr	r3, [pc, #28]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f2:	4904      	ldr	r1, [pc, #16]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3748      	adds	r7, #72	; 0x48
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000

08003108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e049      	b.n	80031ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd ff1a 	bl	8000f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3304      	adds	r3, #4
 8003144:	4619      	mov	r1, r3
 8003146:	4610      	mov	r0, r2
 8003148:	f000 fd30 	bl	8003bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d001      	beq.n	80031d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e04f      	b.n	8003270 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a23      	ldr	r2, [pc, #140]	; (800327c <HAL_TIM_Base_Start_IT+0xc4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01d      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x76>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fa:	d018      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x76>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_TIM_Base_Start_IT+0xc8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x76>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1e      	ldr	r2, [pc, #120]	; (8003284 <HAL_TIM_Base_Start_IT+0xcc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00e      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x76>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <HAL_TIM_Base_Start_IT+0xd0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x76>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1b      	ldr	r2, [pc, #108]	; (800328c <HAL_TIM_Base_Start_IT+0xd4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d004      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x76>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a19      	ldr	r2, [pc, #100]	; (8003290 <HAL_TIM_Base_Start_IT+0xd8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d115      	bne.n	800325a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4b17      	ldr	r3, [pc, #92]	; (8003294 <HAL_TIM_Base_Start_IT+0xdc>)
 8003236:	4013      	ands	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b06      	cmp	r3, #6
 800323e:	d015      	beq.n	800326c <HAL_TIM_Base_Start_IT+0xb4>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003246:	d011      	beq.n	800326c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003258:	e008      	b.n	800326c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0201 	orr.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	e000      	b.n	800326e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40013400 	.word	0x40013400
 800328c:	40014000 	.word	0x40014000
 8003290:	40015000 	.word	0x40015000
 8003294:	00010007 	.word	0x00010007

08003298 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e049      	b.n	800333e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd fe1e 	bl	8000f00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f000 fc68 	bl	8003bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d109      	bne.n	800336c <HAL_TIM_PWM_Start+0x24>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	bf14      	ite	ne
 8003364:	2301      	movne	r3, #1
 8003366:	2300      	moveq	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	e03c      	b.n	80033e6 <HAL_TIM_PWM_Start+0x9e>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b04      	cmp	r3, #4
 8003370:	d109      	bne.n	8003386 <HAL_TIM_PWM_Start+0x3e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	bf14      	ite	ne
 800337e:	2301      	movne	r3, #1
 8003380:	2300      	moveq	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	e02f      	b.n	80033e6 <HAL_TIM_PWM_Start+0x9e>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b08      	cmp	r3, #8
 800338a:	d109      	bne.n	80033a0 <HAL_TIM_PWM_Start+0x58>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	bf14      	ite	ne
 8003398:	2301      	movne	r3, #1
 800339a:	2300      	moveq	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e022      	b.n	80033e6 <HAL_TIM_PWM_Start+0x9e>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b0c      	cmp	r3, #12
 80033a4:	d109      	bne.n	80033ba <HAL_TIM_PWM_Start+0x72>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	bf14      	ite	ne
 80033b2:	2301      	movne	r3, #1
 80033b4:	2300      	moveq	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	e015      	b.n	80033e6 <HAL_TIM_PWM_Start+0x9e>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d109      	bne.n	80033d4 <HAL_TIM_PWM_Start+0x8c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	bf14      	ite	ne
 80033cc:	2301      	movne	r3, #1
 80033ce:	2300      	moveq	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	e008      	b.n	80033e6 <HAL_TIM_PWM_Start+0x9e>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e0a1      	b.n	8003532 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d104      	bne.n	80033fe <HAL_TIM_PWM_Start+0xb6>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033fc:	e023      	b.n	8003446 <HAL_TIM_PWM_Start+0xfe>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b04      	cmp	r3, #4
 8003402:	d104      	bne.n	800340e <HAL_TIM_PWM_Start+0xc6>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800340c:	e01b      	b.n	8003446 <HAL_TIM_PWM_Start+0xfe>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b08      	cmp	r3, #8
 8003412:	d104      	bne.n	800341e <HAL_TIM_PWM_Start+0xd6>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800341c:	e013      	b.n	8003446 <HAL_TIM_PWM_Start+0xfe>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b0c      	cmp	r3, #12
 8003422:	d104      	bne.n	800342e <HAL_TIM_PWM_Start+0xe6>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800342c:	e00b      	b.n	8003446 <HAL_TIM_PWM_Start+0xfe>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b10      	cmp	r3, #16
 8003432:	d104      	bne.n	800343e <HAL_TIM_PWM_Start+0xf6>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800343c:	e003      	b.n	8003446 <HAL_TIM_PWM_Start+0xfe>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2202      	movs	r2, #2
 8003442:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2201      	movs	r2, #1
 800344c:	6839      	ldr	r1, [r7, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f000 ffea 	bl	8004428 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a38      	ldr	r2, [pc, #224]	; (800353c <HAL_TIM_PWM_Start+0x1f4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d018      	beq.n	8003490 <HAL_TIM_PWM_Start+0x148>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a37      	ldr	r2, [pc, #220]	; (8003540 <HAL_TIM_PWM_Start+0x1f8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d013      	beq.n	8003490 <HAL_TIM_PWM_Start+0x148>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a35      	ldr	r2, [pc, #212]	; (8003544 <HAL_TIM_PWM_Start+0x1fc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00e      	beq.n	8003490 <HAL_TIM_PWM_Start+0x148>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a34      	ldr	r2, [pc, #208]	; (8003548 <HAL_TIM_PWM_Start+0x200>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d009      	beq.n	8003490 <HAL_TIM_PWM_Start+0x148>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a32      	ldr	r2, [pc, #200]	; (800354c <HAL_TIM_PWM_Start+0x204>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d004      	beq.n	8003490 <HAL_TIM_PWM_Start+0x148>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a31      	ldr	r2, [pc, #196]	; (8003550 <HAL_TIM_PWM_Start+0x208>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d101      	bne.n	8003494 <HAL_TIM_PWM_Start+0x14c>
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_TIM_PWM_Start+0x14e>
 8003494:	2300      	movs	r3, #0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d007      	beq.n	80034aa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a23      	ldr	r2, [pc, #140]	; (800353c <HAL_TIM_PWM_Start+0x1f4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d01d      	beq.n	80034f0 <HAL_TIM_PWM_Start+0x1a8>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034bc:	d018      	beq.n	80034f0 <HAL_TIM_PWM_Start+0x1a8>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a24      	ldr	r2, [pc, #144]	; (8003554 <HAL_TIM_PWM_Start+0x20c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d013      	beq.n	80034f0 <HAL_TIM_PWM_Start+0x1a8>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a22      	ldr	r2, [pc, #136]	; (8003558 <HAL_TIM_PWM_Start+0x210>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00e      	beq.n	80034f0 <HAL_TIM_PWM_Start+0x1a8>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1a      	ldr	r2, [pc, #104]	; (8003540 <HAL_TIM_PWM_Start+0x1f8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d009      	beq.n	80034f0 <HAL_TIM_PWM_Start+0x1a8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a18      	ldr	r2, [pc, #96]	; (8003544 <HAL_TIM_PWM_Start+0x1fc>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_TIM_PWM_Start+0x1a8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a19      	ldr	r2, [pc, #100]	; (8003550 <HAL_TIM_PWM_Start+0x208>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d115      	bne.n	800351c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_TIM_PWM_Start+0x214>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b06      	cmp	r3, #6
 8003500:	d015      	beq.n	800352e <HAL_TIM_PWM_Start+0x1e6>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003508:	d011      	beq.n	800352e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0201 	orr.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351a:	e008      	b.n	800352e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e000      	b.n	8003530 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40013400 	.word	0x40013400
 8003544:	40014000 	.word	0x40014000
 8003548:	40014400 	.word	0x40014400
 800354c:	40014800 	.word	0x40014800
 8003550:	40015000 	.word	0x40015000
 8003554:	40000400 	.word	0x40000400
 8003558:	40000800 	.word	0x40000800
 800355c:	00010007 	.word	0x00010007

08003560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b02      	cmp	r3, #2
 8003574:	d122      	bne.n	80035bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b02      	cmp	r3, #2
 8003582:	d11b      	bne.n	80035bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0202 	mvn.w	r2, #2
 800358c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fae3 	bl	8003b6e <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fad5 	bl	8003b5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fae6 	bl	8003b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d122      	bne.n	8003610 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d11b      	bne.n	8003610 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0204 	mvn.w	r2, #4
 80035e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2202      	movs	r2, #2
 80035e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fab9 	bl	8003b6e <HAL_TIM_IC_CaptureCallback>
 80035fc:	e005      	b.n	800360a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 faab 	bl	8003b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fabc 	bl	8003b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b08      	cmp	r3, #8
 800361c:	d122      	bne.n	8003664 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b08      	cmp	r3, #8
 800362a:	d11b      	bne.n	8003664 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0208 	mvn.w	r2, #8
 8003634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2204      	movs	r2, #4
 800363a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fa8f 	bl	8003b6e <HAL_TIM_IC_CaptureCallback>
 8003650:	e005      	b.n	800365e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fa81 	bl	8003b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fa92 	bl	8003b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b10      	cmp	r3, #16
 8003670:	d122      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b10      	cmp	r3, #16
 800367e:	d11b      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0210 	mvn.w	r2, #16
 8003688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2208      	movs	r2, #8
 800368e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fa65 	bl	8003b6e <HAL_TIM_IC_CaptureCallback>
 80036a4:	e005      	b.n	80036b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fa57 	bl	8003b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fa68 	bl	8003b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d10e      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d107      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0201 	mvn.w	r2, #1
 80036dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fd f82a 	bl	8000738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ee:	2b80      	cmp	r3, #128	; 0x80
 80036f0:	d10e      	bne.n	8003710 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fc:	2b80      	cmp	r3, #128	; 0x80
 80036fe:	d107      	bne.n	8003710 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 ffce 	bl	80046ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800371e:	d10e      	bne.n	800373e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	2b80      	cmp	r3, #128	; 0x80
 800372c:	d107      	bne.n	800373e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 ffc1 	bl	80046c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003748:	2b40      	cmp	r3, #64	; 0x40
 800374a:	d10e      	bne.n	800376a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d107      	bne.n	800376a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fa16 	bl	8003b96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b20      	cmp	r3, #32
 8003776:	d10e      	bne.n	8003796 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b20      	cmp	r3, #32
 8003784:	d107      	bne.n	8003796 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f06f 0220 	mvn.w	r2, #32
 800378e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 ff81 	bl	8004698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e0ff      	b.n	80039be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b14      	cmp	r3, #20
 80037ca:	f200 80f0 	bhi.w	80039ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80037ce:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	08003829 	.word	0x08003829
 80037d8:	080039af 	.word	0x080039af
 80037dc:	080039af 	.word	0x080039af
 80037e0:	080039af 	.word	0x080039af
 80037e4:	08003869 	.word	0x08003869
 80037e8:	080039af 	.word	0x080039af
 80037ec:	080039af 	.word	0x080039af
 80037f0:	080039af 	.word	0x080039af
 80037f4:	080038ab 	.word	0x080038ab
 80037f8:	080039af 	.word	0x080039af
 80037fc:	080039af 	.word	0x080039af
 8003800:	080039af 	.word	0x080039af
 8003804:	080038eb 	.word	0x080038eb
 8003808:	080039af 	.word	0x080039af
 800380c:	080039af 	.word	0x080039af
 8003810:	080039af 	.word	0x080039af
 8003814:	0800392d 	.word	0x0800392d
 8003818:	080039af 	.word	0x080039af
 800381c:	080039af 	.word	0x080039af
 8003820:	080039af 	.word	0x080039af
 8003824:	0800396d 	.word	0x0800396d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fa5a 	bl	8003ce8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0208 	orr.w	r2, r2, #8
 8003842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0204 	bic.w	r2, r2, #4
 8003852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6999      	ldr	r1, [r3, #24]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	619a      	str	r2, [r3, #24]
      break;
 8003866:	e0a5      	b.n	80039b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fad4 	bl	8003e1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6999      	ldr	r1, [r3, #24]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	021a      	lsls	r2, r3, #8
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	619a      	str	r2, [r3, #24]
      break;
 80038a8:	e084      	b.n	80039b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68b9      	ldr	r1, [r7, #8]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fb47 	bl	8003f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69da      	ldr	r2, [r3, #28]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0208 	orr.w	r2, r2, #8
 80038c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0204 	bic.w	r2, r2, #4
 80038d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69d9      	ldr	r1, [r3, #28]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	61da      	str	r2, [r3, #28]
      break;
 80038e8:	e064      	b.n	80039b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68b9      	ldr	r1, [r7, #8]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fbb9 	bl	8004068 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69da      	ldr	r2, [r3, #28]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69d9      	ldr	r1, [r3, #28]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	021a      	lsls	r2, r3, #8
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	61da      	str	r2, [r3, #28]
      break;
 800392a:	e043      	b.n	80039b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fc08 	bl	8004148 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0208 	orr.w	r2, r2, #8
 8003946:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0204 	bic.w	r2, r2, #4
 8003956:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800396a:	e023      	b.n	80039b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fc52 	bl	800421c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003986:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003996:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	021a      	lsls	r2, r3, #8
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039ac:	e002      	b.n	80039b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	75fb      	strb	r3, [r7, #23]
      break;
 80039b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop

080039c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_TIM_ConfigClockSource+0x1c>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e0b6      	b.n	8003b52 <HAL_TIM_ConfigClockSource+0x18a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a20:	d03e      	beq.n	8003aa0 <HAL_TIM_ConfigClockSource+0xd8>
 8003a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a26:	f200 8087 	bhi.w	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2e:	f000 8086 	beq.w	8003b3e <HAL_TIM_ConfigClockSource+0x176>
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a36:	d87f      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a38:	2b70      	cmp	r3, #112	; 0x70
 8003a3a:	d01a      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0xaa>
 8003a3c:	2b70      	cmp	r3, #112	; 0x70
 8003a3e:	d87b      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a40:	2b60      	cmp	r3, #96	; 0x60
 8003a42:	d050      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0x11e>
 8003a44:	2b60      	cmp	r3, #96	; 0x60
 8003a46:	d877      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a48:	2b50      	cmp	r3, #80	; 0x50
 8003a4a:	d03c      	beq.n	8003ac6 <HAL_TIM_ConfigClockSource+0xfe>
 8003a4c:	2b50      	cmp	r3, #80	; 0x50
 8003a4e:	d873      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d058      	beq.n	8003b06 <HAL_TIM_ConfigClockSource+0x13e>
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d86f      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a58:	2b30      	cmp	r3, #48	; 0x30
 8003a5a:	d064      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15e>
 8003a5c:	2b30      	cmp	r3, #48	; 0x30
 8003a5e:	d86b      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d060      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15e>
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d867      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d05c      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15e>
 8003a6c:	2b10      	cmp	r3, #16
 8003a6e:	d05a      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15e>
 8003a70:	e062      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6899      	ldr	r1, [r3, #8]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f000 fcb1 	bl	80043e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	609a      	str	r2, [r3, #8]
      break;
 8003a9e:	e04f      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6899      	ldr	r1, [r3, #8]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f000 fc9a 	bl	80043e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ac2:	609a      	str	r2, [r3, #8]
      break;
 8003ac4:	e03c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	6859      	ldr	r1, [r3, #4]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f000 fc0e 	bl	80042f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2150      	movs	r1, #80	; 0x50
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fc67 	bl	80043b2 <TIM_ITRx_SetConfig>
      break;
 8003ae4:	e02c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6859      	ldr	r1, [r3, #4]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f000 fc2d 	bl	8004352 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2160      	movs	r1, #96	; 0x60
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fc57 	bl	80043b2 <TIM_ITRx_SetConfig>
      break;
 8003b04:	e01c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6859      	ldr	r1, [r3, #4]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f000 fbee 	bl	80042f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2140      	movs	r1, #64	; 0x40
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fc47 	bl	80043b2 <TIM_ITRx_SetConfig>
      break;
 8003b24:	e00c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f000 fc3e 	bl	80043b2 <TIM_ITRx_SetConfig>
      break;
 8003b36:	e003      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b3c:	e000      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
	...

08003bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a42      	ldr	r2, [pc, #264]	; (8003cc8 <TIM_Base_SetConfig+0x11c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d013      	beq.n	8003bec <TIM_Base_SetConfig+0x40>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bca:	d00f      	beq.n	8003bec <TIM_Base_SetConfig+0x40>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a3f      	ldr	r2, [pc, #252]	; (8003ccc <TIM_Base_SetConfig+0x120>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00b      	beq.n	8003bec <TIM_Base_SetConfig+0x40>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a3e      	ldr	r2, [pc, #248]	; (8003cd0 <TIM_Base_SetConfig+0x124>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d007      	beq.n	8003bec <TIM_Base_SetConfig+0x40>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a3d      	ldr	r2, [pc, #244]	; (8003cd4 <TIM_Base_SetConfig+0x128>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <TIM_Base_SetConfig+0x40>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a3c      	ldr	r2, [pc, #240]	; (8003cd8 <TIM_Base_SetConfig+0x12c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d108      	bne.n	8003bfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a31      	ldr	r2, [pc, #196]	; (8003cc8 <TIM_Base_SetConfig+0x11c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d01f      	beq.n	8003c46 <TIM_Base_SetConfig+0x9a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0c:	d01b      	beq.n	8003c46 <TIM_Base_SetConfig+0x9a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a2e      	ldr	r2, [pc, #184]	; (8003ccc <TIM_Base_SetConfig+0x120>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d017      	beq.n	8003c46 <TIM_Base_SetConfig+0x9a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a2d      	ldr	r2, [pc, #180]	; (8003cd0 <TIM_Base_SetConfig+0x124>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <TIM_Base_SetConfig+0x9a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a2c      	ldr	r2, [pc, #176]	; (8003cd4 <TIM_Base_SetConfig+0x128>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00f      	beq.n	8003c46 <TIM_Base_SetConfig+0x9a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a2c      	ldr	r2, [pc, #176]	; (8003cdc <TIM_Base_SetConfig+0x130>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00b      	beq.n	8003c46 <TIM_Base_SetConfig+0x9a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a2b      	ldr	r2, [pc, #172]	; (8003ce0 <TIM_Base_SetConfig+0x134>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <TIM_Base_SetConfig+0x9a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a2a      	ldr	r2, [pc, #168]	; (8003ce4 <TIM_Base_SetConfig+0x138>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <TIM_Base_SetConfig+0x9a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a25      	ldr	r2, [pc, #148]	; (8003cd8 <TIM_Base_SetConfig+0x12c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d108      	bne.n	8003c58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <TIM_Base_SetConfig+0x11c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d013      	beq.n	8003cac <TIM_Base_SetConfig+0x100>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a13      	ldr	r2, [pc, #76]	; (8003cd4 <TIM_Base_SetConfig+0x128>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00f      	beq.n	8003cac <TIM_Base_SetConfig+0x100>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <TIM_Base_SetConfig+0x130>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00b      	beq.n	8003cac <TIM_Base_SetConfig+0x100>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <TIM_Base_SetConfig+0x134>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d007      	beq.n	8003cac <TIM_Base_SetConfig+0x100>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a11      	ldr	r2, [pc, #68]	; (8003ce4 <TIM_Base_SetConfig+0x138>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d003      	beq.n	8003cac <TIM_Base_SetConfig+0x100>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a0c      	ldr	r2, [pc, #48]	; (8003cd8 <TIM_Base_SetConfig+0x12c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d103      	bne.n	8003cb4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	615a      	str	r2, [r3, #20]
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40012c00 	.word	0x40012c00
 8003ccc:	40000400 	.word	0x40000400
 8003cd0:	40000800 	.word	0x40000800
 8003cd4:	40013400 	.word	0x40013400
 8003cd8:	40015000 	.word	0x40015000
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40014400 	.word	0x40014400
 8003ce4:	40014800 	.word	0x40014800

08003ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0303 	bic.w	r3, r3, #3
 8003d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f023 0302 	bic.w	r3, r3, #2
 8003d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a30      	ldr	r2, [pc, #192]	; (8003e04 <TIM_OC1_SetConfig+0x11c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d013      	beq.n	8003d70 <TIM_OC1_SetConfig+0x88>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a2f      	ldr	r2, [pc, #188]	; (8003e08 <TIM_OC1_SetConfig+0x120>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00f      	beq.n	8003d70 <TIM_OC1_SetConfig+0x88>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a2e      	ldr	r2, [pc, #184]	; (8003e0c <TIM_OC1_SetConfig+0x124>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00b      	beq.n	8003d70 <TIM_OC1_SetConfig+0x88>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a2d      	ldr	r2, [pc, #180]	; (8003e10 <TIM_OC1_SetConfig+0x128>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <TIM_OC1_SetConfig+0x88>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a2c      	ldr	r2, [pc, #176]	; (8003e14 <TIM_OC1_SetConfig+0x12c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_OC1_SetConfig+0x88>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a2b      	ldr	r2, [pc, #172]	; (8003e18 <TIM_OC1_SetConfig+0x130>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d10c      	bne.n	8003d8a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0308 	bic.w	r3, r3, #8
 8003d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f023 0304 	bic.w	r3, r3, #4
 8003d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	; (8003e04 <TIM_OC1_SetConfig+0x11c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <TIM_OC1_SetConfig+0xd2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1c      	ldr	r2, [pc, #112]	; (8003e08 <TIM_OC1_SetConfig+0x120>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00f      	beq.n	8003dba <TIM_OC1_SetConfig+0xd2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1b      	ldr	r2, [pc, #108]	; (8003e0c <TIM_OC1_SetConfig+0x124>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00b      	beq.n	8003dba <TIM_OC1_SetConfig+0xd2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1a      	ldr	r2, [pc, #104]	; (8003e10 <TIM_OC1_SetConfig+0x128>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d007      	beq.n	8003dba <TIM_OC1_SetConfig+0xd2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <TIM_OC1_SetConfig+0x12c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_OC1_SetConfig+0xd2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <TIM_OC1_SetConfig+0x130>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d111      	bne.n	8003dde <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	621a      	str	r2, [r3, #32]
}
 8003df8:	bf00      	nop
 8003dfa:	371c      	adds	r7, #28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	40013400 	.word	0x40013400
 8003e0c:	40014000 	.word	0x40014000
 8003e10:	40014400 	.word	0x40014400
 8003e14:	40014800 	.word	0x40014800
 8003e18:	40015000 	.word	0x40015000

08003e1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f023 0210 	bic.w	r2, r3, #16
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	021b      	lsls	r3, r3, #8
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f023 0320 	bic.w	r3, r3, #32
 8003e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a2c      	ldr	r2, [pc, #176]	; (8003f2c <TIM_OC2_SetConfig+0x110>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d007      	beq.n	8003e90 <TIM_OC2_SetConfig+0x74>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a2b      	ldr	r2, [pc, #172]	; (8003f30 <TIM_OC2_SetConfig+0x114>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_OC2_SetConfig+0x74>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a2a      	ldr	r2, [pc, #168]	; (8003f34 <TIM_OC2_SetConfig+0x118>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d10d      	bne.n	8003eac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <TIM_OC2_SetConfig+0x110>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <TIM_OC2_SetConfig+0xc0>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <TIM_OC2_SetConfig+0x114>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00f      	beq.n	8003edc <TIM_OC2_SetConfig+0xc0>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a1e      	ldr	r2, [pc, #120]	; (8003f38 <TIM_OC2_SetConfig+0x11c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00b      	beq.n	8003edc <TIM_OC2_SetConfig+0xc0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a1d      	ldr	r2, [pc, #116]	; (8003f3c <TIM_OC2_SetConfig+0x120>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d007      	beq.n	8003edc <TIM_OC2_SetConfig+0xc0>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a1c      	ldr	r2, [pc, #112]	; (8003f40 <TIM_OC2_SetConfig+0x124>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d003      	beq.n	8003edc <TIM_OC2_SetConfig+0xc0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a17      	ldr	r2, [pc, #92]	; (8003f34 <TIM_OC2_SetConfig+0x118>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d113      	bne.n	8003f04 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ee2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eea:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40012c00 	.word	0x40012c00
 8003f30:	40013400 	.word	0x40013400
 8003f34:	40015000 	.word	0x40015000
 8003f38:	40014000 	.word	0x40014000
 8003f3c:	40014400 	.word	0x40014400
 8003f40:	40014800 	.word	0x40014800

08003f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a2b      	ldr	r2, [pc, #172]	; (8004050 <TIM_OC3_SetConfig+0x10c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <TIM_OC3_SetConfig+0x72>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a2a      	ldr	r2, [pc, #168]	; (8004054 <TIM_OC3_SetConfig+0x110>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_OC3_SetConfig+0x72>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a29      	ldr	r2, [pc, #164]	; (8004058 <TIM_OC3_SetConfig+0x114>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d10d      	bne.n	8003fd2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	021b      	lsls	r3, r3, #8
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fd0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <TIM_OC3_SetConfig+0x10c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d013      	beq.n	8004002 <TIM_OC3_SetConfig+0xbe>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1d      	ldr	r2, [pc, #116]	; (8004054 <TIM_OC3_SetConfig+0x110>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00f      	beq.n	8004002 <TIM_OC3_SetConfig+0xbe>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a1d      	ldr	r2, [pc, #116]	; (800405c <TIM_OC3_SetConfig+0x118>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00b      	beq.n	8004002 <TIM_OC3_SetConfig+0xbe>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a1c      	ldr	r2, [pc, #112]	; (8004060 <TIM_OC3_SetConfig+0x11c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d007      	beq.n	8004002 <TIM_OC3_SetConfig+0xbe>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <TIM_OC3_SetConfig+0x120>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d003      	beq.n	8004002 <TIM_OC3_SetConfig+0xbe>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a16      	ldr	r2, [pc, #88]	; (8004058 <TIM_OC3_SetConfig+0x114>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d113      	bne.n	800402a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	621a      	str	r2, [r3, #32]
}
 8004044:	bf00      	nop
 8004046:	371c      	adds	r7, #28
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	40012c00 	.word	0x40012c00
 8004054:	40013400 	.word	0x40013400
 8004058:	40015000 	.word	0x40015000
 800405c:	40014000 	.word	0x40014000
 8004060:	40014400 	.word	0x40014400
 8004064:	40014800 	.word	0x40014800

08004068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800409a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	031b      	lsls	r3, r3, #12
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a1a      	ldr	r2, [pc, #104]	; (8004130 <TIM_OC4_SetConfig+0xc8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d013      	beq.n	80040f4 <TIM_OC4_SetConfig+0x8c>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a19      	ldr	r2, [pc, #100]	; (8004134 <TIM_OC4_SetConfig+0xcc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00f      	beq.n	80040f4 <TIM_OC4_SetConfig+0x8c>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a18      	ldr	r2, [pc, #96]	; (8004138 <TIM_OC4_SetConfig+0xd0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00b      	beq.n	80040f4 <TIM_OC4_SetConfig+0x8c>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a17      	ldr	r2, [pc, #92]	; (800413c <TIM_OC4_SetConfig+0xd4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d007      	beq.n	80040f4 <TIM_OC4_SetConfig+0x8c>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a16      	ldr	r2, [pc, #88]	; (8004140 <TIM_OC4_SetConfig+0xd8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_OC4_SetConfig+0x8c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a15      	ldr	r2, [pc, #84]	; (8004144 <TIM_OC4_SetConfig+0xdc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d109      	bne.n	8004108 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	019b      	lsls	r3, r3, #6
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40013400 	.word	0x40013400
 8004138:	40014000 	.word	0x40014000
 800413c:	40014400 	.word	0x40014400
 8004140:	40014800 	.word	0x40014800
 8004144:	40015000 	.word	0x40015000

08004148 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800418c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	041b      	lsls	r3, r3, #16
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a19      	ldr	r2, [pc, #100]	; (8004204 <TIM_OC5_SetConfig+0xbc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <TIM_OC5_SetConfig+0x82>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a18      	ldr	r2, [pc, #96]	; (8004208 <TIM_OC5_SetConfig+0xc0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00f      	beq.n	80041ca <TIM_OC5_SetConfig+0x82>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a17      	ldr	r2, [pc, #92]	; (800420c <TIM_OC5_SetConfig+0xc4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00b      	beq.n	80041ca <TIM_OC5_SetConfig+0x82>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a16      	ldr	r2, [pc, #88]	; (8004210 <TIM_OC5_SetConfig+0xc8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d007      	beq.n	80041ca <TIM_OC5_SetConfig+0x82>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a15      	ldr	r2, [pc, #84]	; (8004214 <TIM_OC5_SetConfig+0xcc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d003      	beq.n	80041ca <TIM_OC5_SetConfig+0x82>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a14      	ldr	r2, [pc, #80]	; (8004218 <TIM_OC5_SetConfig+0xd0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d109      	bne.n	80041de <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	621a      	str	r2, [r3, #32]
}
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40012c00 	.word	0x40012c00
 8004208:	40013400 	.word	0x40013400
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400
 8004214:	40014800 	.word	0x40014800
 8004218:	40015000 	.word	0x40015000

0800421c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800424a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	051b      	lsls	r3, r3, #20
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a1a      	ldr	r2, [pc, #104]	; (80042dc <TIM_OC6_SetConfig+0xc0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d013      	beq.n	80042a0 <TIM_OC6_SetConfig+0x84>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <TIM_OC6_SetConfig+0xc4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00f      	beq.n	80042a0 <TIM_OC6_SetConfig+0x84>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a18      	ldr	r2, [pc, #96]	; (80042e4 <TIM_OC6_SetConfig+0xc8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00b      	beq.n	80042a0 <TIM_OC6_SetConfig+0x84>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <TIM_OC6_SetConfig+0xcc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d007      	beq.n	80042a0 <TIM_OC6_SetConfig+0x84>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a16      	ldr	r2, [pc, #88]	; (80042ec <TIM_OC6_SetConfig+0xd0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d003      	beq.n	80042a0 <TIM_OC6_SetConfig+0x84>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a15      	ldr	r2, [pc, #84]	; (80042f0 <TIM_OC6_SetConfig+0xd4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d109      	bne.n	80042b4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	029b      	lsls	r3, r3, #10
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	621a      	str	r2, [r3, #32]
}
 80042ce:	bf00      	nop
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40013400 	.word	0x40013400
 80042e4:	40014000 	.word	0x40014000
 80042e8:	40014400 	.word	0x40014400
 80042ec:	40014800 	.word	0x40014800
 80042f0:	40015000 	.word	0x40015000

080042f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f023 0201 	bic.w	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800431e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f023 030a 	bic.w	r3, r3, #10
 8004330:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	621a      	str	r2, [r3, #32]
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004352:	b480      	push	{r7}
 8004354:	b087      	sub	sp, #28
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f023 0210 	bic.w	r2, r3, #16
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800437c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	031b      	lsls	r3, r3, #12
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800438e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	621a      	str	r2, [r3, #32]
}
 80043a6:	bf00      	nop
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f043 0307 	orr.w	r3, r3, #7
 80043d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	609a      	str	r2, [r3, #8]
}
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	021a      	lsls	r2, r3, #8
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	431a      	orrs	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4313      	orrs	r3, r2
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	609a      	str	r2, [r3, #8]
}
 800441c:	bf00      	nop
 800441e:	371c      	adds	r7, #28
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	2201      	movs	r2, #1
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1a      	ldr	r2, [r3, #32]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	43db      	mvns	r3, r3
 800444a:	401a      	ands	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a1a      	ldr	r2, [r3, #32]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f003 031f 	and.w	r3, r3, #31
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	fa01 f303 	lsl.w	r3, r1, r3
 8004460:	431a      	orrs	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	621a      	str	r2, [r3, #32]
}
 8004466:	bf00      	nop
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004488:	2302      	movs	r3, #2
 800448a:	e06d      	b.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a30      	ldr	r2, [pc, #192]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d009      	beq.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2f      	ldr	r2, [pc, #188]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d004      	beq.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a2d      	ldr	r2, [pc, #180]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d108      	bne.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1e      	ldr	r2, [pc, #120]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d01d      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004508:	d018      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1c      	ldr	r2, [pc, #112]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d013      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a1a      	ldr	r2, [pc, #104]	; (8004584 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00e      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a15      	ldr	r2, [pc, #84]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d009      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a16      	ldr	r2, [pc, #88]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d004      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a11      	ldr	r2, [pc, #68]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d10c      	bne.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004542:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	4313      	orrs	r3, r2
 800454c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	40012c00 	.word	0x40012c00
 8004578:	40013400 	.word	0x40013400
 800457c:	40015000 	.word	0x40015000
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800
 8004588:	40014000 	.word	0x40014000

0800458c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e06a      	b.n	800467e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a19      	ldr	r2, [pc, #100]	; (800468c <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d009      	beq.n	8004640 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a17      	ldr	r2, [pc, #92]	; (8004690 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a16      	ldr	r2, [pc, #88]	; (8004694 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d115      	bne.n	800466c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	051b      	lsls	r3, r3, #20
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	4313      	orrs	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40012c00 	.word	0x40012c00
 8004690:	40013400 	.word	0x40013400
 8004694:	40015000 	.word	0x40015000

08004698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <__libc_init_array>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	4d0d      	ldr	r5, [pc, #52]	; (800470c <__libc_init_array+0x38>)
 80046d8:	4c0d      	ldr	r4, [pc, #52]	; (8004710 <__libc_init_array+0x3c>)
 80046da:	1b64      	subs	r4, r4, r5
 80046dc:	10a4      	asrs	r4, r4, #2
 80046de:	2600      	movs	r6, #0
 80046e0:	42a6      	cmp	r6, r4
 80046e2:	d109      	bne.n	80046f8 <__libc_init_array+0x24>
 80046e4:	4d0b      	ldr	r5, [pc, #44]	; (8004714 <__libc_init_array+0x40>)
 80046e6:	4c0c      	ldr	r4, [pc, #48]	; (8004718 <__libc_init_array+0x44>)
 80046e8:	f000 f820 	bl	800472c <_init>
 80046ec:	1b64      	subs	r4, r4, r5
 80046ee:	10a4      	asrs	r4, r4, #2
 80046f0:	2600      	movs	r6, #0
 80046f2:	42a6      	cmp	r6, r4
 80046f4:	d105      	bne.n	8004702 <__libc_init_array+0x2e>
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
 80046f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fc:	4798      	blx	r3
 80046fe:	3601      	adds	r6, #1
 8004700:	e7ee      	b.n	80046e0 <__libc_init_array+0xc>
 8004702:	f855 3b04 	ldr.w	r3, [r5], #4
 8004706:	4798      	blx	r3
 8004708:	3601      	adds	r6, #1
 800470a:	e7f2      	b.n	80046f2 <__libc_init_array+0x1e>
 800470c:	0800477c 	.word	0x0800477c
 8004710:	0800477c 	.word	0x0800477c
 8004714:	0800477c 	.word	0x0800477c
 8004718:	08004780 	.word	0x08004780

0800471c <memset>:
 800471c:	4402      	add	r2, r0
 800471e:	4603      	mov	r3, r0
 8004720:	4293      	cmp	r3, r2
 8004722:	d100      	bne.n	8004726 <memset+0xa>
 8004724:	4770      	bx	lr
 8004726:	f803 1b01 	strb.w	r1, [r3], #1
 800472a:	e7f9      	b.n	8004720 <memset+0x4>

0800472c <_init>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	bf00      	nop
 8004730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004732:	bc08      	pop	{r3}
 8004734:	469e      	mov	lr, r3
 8004736:	4770      	bx	lr

08004738 <_fini>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	bf00      	nop
 800473c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473e:	bc08      	pop	{r3}
 8004740:	469e      	mov	lr, r3
 8004742:	4770      	bx	lr
