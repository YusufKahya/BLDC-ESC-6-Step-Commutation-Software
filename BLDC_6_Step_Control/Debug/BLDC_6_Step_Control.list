
BLDC_6_Step_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000446c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004638  08004638  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004638  08004638  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004638  08004638  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800463c  0800463c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000288  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000294  20000294  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d1e9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e35  00000000  00000000  0002d225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  0002f060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009d8  00000000  00000000  0002fb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200b3  00000000  00000000  000304f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db09  00000000  00000000  000505ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c79c9  00000000  00000000  0005e0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00125a7d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bc4  00000000  00000000  00125ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080045e8 	.word	0x080045e8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080045e8 	.word	0x080045e8

080001d4 <PeripheralsStart>:
#include "TimeTask.h"

const uint8_t Trigger_Control_State[6] = {State_A_B,State_A_C,State_B_C,State_B_A,State_C_A,State_C_B};

void PeripheralsStart()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// Phase A High
 80001d8:	2100      	movs	r1, #0
 80001da:	482b      	ldr	r0, [pc, #172]	; (8000288 <PeripheralsStart+0xb4>)
 80001dc:	f003 f812 	bl	8003204 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	// Phase B High
 80001e0:	2104      	movs	r1, #4
 80001e2:	4829      	ldr	r0, [pc, #164]	; (8000288 <PeripheralsStart+0xb4>)
 80001e4:	f003 f80e 	bl	8003204 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	// Phase C High
 80001e8:	2108      	movs	r1, #8
 80001ea:	4827      	ldr	r0, [pc, #156]	; (8000288 <PeripheralsStart+0xb4>)
 80001ec:	f003 f80a 	bl	8003204 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	// Phase A Low
 80001f0:	2100      	movs	r1, #0
 80001f2:	4826      	ldr	r0, [pc, #152]	; (800028c <PeripheralsStart+0xb8>)
 80001f4:	f003 f806 	bl	8003204 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);	// Phase B Low
 80001f8:	2104      	movs	r1, #4
 80001fa:	4824      	ldr	r0, [pc, #144]	; (800028c <PeripheralsStart+0xb8>)
 80001fc:	f003 f802 	bl	8003204 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);	// Phase C Low
 8000200:	2108      	movs	r1, #8
 8000202:	4822      	ldr	r0, [pc, #136]	; (800028c <PeripheralsStart+0xb8>)
 8000204:	f002 fffe 	bl	8003204 <HAL_TIM_PWM_Start>

	  HAL_COMP_Start(&hcomp1);
 8000208:	4821      	ldr	r0, [pc, #132]	; (8000290 <PeripheralsStart+0xbc>)
 800020a:	f000 fffd 	bl	8001208 <HAL_COMP_Start>
	  HAL_COMP_Start(&hcomp3);
 800020e:	4821      	ldr	r0, [pc, #132]	; (8000294 <PeripheralsStart+0xc0>)
 8000210:	f000 fffa 	bl	8001208 <HAL_COMP_Start>
	  HAL_COMP_Start(&hcomp5);
 8000214:	4820      	ldr	r0, [pc, #128]	; (8000298 <PeripheralsStart+0xc4>)
 8000216:	f000 fff7 	bl	8001208 <HAL_COMP_Start>

	  Motor_Control.Duty_Cycle = 50;
 800021a:	4b20      	ldr	r3, [pc, #128]	; (800029c <PeripheralsStart+0xc8>)
 800021c:	2232      	movs	r2, #50	; 0x32
 800021e:	705a      	strb	r2, [r3, #1]
	  Motor_Control.Pulse_Center = 0;
 8000220:	4b1e      	ldr	r3, [pc, #120]	; (800029c <PeripheralsStart+0xc8>)
 8000222:	2200      	movs	r2, #0
 8000224:	619a      	str	r2, [r3, #24]

	  Motor_Control.A_Out = 0;
 8000226:	4b1d      	ldr	r3, [pc, #116]	; (800029c <PeripheralsStart+0xc8>)
 8000228:	2200      	movs	r2, #0
 800022a:	605a      	str	r2, [r3, #4]
	  Motor_Control.B_Out = 0;
 800022c:	4b1b      	ldr	r3, [pc, #108]	; (800029c <PeripheralsStart+0xc8>)
 800022e:	2200      	movs	r2, #0
 8000230:	609a      	str	r2, [r3, #8]
	  Motor_Control.C_Out = 0;
 8000232:	4b1a      	ldr	r3, [pc, #104]	; (800029c <PeripheralsStart+0xc8>)
 8000234:	2200      	movs	r2, #0
 8000236:	60da      	str	r2, [r3, #12]

	  Motor_Control.Rotor_Position = 0;
 8000238:	4b18      	ldr	r3, [pc, #96]	; (800029c <PeripheralsStart+0xc8>)
 800023a:	2200      	movs	r2, #0
 800023c:	709a      	strb	r2, [r3, #2]
	  Motor_Control.State = 1;
 800023e:	4b17      	ldr	r3, [pc, #92]	; (800029c <PeripheralsStart+0xc8>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]

	  Motor_Control.Signal = 0;
 8000244:	4b15      	ldr	r3, [pc, #84]	; (800029c <PeripheralsStart+0xc8>)
 8000246:	2200      	movs	r2, #0
 8000248:	611a      	str	r2, [r3, #16]
	  Motor_Control.Max_Signal = 0;
 800024a:	4b14      	ldr	r3, [pc, #80]	; (800029c <PeripheralsStart+0xc8>)
 800024c:	2200      	movs	r2, #0
 800024e:	615a      	str	r2, [r3, #20]

	  Start_Up.Duty_Cycle = 50;
 8000250:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <PeripheralsStart+0xcc>)
 8000252:	2232      	movs	r2, #50	; 0x32
 8000254:	701a      	strb	r2, [r3, #0]
	  Start_Up.Delay_Seconds = 0.00001f;
 8000256:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <PeripheralsStart+0xcc>)
 8000258:	4a12      	ldr	r2, [pc, #72]	; (80002a4 <PeripheralsStart+0xd0>)
 800025a:	605a      	str	r2, [r3, #4]
	  Start_Up.Tour = 1;
 800025c:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <PeripheralsStart+0xcc>)
 800025e:	2201      	movs	r2, #1
 8000260:	805a      	strh	r2, [r3, #2]
//	  Start_Up.PWM_Frequency = ( PeriphClkInit.Tim1ClockSelection/(htim1.Init.Period+1)*(htim1.Init.Prescaler+1));
	  Start_Up.State = 1;
 8000262:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <PeripheralsStart+0xcc>)
 8000264:	2201      	movs	r2, #1
 8000266:	721a      	strb	r2, [r3, #8]
	  Start_Up.AlignCoefficient = 2;
 8000268:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <PeripheralsStart+0xcc>)
 800026a:	2202      	movs	r2, #2
 800026c:	821a      	strh	r2, [r3, #16]
	  Start_Up.AlignDutyCycle = 50;
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <PeripheralsStart+0xcc>)
 8000270:	2232      	movs	r2, #50	; 0x32
 8000272:	825a      	strh	r2, [r3, #18]

	  Motor_Control.drive_Stage = START_UP;
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <PeripheralsStart+0xc8>)
 8000276:	2200      	movs	r2, #0
 8000278:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	  HAL_TIM_Base_Start_IT(&htim4);
 800027c:	480a      	ldr	r0, [pc, #40]	; (80002a8 <PeripheralsStart+0xd4>)
 800027e:	f002 fef9 	bl	8003074 <HAL_TIM_Base_Start_IT>
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000158 	.word	0x20000158
 800028c:	20000108 	.word	0x20000108
 8000290:	200000d8 	.word	0x200000d8
 8000294:	200001b8 	.word	0x200001b8
 8000298:	20000238 	.word	0x20000238
 800029c:	20000268 	.word	0x20000268
 80002a0:	200001a4 	.word	0x200001a4
 80002a4:	3727c5ac 	.word	0x3727c5ac
 80002a8:	2000008c 	.word	0x2000008c

080002ac <Start_Up_Motor>:

void Start_Up_Motor()
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	static int tour_Cnt = 0;

	if(Motor_Control.ControlCnt++ >= MOTOR_CONTROL_TASK_HZ*Start_Up.Delay_Seconds)
 80002b0:	4b2a      	ldr	r3, [pc, #168]	; (800035c <Start_Up_Motor+0xb0>)
 80002b2:	6a1a      	ldr	r2, [r3, #32]
 80002b4:	1c53      	adds	r3, r2, #1
 80002b6:	4929      	ldr	r1, [pc, #164]	; (800035c <Start_Up_Motor+0xb0>)
 80002b8:	620b      	str	r3, [r1, #32]
 80002ba:	ee07 2a90 	vmov	s15, r2
 80002be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80002c2:	4b27      	ldr	r3, [pc, #156]	; (8000360 <Start_Up_Motor+0xb4>)
 80002c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80002c8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8000364 <Start_Up_Motor+0xb8>
 80002cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80002d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002d8:	da00      	bge.n	80002dc <Start_Up_Motor+0x30>
		}

		Start_Up_Time_Task = 0;
	}

}
 80002da:	e03d      	b.n	8000358 <Start_Up_Motor+0xac>
		Motor_Control.ControlCnt = 0;
 80002dc:	4b1f      	ldr	r3, [pc, #124]	; (800035c <Start_Up_Motor+0xb0>)
 80002de:	2200      	movs	r2, #0
 80002e0:	621a      	str	r2, [r3, #32]
		Set_Motor_State(Trigger_Control_State[Motor_Control.motor_state_index], Start_Up.Duty_Cycle);
 80002e2:	4b1e      	ldr	r3, [pc, #120]	; (800035c <Start_Up_Motor+0xb0>)
 80002e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80002e8:	461a      	mov	r2, r3
 80002ea:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <Start_Up_Motor+0xbc>)
 80002ec:	5c9b      	ldrb	r3, [r3, r2]
 80002ee:	4a1c      	ldr	r2, [pc, #112]	; (8000360 <Start_Up_Motor+0xb4>)
 80002f0:	7812      	ldrb	r2, [r2, #0]
 80002f2:	b292      	uxth	r2, r2
 80002f4:	4611      	mov	r1, r2
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 f8a4 	bl	8000444 <Set_Motor_State>
		if( (Trigger_Control_State[Motor_Control.motor_state_index] == State_C_B) && tour_Cnt++ >= Start_Up.Tour)
 80002fc:	4b17      	ldr	r3, [pc, #92]	; (800035c <Start_Up_Motor+0xb0>)
 80002fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000302:	461a      	mov	r2, r3
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <Start_Up_Motor+0xbc>)
 8000306:	5c9b      	ldrb	r3, [r3, r2]
 8000308:	2b04      	cmp	r3, #4
 800030a:	d110      	bne.n	800032e <Start_Up_Motor+0x82>
 800030c:	4b17      	ldr	r3, [pc, #92]	; (800036c <Start_Up_Motor+0xc0>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	1c5a      	adds	r2, r3, #1
 8000312:	4916      	ldr	r1, [pc, #88]	; (800036c <Start_Up_Motor+0xc0>)
 8000314:	600a      	str	r2, [r1, #0]
 8000316:	4a12      	ldr	r2, [pc, #72]	; (8000360 <Start_Up_Motor+0xb4>)
 8000318:	8852      	ldrh	r2, [r2, #2]
 800031a:	4293      	cmp	r3, r2
 800031c:	db07      	blt.n	800032e <Start_Up_Motor+0x82>
			Motor_Control.drive_Stage = RUN;
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <Start_Up_Motor+0xb0>)
 8000320:	2202      	movs	r2, #2
 8000322:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			tour_Cnt = 0;
 8000326:	4b11      	ldr	r3, [pc, #68]	; (800036c <Start_Up_Motor+0xc0>)
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	e011      	b.n	8000352 <Start_Up_Motor+0xa6>
			Motor_Control.motor_state_index = (Motor_Control.motor_state_index + 1) % 6;
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <Start_Up_Motor+0xb0>)
 8000330:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000334:	1c5a      	adds	r2, r3, #1
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <Start_Up_Motor+0xc4>)
 8000338:	fb83 3102 	smull	r3, r1, r3, r2
 800033c:	17d3      	asrs	r3, r2, #31
 800033e:	1ac9      	subs	r1, r1, r3
 8000340:	460b      	mov	r3, r1
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	440b      	add	r3, r1
 8000346:	005b      	lsls	r3, r3, #1
 8000348:	1ad1      	subs	r1, r2, r3
 800034a:	b2ca      	uxtb	r2, r1
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <Start_Up_Motor+0xb0>)
 800034e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		Start_Up_Time_Task = 0;
 8000352:	4b08      	ldr	r3, [pc, #32]	; (8000374 <Start_Up_Motor+0xc8>)
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000268 	.word	0x20000268
 8000360:	200001a4 	.word	0x200001a4
 8000364:	469c4000 	.word	0x469c4000
 8000368:	08004600 	.word	0x08004600
 800036c:	20000028 	.word	0x20000028
 8000370:	2aaaaaab 	.word	0x2aaaaaab
 8000374:	20000088 	.word	0x20000088

08000378 <Run_Motor>:
//	}
//
//}

void Run_Motor()
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0

	  static uint8_t Next_State_Index = 0;

	  Motor_Control.A_Out = HAL_COMP_GetOutputLevel(&hcomp1) >> 30;
 800037c:	482a      	ldr	r0, [pc, #168]	; (8000428 <Run_Motor+0xb0>)
 800037e:	f001 f833 	bl	80013e8 <HAL_COMP_GetOutputLevel>
 8000382:	4603      	mov	r3, r0
 8000384:	0f9b      	lsrs	r3, r3, #30
 8000386:	4a29      	ldr	r2, [pc, #164]	; (800042c <Run_Motor+0xb4>)
 8000388:	6053      	str	r3, [r2, #4]
	  Motor_Control.B_Out = HAL_COMP_GetOutputLevel(&hcomp3) >> 30;
 800038a:	4829      	ldr	r0, [pc, #164]	; (8000430 <Run_Motor+0xb8>)
 800038c:	f001 f82c 	bl	80013e8 <HAL_COMP_GetOutputLevel>
 8000390:	4603      	mov	r3, r0
 8000392:	0f9b      	lsrs	r3, r3, #30
 8000394:	4a25      	ldr	r2, [pc, #148]	; (800042c <Run_Motor+0xb4>)
 8000396:	6093      	str	r3, [r2, #8]
	  Motor_Control.C_Out = HAL_COMP_GetOutputLevel(&hcomp5) >> 30;
 8000398:	4826      	ldr	r0, [pc, #152]	; (8000434 <Run_Motor+0xbc>)
 800039a:	f001 f825 	bl	80013e8 <HAL_COMP_GetOutputLevel>
 800039e:	4603      	mov	r3, r0
 80003a0:	0f9b      	lsrs	r3, r3, #30
 80003a2:	4a22      	ldr	r2, [pc, #136]	; (800042c <Run_Motor+0xb4>)
 80003a4:	60d3      	str	r3, [r2, #12]

	  Motor_Control.Rotor_Position = (Motor_Control.C_Out << 2) + (Motor_Control.B_Out << 1) + (Motor_Control.A_Out);
 80003a6:	4b21      	ldr	r3, [pc, #132]	; (800042c <Run_Motor+0xb4>)
 80003a8:	68db      	ldr	r3, [r3, #12]
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	4b1e      	ldr	r3, [pc, #120]	; (800042c <Run_Motor+0xb4>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	4413      	add	r3, r2
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	4b1b      	ldr	r3, [pc, #108]	; (800042c <Run_Motor+0xb4>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	4413      	add	r3, r2
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <Run_Motor+0xb4>)
 80003ca:	709a      	strb	r2, [r3, #2]

	  Next_State_Index = (Motor_Control.motor_state_index + 1) % 6;
 80003cc:	4b17      	ldr	r3, [pc, #92]	; (800042c <Run_Motor+0xb4>)
 80003ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003d2:	1c5a      	adds	r2, r3, #1
 80003d4:	4b18      	ldr	r3, [pc, #96]	; (8000438 <Run_Motor+0xc0>)
 80003d6:	fb83 3102 	smull	r3, r1, r3, r2
 80003da:	17d3      	asrs	r3, r2, #31
 80003dc:	1ac9      	subs	r1, r1, r3
 80003de:	460b      	mov	r3, r1
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	440b      	add	r3, r1
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	1ad1      	subs	r1, r2, r3
 80003e8:	b2ca      	uxtb	r2, r1
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <Run_Motor+0xc4>)
 80003ec:	701a      	strb	r2, [r3, #0]

	  if(Motor_Control.Rotor_Position == Trigger_Control_State[Next_State_Index])
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <Run_Motor+0xb4>)
 80003f0:	789a      	ldrb	r2, [r3, #2]
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <Run_Motor+0xc4>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	4619      	mov	r1, r3
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <Run_Motor+0xc8>)
 80003fa:	5c5b      	ldrb	r3, [r3, r1]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d111      	bne.n	8000424 <Run_Motor+0xac>
	  {
		  Motor_Control.motor_state_index = Next_State_Index;
 8000400:	4b0e      	ldr	r3, [pc, #56]	; (800043c <Run_Motor+0xc4>)
 8000402:	781a      	ldrb	r2, [r3, #0]
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <Run_Motor+0xb4>)
 8000406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		  Set_Motor_State(Trigger_Control_State[Motor_Control.motor_state_index], Motor_Control.Duty_Cycle);
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <Run_Motor+0xb4>)
 800040c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000410:	461a      	mov	r2, r3
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <Run_Motor+0xc8>)
 8000414:	5c9b      	ldrb	r3, [r3, r2]
 8000416:	4a05      	ldr	r2, [pc, #20]	; (800042c <Run_Motor+0xb4>)
 8000418:	7852      	ldrb	r2, [r2, #1]
 800041a:	b292      	uxth	r2, r2
 800041c:	4611      	mov	r1, r2
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f810 	bl	8000444 <Set_Motor_State>
	  }
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	200000d8 	.word	0x200000d8
 800042c:	20000268 	.word	0x20000268
 8000430:	200001b8 	.word	0x200001b8
 8000434:	20000238 	.word	0x20000238
 8000438:	2aaaaaab 	.word	0x2aaaaaab
 800043c:	2000002c 	.word	0x2000002c
 8000440:	08004600 	.word	0x08004600

08000444 <Set_Motor_State>:

void Set_Motor_State(uint8_t State, uint16_t DutyCycle)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	460a      	mov	r2, r1
 800044e:	71fb      	strb	r3, [r7, #7]
 8000450:	4613      	mov	r3, r2
 8000452:	80bb      	strh	r3, [r7, #4]
	Motor_Control.Signal = (htim1.Init.Period+1)*DutyCycle/100;	// CCR
 8000454:	4b70      	ldr	r3, [pc, #448]	; (8000618 <Set_Motor_State+0x1d4>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	3301      	adds	r3, #1
 800045a:	88ba      	ldrh	r2, [r7, #4]
 800045c:	fb02 f303 	mul.w	r3, r2, r3
 8000460:	4a6e      	ldr	r2, [pc, #440]	; (800061c <Set_Motor_State+0x1d8>)
 8000462:	fba2 2303 	umull	r2, r3, r2, r3
 8000466:	095b      	lsrs	r3, r3, #5
 8000468:	4a6d      	ldr	r2, [pc, #436]	; (8000620 <Set_Motor_State+0x1dc>)
 800046a:	6113      	str	r3, [r2, #16]
	Motor_Control.Max_Signal = htim1.Init.Period+1;				// ARR
 800046c:	4b6a      	ldr	r3, [pc, #424]	; (8000618 <Set_Motor_State+0x1d4>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	3301      	adds	r3, #1
 8000472:	4a6b      	ldr	r2, [pc, #428]	; (8000620 <Set_Motor_State+0x1dc>)
 8000474:	6153      	str	r3, [r2, #20]

	switch(State)
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	3b01      	subs	r3, #1
 800047a:	2b05      	cmp	r3, #5
 800047c:	f200 80c4 	bhi.w	8000608 <Set_Motor_State+0x1c4>
 8000480:	a201      	add	r2, pc, #4	; (adr r2, 8000488 <Set_Motor_State+0x44>)
 8000482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000486:	bf00      	nop
 8000488:	080004e3 	.word	0x080004e3
 800048c:	0800055b 	.word	0x0800055b
 8000490:	08000519 	.word	0x08000519
 8000494:	080005d3 	.word	0x080005d3
 8000498:	080004a1 	.word	0x080004a1
 800049c:	08000591 	.word	0x08000591
	{

		case State_A_B:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,Motor_Control.Signal);		// A HIGH ACTIVE
 80004a0:	4b5d      	ldr	r3, [pc, #372]	; (8000618 <Set_Motor_State+0x1d4>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a5e      	ldr	r2, [pc, #376]	; (8000620 <Set_Motor_State+0x1dc>)
 80004a6:	6912      	ldr	r2, [r2, #16]
 80004a8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,Motor_Control.Max_Signal);	// B LOW AVTIVE
 80004aa:	4b5e      	ldr	r3, [pc, #376]	; (8000624 <Set_Motor_State+0x1e0>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a5c      	ldr	r2, [pc, #368]	; (8000620 <Set_Motor_State+0x1dc>)
 80004b0:	6952      	ldr	r2, [r2, #20]
 80004b2:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
 80004b4:	4b5b      	ldr	r3, [pc, #364]	; (8000624 <Set_Motor_State+0x1e0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2200      	movs	r2, #0
 80004ba:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,0);
 80004bc:	4b59      	ldr	r3, [pc, #356]	; (8000624 <Set_Motor_State+0x1e0>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2200      	movs	r2, #0
 80004c2:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80004c4:	4b54      	ldr	r3, [pc, #336]	; (8000618 <Set_Motor_State+0x1d4>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2200      	movs	r2, #0
 80004ca:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80004cc:	4b52      	ldr	r3, [pc, #328]	; (8000618 <Set_Motor_State+0x1d4>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2200      	movs	r2, #0
 80004d2:	63da      	str	r2, [r3, #60]	; 0x3c

			Motor_Control.Pulse_Center = htim1.Instance->CCR1 / 2;	//DutyCycle bu State'de iken değişirse kontrol güncellenir
 80004d4:	4b50      	ldr	r3, [pc, #320]	; (8000618 <Set_Motor_State+0x1d4>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004da:	085b      	lsrs	r3, r3, #1
 80004dc:	4a50      	ldr	r2, [pc, #320]	; (8000620 <Set_Motor_State+0x1dc>)
 80004de:	6193      	str	r3, [r2, #24]

			break;
 80004e0:	e093      	b.n	800060a <Set_Motor_State+0x1c6>

		case State_A_C:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,Motor_Control.Signal);		// A HIGH ACTIVE
 80004e2:	4b4d      	ldr	r3, [pc, #308]	; (8000618 <Set_Motor_State+0x1d4>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a4e      	ldr	r2, [pc, #312]	; (8000620 <Set_Motor_State+0x1dc>)
 80004e8:	6912      	ldr	r2, [r2, #16]
 80004ea:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,Motor_Control.Max_Signal);	// C LOW ACTIVE
 80004ec:	4b4d      	ldr	r3, [pc, #308]	; (8000624 <Set_Motor_State+0x1e0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a4b      	ldr	r2, [pc, #300]	; (8000620 <Set_Motor_State+0x1dc>)
 80004f2:	6952      	ldr	r2, [r2, #20]
 80004f4:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
 80004f6:	4b4b      	ldr	r3, [pc, #300]	; (8000624 <Set_Motor_State+0x1e0>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2200      	movs	r2, #0
 80004fc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
 80004fe:	4b49      	ldr	r3, [pc, #292]	; (8000624 <Set_Motor_State+0x1e0>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2200      	movs	r2, #0
 8000504:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000506:	4b44      	ldr	r3, [pc, #272]	; (8000618 <Set_Motor_State+0x1d4>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2200      	movs	r2, #0
 800050c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 800050e:	4b42      	ldr	r3, [pc, #264]	; (8000618 <Set_Motor_State+0x1d4>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2200      	movs	r2, #0
 8000514:	63da      	str	r2, [r3, #60]	; 0x3c

			break;
 8000516:	e078      	b.n	800060a <Set_Motor_State+0x1c6>

		case State_B_C:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Motor_Control.Signal);		// B HIGH ACTIVE
 8000518:	4b3f      	ldr	r3, [pc, #252]	; (8000618 <Set_Motor_State+0x1d4>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a40      	ldr	r2, [pc, #256]	; (8000620 <Set_Motor_State+0x1dc>)
 800051e:	6912      	ldr	r2, [r2, #16]
 8000520:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,Motor_Control.Max_Signal);	// C LOW ACTIVE
 8000522:	4b40      	ldr	r3, [pc, #256]	; (8000624 <Set_Motor_State+0x1e0>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a3e      	ldr	r2, [pc, #248]	; (8000620 <Set_Motor_State+0x1dc>)
 8000528:	6952      	ldr	r2, [r2, #20]
 800052a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
 800052c:	4b3d      	ldr	r3, [pc, #244]	; (8000624 <Set_Motor_State+0x1e0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2200      	movs	r2, #0
 8000532:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
 8000534:	4b3b      	ldr	r3, [pc, #236]	; (8000624 <Set_Motor_State+0x1e0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2200      	movs	r2, #0
 800053a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 800053c:	4b36      	ldr	r3, [pc, #216]	; (8000618 <Set_Motor_State+0x1d4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2200      	movs	r2, #0
 8000542:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000544:	4b34      	ldr	r3, [pc, #208]	; (8000618 <Set_Motor_State+0x1d4>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2200      	movs	r2, #0
 800054a:	63da      	str	r2, [r3, #60]	; 0x3c

			Motor_Control.Pulse_Center = htim1.Instance->CCR2 / 2;	//DutyCycle bu State'de iken değişirse kontrol güncellenir
 800054c:	4b32      	ldr	r3, [pc, #200]	; (8000618 <Set_Motor_State+0x1d4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000552:	085b      	lsrs	r3, r3, #1
 8000554:	4a32      	ldr	r2, [pc, #200]	; (8000620 <Set_Motor_State+0x1dc>)
 8000556:	6193      	str	r3, [r2, #24]

			break;
 8000558:	e057      	b.n	800060a <Set_Motor_State+0x1c6>

		case State_B_A:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Motor_Control.Signal);	// B HIGH ACTIVE
 800055a:	4b2f      	ldr	r3, [pc, #188]	; (8000618 <Set_Motor_State+0x1d4>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a30      	ldr	r2, [pc, #192]	; (8000620 <Set_Motor_State+0x1dc>)
 8000560:	6912      	ldr	r2, [r2, #16]
 8000562:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,Motor_Control.Max_Signal);	// A LOW ACTIVE
 8000564:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <Set_Motor_State+0x1e0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a2d      	ldr	r2, [pc, #180]	; (8000620 <Set_Motor_State+0x1dc>)
 800056a:	6952      	ldr	r2, [r2, #20]
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
 800056e:	4b2d      	ldr	r3, [pc, #180]	; (8000624 <Set_Motor_State+0x1e0>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2200      	movs	r2, #0
 8000574:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,0);
 8000576:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <Set_Motor_State+0x1e0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2200      	movs	r2, #0
 800057c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 800057e:	4b26      	ldr	r3, [pc, #152]	; (8000618 <Set_Motor_State+0x1d4>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2200      	movs	r2, #0
 8000584:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000586:	4b24      	ldr	r3, [pc, #144]	; (8000618 <Set_Motor_State+0x1d4>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2200      	movs	r2, #0
 800058c:	63da      	str	r2, [r3, #60]	; 0x3c

			break;
 800058e:	e03c      	b.n	800060a <Set_Motor_State+0x1c6>

		case State_C_A:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,Motor_Control.Signal);	// C HIGH ACTIVE
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <Set_Motor_State+0x1d4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a22      	ldr	r2, [pc, #136]	; (8000620 <Set_Motor_State+0x1dc>)
 8000596:	6912      	ldr	r2, [r2, #16]
 8000598:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,Motor_Control.Max_Signal);	// A LOW ACTIVE
 800059a:	4b22      	ldr	r3, [pc, #136]	; (8000624 <Set_Motor_State+0x1e0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a20      	ldr	r2, [pc, #128]	; (8000620 <Set_Motor_State+0x1dc>)
 80005a0:	6952      	ldr	r2, [r2, #20]
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,0);
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <Set_Motor_State+0x1e0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2200      	movs	r2, #0
 80005aa:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,0);
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <Set_Motor_State+0x1e0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2200      	movs	r2, #0
 80005b2:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 80005b4:	4b18      	ldr	r3, [pc, #96]	; (8000618 <Set_Motor_State+0x1d4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <Set_Motor_State+0x1d4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	639a      	str	r2, [r3, #56]	; 0x38

			Motor_Control.Pulse_Center = htim1.Instance->CCR3 / 2;	//DutyCycle bu State'de iken değişirse kontrol güncellenir
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <Set_Motor_State+0x1d4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ca:	085b      	lsrs	r3, r3, #1
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <Set_Motor_State+0x1dc>)
 80005ce:	6193      	str	r3, [r2, #24]

			break;
 80005d0:	e01b      	b.n	800060a <Set_Motor_State+0x1c6>

		case State_C_B:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,Motor_Control.Signal);	// C HIGH ACTIVE
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <Set_Motor_State+0x1d4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <Set_Motor_State+0x1dc>)
 80005d8:	6912      	ldr	r2, [r2, #16]
 80005da:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,Motor_Control.Max_Signal);	// B LOW ACTIVE
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <Set_Motor_State+0x1e0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <Set_Motor_State+0x1dc>)
 80005e2:	6952      	ldr	r2, [r2, #20]
 80005e4:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,0);
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <Set_Motor_State+0x1e0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2200      	movs	r2, #0
 80005ec:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,0);
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <Set_Motor_State+0x1e0>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2200      	movs	r2, #0
 80005f4:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <Set_Motor_State+0x1d4>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2200      	movs	r2, #0
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <Set_Motor_State+0x1d4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2200      	movs	r2, #0
 8000604:	639a      	str	r2, [r3, #56]	; 0x38

			break;
 8000606:	e000      	b.n	800060a <Set_Motor_State+0x1c6>

		default:
			break;
 8000608:	bf00      	nop

	}
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000158 	.word	0x20000158
 800061c:	51eb851f 	.word	0x51eb851f
 8000620:	20000268 	.word	0x20000268
 8000624:	20000108 	.word	0x20000108

08000628 <HAL_TIM_PeriodElapsedCallback>:
#include "TimeTask.h"
#include "SixStepCommutation.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a07      	ldr	r2, [pc, #28]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d104      	bne.n	8000642 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		timerCounter++;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	4a05      	ldr	r2, [pc, #20]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000640:	6013      	str	r3, [r2, #0]
//		{
//			Time.Task.Hz_100 = 1;
//		}

	}
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	2000008c 	.word	0x2000008c
 8000654:	20000154 	.word	0x20000154

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 fcf4 	bl	8001048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f830 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 fa66 	bl	8000b34 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000668:	f000 f900 	bl	800086c <MX_TIM1_Init>
  MX_TIM3_Init();
 800066c:	f000 f9a4 	bl	80009b8 <MX_TIM3_Init>
  MX_COMP1_Init();
 8000670:	f000 f88a 	bl	8000788 <MX_COMP1_Init>
  MX_COMP3_Init();
 8000674:	f000 f8ae 	bl	80007d4 <MX_COMP3_Init>
  MX_COMP5_Init();
 8000678:	f000 f8d2 	bl	8000820 <MX_COMP5_Init>
  MX_TIM4_Init();
 800067c:	f000 fa0c 	bl	8000a98 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  PeripheralsStart();
 8000680:	f7ff fda8 	bl	80001d4 <PeripheralsStart>
//	  if(Time.Task.Hz_1000)
//	  {
//		  HAL_GPIO_TogglePin(deneme_GPIO_Port, deneme_Pin);
//	  }

	  if(htim1.Instance->CNT == Motor_Control.Pulse_Center)
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <main+0x64>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <main+0x68>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	429a      	cmp	r2, r3
 8000690:	d111      	bne.n	80006b6 <main+0x5e>
	  {

		  if(Motor_Control.System_Enable == 1)
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <main+0x68>)
 8000694:	7f1b      	ldrb	r3, [r3, #28]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d10d      	bne.n	80006b6 <main+0x5e>
		  {

			  switch(Motor_Control.drive_Stage)
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <main+0x68>)
 800069c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d002      	beq.n	80006aa <main+0x52>
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d003      	beq.n	80006b0 <main+0x58>

					  break;
				  }

				  default:
					  break;
 80006a8:	e006      	b.n	80006b8 <main+0x60>
					  Start_Up_Motor();
 80006aa:	f7ff fdff 	bl	80002ac <Start_Up_Motor>
					  break;
 80006ae:	e003      	b.n	80006b8 <main+0x60>
					  Run_Motor();
 80006b0:	f7ff fe62 	bl	8000378 <Run_Motor>
					  break;
 80006b4:	e000      	b.n	80006b8 <main+0x60>
			  }
		  }
 80006b6:	bf00      	nop
	  if(htim1.Instance->CNT == Motor_Control.Pulse_Center)
 80006b8:	e7e4      	b.n	8000684 <main+0x2c>
 80006ba:	bf00      	nop
 80006bc:	20000158 	.word	0x20000158
 80006c0:	20000268 	.word	0x20000268

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0a6      	sub	sp, #152	; 0x98
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006ce:	2228      	movs	r2, #40	; 0x28
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 ff80 	bl	80045d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2258      	movs	r2, #88	; 0x58
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f003 ff72 	bl	80045d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800070c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000710:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000714:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000722:	4618      	mov	r0, r3
 8000724:	f001 f934 	bl	8001990 <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800072e:	f000 fa57 	bl	8000be0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2302      	movs	r3, #2
 8000738:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000742:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000748:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800074c:	2102      	movs	r1, #2
 800074e:	4618      	mov	r0, r3
 8000750:	f002 f834 	bl	80027bc <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075a:	f000 fa41 	bl	8000be0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM34;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <SystemClock_Config+0xc0>)
 8000760:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000762:	2300      	movs	r3, #0
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000766:	2300      	movs	r3, #0
 8000768:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4618      	mov	r0, r3
 800076e:	f002 fa0b 	bl	8002b88 <HAL_RCCEx_PeriphCLKConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000778:	f000 fa32 	bl	8000be0 <Error_Handler>
  }
}
 800077c:	bf00      	nop
 800077e:	3798      	adds	r7, #152	; 0x98
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	00201000 	.word	0x00201000

08000788 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_COMP1_Init+0x44>)
 800078e:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <MX_COMP1_Init+0x48>)
 8000790:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH2;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_COMP1_Init+0x44>)
 8000794:	2250      	movs	r2, #80	; 0x50
 8000796:	605a      	str	r2, [r3, #4]
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_COMP1_Init+0x44>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Output = COMP_OUTPUT_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_COMP1_Init+0x44>)
 80007a0:	227f      	movs	r2, #127	; 0x7f
 80007a2:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_COMP1_Init+0x44>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_COMP1_Init+0x44>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_COMP1_Init+0x44>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_COMP1_Init+0x44>)
 80007b8:	f000 fcac 	bl	8001114 <HAL_COMP_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 80007c2:	f000 fa0d 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000d8 	.word	0x200000d8
 80007d0:	4001001c 	.word	0x4001001c

080007d4 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_COMP3_Init+0x44>)
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <MX_COMP3_Init+0x48>)
 80007dc:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_COMP3_Init+0x44>)
 80007e0:	2270      	movs	r2, #112	; 0x70
 80007e2:	605a      	str	r2, [r3, #4]
  hcomp3.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_COMP3_Init+0x44>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hcomp3.Init.Output = COMP_OUTPUT_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_COMP3_Init+0x44>)
 80007ec:	227f      	movs	r2, #127	; 0x7f
 80007ee:	60da      	str	r2, [r3, #12]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_COMP3_Init+0x44>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_COMP3_Init+0x44>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_COMP3_Init+0x44>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_COMP3_Init+0x44>)
 8000804:	f000 fc86 	bl	8001114 <HAL_COMP_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_COMP3_Init+0x3e>
  {
    Error_Handler();
 800080e:	f000 f9e7 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200001b8 	.word	0x200001b8
 800081c:	40010024 	.word	0x40010024

08000820 <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_COMP5_Init+0x44>)
 8000826:	4a10      	ldr	r2, [pc, #64]	; (8000868 <MX_COMP5_Init+0x48>)
 8000828:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_COMP5_Init+0x44>)
 800082c:	2270      	movs	r2, #112	; 0x70
 800082e:	605a      	str	r2, [r3, #4]
  hcomp5.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_COMP5_Init+0x44>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hcomp5.Init.Output = COMP_OUTPUT_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_COMP5_Init+0x44>)
 8000838:	227f      	movs	r2, #127	; 0x7f
 800083a:	60da      	str	r2, [r3, #12]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_COMP5_Init+0x44>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_COMP5_Init+0x44>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_COMP5_Init+0x44>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_COMP5_Init+0x44>)
 8000850:	f000 fc60 	bl	8001114 <HAL_COMP_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_COMP5_Init+0x3e>
  {
    Error_Handler();
 800085a:	f000 f9c1 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000238 	.word	0x20000238
 8000868:	4001002c 	.word	0x4001002c

0800086c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b096      	sub	sp, #88	; 0x58
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000872:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
 800088e:	615a      	str	r2, [r3, #20]
 8000890:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	222c      	movs	r2, #44	; 0x2c
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f003 fe9d 	bl	80045d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800089e:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <MX_TIM1_Init+0x144>)
 80008a0:	4a44      	ldr	r2, [pc, #272]	; (80009b4 <MX_TIM1_Init+0x148>)
 80008a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80008a4:	4b42      	ldr	r3, [pc, #264]	; (80009b0 <MX_TIM1_Init+0x144>)
 80008a6:	2247      	movs	r2, #71	; 0x47
 80008a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b41      	ldr	r3, [pc, #260]	; (80009b0 <MX_TIM1_Init+0x144>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 80008b0:	4b3f      	ldr	r3, [pc, #252]	; (80009b0 <MX_TIM1_Init+0x144>)
 80008b2:	2231      	movs	r2, #49	; 0x31
 80008b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b6:	4b3e      	ldr	r3, [pc, #248]	; (80009b0 <MX_TIM1_Init+0x144>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008bc:	4b3c      	ldr	r3, [pc, #240]	; (80009b0 <MX_TIM1_Init+0x144>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c2:	4b3b      	ldr	r3, [pc, #236]	; (80009b0 <MX_TIM1_Init+0x144>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008c8:	4839      	ldr	r0, [pc, #228]	; (80009b0 <MX_TIM1_Init+0x144>)
 80008ca:	f002 fc43 	bl	8003154 <HAL_TIM_PWM_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80008d4:	f000 f984 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008e8:	4619      	mov	r1, r3
 80008ea:	4831      	ldr	r0, [pc, #196]	; (80009b0 <MX_TIM1_Init+0x144>)
 80008ec:	f003 fd20 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80008f6:	f000 f973 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fa:	2360      	movs	r3, #96	; 0x60
 80008fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000902:	2300      	movs	r3, #0
 8000904:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000906:	2300      	movs	r3, #0
 8000908:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000912:	2300      	movs	r3, #0
 8000914:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000916:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800091a:	2200      	movs	r2, #0
 800091c:	4619      	mov	r1, r3
 800091e:	4824      	ldr	r0, [pc, #144]	; (80009b0 <MX_TIM1_Init+0x144>)
 8000920:	f002 fe9c 	bl	800365c <HAL_TIM_PWM_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800092a:	f000 f959 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800092e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000932:	2204      	movs	r2, #4
 8000934:	4619      	mov	r1, r3
 8000936:	481e      	ldr	r0, [pc, #120]	; (80009b0 <MX_TIM1_Init+0x144>)
 8000938:	f002 fe90 	bl	800365c <HAL_TIM_PWM_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000942:	f000 f94d 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000946:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800094a:	2208      	movs	r2, #8
 800094c:	4619      	mov	r1, r3
 800094e:	4818      	ldr	r0, [pc, #96]	; (80009b0 <MX_TIM1_Init+0x144>)
 8000950:	f002 fe84 	bl	800365c <HAL_TIM_PWM_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800095a:	f000 f941 	bl	8000be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000976:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000980:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4619      	mov	r1, r3
 8000992:	4807      	ldr	r0, [pc, #28]	; (80009b0 <MX_TIM1_Init+0x144>)
 8000994:	f003 fd58 	bl	8004448 <HAL_TIMEx_ConfigBreakDeadTime>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 800099e:	f000 f91f 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009a2:	4803      	ldr	r0, [pc, #12]	; (80009b0 <MX_TIM1_Init+0x144>)
 80009a4:	f000 fa64 	bl	8000e70 <HAL_TIM_MspPostInit>

}
 80009a8:	bf00      	nop
 80009aa:	3758      	adds	r7, #88	; 0x58
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000158 	.word	0x20000158
 80009b4:	40012c00 	.word	0x40012c00

080009b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ca:	463b      	mov	r3, r7
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
 80009d8:	615a      	str	r2, [r3, #20]
 80009da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009dc:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <MX_TIM3_Init+0xd8>)
 80009de:	4a2d      	ldr	r2, [pc, #180]	; (8000a94 <MX_TIM3_Init+0xdc>)
 80009e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <MX_TIM3_Init+0xd8>)
 80009e4:	2247      	movs	r2, #71	; 0x47
 80009e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <MX_TIM3_Init+0xd8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50-1;
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <MX_TIM3_Init+0xd8>)
 80009f0:	2231      	movs	r2, #49	; 0x31
 80009f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <MX_TIM3_Init+0xd8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <MX_TIM3_Init+0xd8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a00:	4823      	ldr	r0, [pc, #140]	; (8000a90 <MX_TIM3_Init+0xd8>)
 8000a02:	f002 fba7 	bl	8003154 <HAL_TIM_PWM_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 f8e8 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	481c      	ldr	r0, [pc, #112]	; (8000a90 <MX_TIM3_Init+0xd8>)
 8000a20:	f003 fc86 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a2a:	f000 f8d9 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2e:	2360      	movs	r3, #96	; 0x60
 8000a30:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2200      	movs	r2, #0
 8000a42:	4619      	mov	r1, r3
 8000a44:	4812      	ldr	r0, [pc, #72]	; (8000a90 <MX_TIM3_Init+0xd8>)
 8000a46:	f002 fe09 	bl	800365c <HAL_TIM_PWM_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000a50:	f000 f8c6 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	2204      	movs	r2, #4
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <MX_TIM3_Init+0xd8>)
 8000a5c:	f002 fdfe 	bl	800365c <HAL_TIM_PWM_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a66:	f000 f8bb 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4807      	ldr	r0, [pc, #28]	; (8000a90 <MX_TIM3_Init+0xd8>)
 8000a72:	f002 fdf3 	bl	800365c <HAL_TIM_PWM_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000a7c:	f000 f8b0 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a80:	4803      	ldr	r0, [pc, #12]	; (8000a90 <MX_TIM3_Init+0xd8>)
 8000a82:	f000 f9f5 	bl	8000e70 <HAL_TIM_MspPostInit>

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000108 	.word	0x20000108
 8000a94:	40000400 	.word	0x40000400

08000a98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9e:	f107 0310 	add.w	r3, r7, #16
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <MX_TIM4_Init+0x98>)
 8000aba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000abe:	2247      	movs	r2, #71	; 0x47
 8000ac0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000aca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ace:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000adc:	4813      	ldr	r0, [pc, #76]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000ade:	f002 fa71 	bl	8002fc4 <HAL_TIM_Base_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000ae8:	f000 f87a 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	4619      	mov	r1, r3
 8000af8:	480c      	ldr	r0, [pc, #48]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000afa:	f002 fec3 	bl	8003884 <HAL_TIM_ConfigClockSource>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000b04:	f000 f86c 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_TIM4_Init+0x94>)
 8000b16:	f003 fc0b 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000b20:	f000 f85e 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2000008c 	.word	0x2000008c
 8000b30:	40000800 	.word	0x40000800

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4a:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b54:	6153      	str	r3, [r2, #20]
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b6c:	6153      	str	r3, [r2, #20]
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	6153      	str	r3, [r2, #20]
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b9c:	6153      	str	r3, [r2, #20]
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_GPIO_Init+0xa4>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(deneme_GPIO_Port, deneme_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2101      	movs	r1, #1
 8000bae:	480b      	ldr	r0, [pc, #44]	; (8000bdc <MX_GPIO_Init+0xa8>)
 8000bb0:	f000 fed6 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : deneme_Pin */
  GPIO_InitStruct.Pin = deneme_Pin;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(deneme_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_GPIO_Init+0xa8>)
 8000bcc:	f000 fd3e 	bl	800164c <HAL_GPIO_Init>

}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	; 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	48000400 	.word	0x48000400

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_MspInit+0x44>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <HAL_MspInit+0x44>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6193      	str	r3, [r2, #24]
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_MspInit+0x44>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_MspInit+0x44>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_MspInit+0x44>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	61d3      	str	r3, [r2, #28]
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_MspInit+0x44>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c22:	2007      	movs	r0, #7
 8000c24:	f000 fcca 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08c      	sub	sp, #48	; 0x30
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a54      	ldr	r2, [pc, #336]	; (8000da4 <HAL_COMP_MspInit+0x170>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12a      	bne.n	8000cac <HAL_COMP_MspInit+0x78>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b54      	ldr	r3, [pc, #336]	; (8000da8 <HAL_COMP_MspInit+0x174>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	4a53      	ldr	r2, [pc, #332]	; (8000da8 <HAL_COMP_MspInit+0x174>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	6153      	str	r3, [r2, #20]
 8000c62:	4b51      	ldr	r3, [pc, #324]	; (8000da8 <HAL_COMP_MspInit+0x174>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
    /**COMP1 GPIO Configuration
    PA0     ------> COMP1_OUT
    PA1     ------> COMP1_INP
    PA5     ------> COMP1_INM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP1;
 8000c7e:	2308      	movs	r3, #8
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8c:	f000 fcde 	bl	800164c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000c90:	2322      	movs	r3, #34	; 0x22
 8000c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c94:	2303      	movs	r3, #3
 8000c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca6:	f000 fcd1 	bl	800164c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP5_MspInit 1 */

  /* USER CODE END COMP5_MspInit 1 */
  }

}
 8000caa:	e076      	b.n	8000d9a <HAL_COMP_MspInit+0x166>
  else if(hcomp->Instance==COMP3)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a3e      	ldr	r2, [pc, #248]	; (8000dac <HAL_COMP_MspInit+0x178>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d137      	bne.n	8000d26 <HAL_COMP_MspInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	4b3c      	ldr	r3, [pc, #240]	; (8000da8 <HAL_COMP_MspInit+0x174>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	4a3b      	ldr	r2, [pc, #236]	; (8000da8 <HAL_COMP_MspInit+0x174>)
 8000cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc0:	6153      	str	r3, [r2, #20]
 8000cc2:	4b39      	ldr	r3, [pc, #228]	; (8000da8 <HAL_COMP_MspInit+0x174>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <HAL_COMP_MspInit+0x174>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	4a35      	ldr	r2, [pc, #212]	; (8000da8 <HAL_COMP_MspInit+0x174>)
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	6153      	str	r3, [r2, #20]
 8000cda:	4b33      	ldr	r3, [pc, #204]	; (8000da8 <HAL_COMP_MspInit+0x174>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000ce6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cec:	2303      	movs	r3, #3
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	482d      	ldr	r0, [pc, #180]	; (8000db0 <HAL_COMP_MspInit+0x17c>)
 8000cfc:	f000 fca6 	bl	800164c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_COMP3;
 8000d12:	2308      	movs	r3, #8
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f000 fc94 	bl	800164c <HAL_GPIO_Init>
}
 8000d24:	e039      	b.n	8000d9a <HAL_COMP_MspInit+0x166>
  else if(hcomp->Instance==COMP5)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a22      	ldr	r2, [pc, #136]	; (8000db4 <HAL_COMP_MspInit+0x180>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d134      	bne.n	8000d9a <HAL_COMP_MspInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <HAL_COMP_MspInit+0x174>)
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	4a1c      	ldr	r2, [pc, #112]	; (8000da8 <HAL_COMP_MspInit+0x174>)
 8000d36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3a:	6153      	str	r3, [r2, #20]
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <HAL_COMP_MspInit+0x174>)
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_COMP_MspInit+0x174>)
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	4a16      	ldr	r2, [pc, #88]	; (8000da8 <HAL_COMP_MspInit+0x174>)
 8000d4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d52:	6153      	str	r3, [r2, #20]
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <HAL_COMP_MspInit+0x174>)
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 8000d60:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d66:	2303      	movs	r3, #3
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	480e      	ldr	r0, [pc, #56]	; (8000db0 <HAL_COMP_MspInit+0x17c>)
 8000d76:	f000 fc69 	bl	800164c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_COMP5;
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	4808      	ldr	r0, [pc, #32]	; (8000db8 <HAL_COMP_MspInit+0x184>)
 8000d96:	f000 fc59 	bl	800164c <HAL_GPIO_Init>
}
 8000d9a:	bf00      	nop
 8000d9c:	3730      	adds	r7, #48	; 0x30
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	4001001c 	.word	0x4001001c
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010024 	.word	0x40010024
 8000db0:	48000400 	.word	0x48000400
 8000db4:	4001002c 	.word	0x4001002c
 8000db8:	48000800 	.word	0x48000800

08000dbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <HAL_TIM_PWM_MspInit+0x5c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d10c      	bne.n	8000de8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <HAL_TIM_PWM_MspInit+0x60>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <HAL_TIM_PWM_MspInit+0x60>)
 8000dd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dd8:	6193      	str	r3, [r2, #24]
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_TIM_PWM_MspInit+0x60>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000de6:	e010      	b.n	8000e0a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <HAL_TIM_PWM_MspInit+0x64>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d10b      	bne.n	8000e0a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_TIM_PWM_MspInit+0x60>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <HAL_TIM_PWM_MspInit+0x60>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	61d3      	str	r3, [r2, #28]
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_TIM_PWM_MspInit+0x60>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
}
 8000e0a:	bf00      	nop
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40012c00 	.word	0x40012c00
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40000400 	.word	0x40000400

08000e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <HAL_TIM_Base_MspInit+0x44>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d113      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <HAL_TIM_Base_MspInit+0x48>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <HAL_TIM_Base_MspInit+0x48>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_TIM_Base_MspInit+0x48>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	201e      	movs	r0, #30
 8000e54:	f000 fbbd 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e58:	201e      	movs	r0, #30
 8000e5a:	f000 fbd6 	bl	800160a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40000800 	.word	0x40000800
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a31      	ldr	r2, [pc, #196]	; (8000f54 <HAL_TIM_MspPostInit+0xe4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d11c      	bne.n	8000ecc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <HAL_TIM_MspPostInit+0xe8>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4a30      	ldr	r2, [pc, #192]	; (8000f58 <HAL_TIM_MspPostInit+0xe8>)
 8000e98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e9c:	6153      	str	r3, [r2, #20]
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <HAL_TIM_MspPostInit+0xe8>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000eaa:	2307      	movs	r3, #7
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4825      	ldr	r0, [pc, #148]	; (8000f5c <HAL_TIM_MspPostInit+0xec>)
 8000ec6:	f000 fbc1 	bl	800164c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000eca:	e03e      	b.n	8000f4a <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a23      	ldr	r2, [pc, #140]	; (8000f60 <HAL_TIM_MspPostInit+0xf0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d139      	bne.n	8000f4a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <HAL_TIM_MspPostInit+0xe8>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	4a1f      	ldr	r2, [pc, #124]	; (8000f58 <HAL_TIM_MspPostInit+0xe8>)
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	6153      	str	r3, [r2, #20]
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <HAL_TIM_MspPostInit+0xe8>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <HAL_TIM_MspPostInit+0xe8>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <HAL_TIM_MspPostInit+0xe8>)
 8000ef4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ef8:	6153      	str	r3, [r2, #20]
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_TIM_MspPostInit+0xe8>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000f06:	2350      	movs	r3, #80	; 0x50
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f16:	2302      	movs	r3, #2
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f000 fb92 	bl	800164c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <HAL_TIM_MspPostInit+0xec>)
 8000f46:	f000 fb81 	bl	800164c <HAL_GPIO_Init>
}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	; 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40012c00 	.word	0x40012c00
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48000800 	.word	0x48000800
 8000f60:	40000400 	.word	0x40000400

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <NMI_Handler+0x4>

08000f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <MemManage_Handler+0x4>

08000f76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb0:	f000 f890 	bl	80010d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8000fb4:	f000 fb43 	bl	800163e <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <TIM4_IRQHandler+0x10>)
 8000fc2:	f002 fa2b 	bl	800341c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000008c 	.word	0x2000008c

08000fd0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <SystemInit+0x20>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <SystemInit+0x20>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <Reset_Handler>:
 8000ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800102c <LoopForever+0x2>
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <LoopForever+0x6>)
 8000ffa:	490e      	ldr	r1, [pc, #56]	; (8001034 <LoopForever+0xa>)
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <LoopForever+0xe>)
 8000ffe:	2300      	movs	r3, #0
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:
 8001002:	58d4      	ldr	r4, [r2, r3]
 8001004:	50c4      	str	r4, [r0, r3]
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:
 8001008:	18c4      	adds	r4, r0, r3
 800100a:	428c      	cmp	r4, r1
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <LoopForever+0x12>)
 8001010:	4c0b      	ldr	r4, [pc, #44]	; (8001040 <LoopForever+0x16>)
 8001012:	2300      	movs	r3, #0
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:
 800101a:	42a2      	cmp	r2, r4
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>
 800101e:	f7ff ffd7 	bl	8000fd0 <SystemInit>
 8001022:	f003 fab5 	bl	8004590 <__libc_init_array>
 8001026:	f7ff fb17 	bl	8000658 <main>

0800102a <LoopForever>:
 800102a:	e7fe      	b.n	800102a <LoopForever>
 800102c:	20010000 	.word	0x20010000
 8001030:	20000000 	.word	0x20000000
 8001034:	2000000c 	.word	0x2000000c
 8001038:	08004640 	.word	0x08004640
 800103c:	2000000c 	.word	0x2000000c
 8001040:	20000294 	.word	0x20000294

08001044 <ADC1_2_IRQHandler>:
 8001044:	e7fe      	b.n	8001044 <ADC1_2_IRQHandler>
	...

08001048 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_Init+0x28>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_Init+0x28>)
 8001052:	f043 0310 	orr.w	r3, r3, #16
 8001056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	2003      	movs	r0, #3
 800105a:	f000 faaf 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105e:	2000      	movs	r0, #0
 8001060:	f000 f808 	bl	8001074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001064:	f7ff fdc2 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40022000 	.word	0x40022000

08001074 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x54>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0x58>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	fbb3 f3f1 	udiv	r3, r3, r1
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fac7 	bl	8001626 <HAL_SYSTICK_Config>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e00e      	b.n	80010c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d80a      	bhi.n	80010be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f000 fa8f 	bl	80015d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <HAL_InitTick+0x5c>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e000      	b.n	80010c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000008 	.word	0x20000008
 80010d0:	20000004 	.word	0x20000004

080010d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x20>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x24>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_IncTick+0x24>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000008 	.word	0x20000008
 80010f8:	20000290 	.word	0x20000290

080010fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_GetTick+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000290 	.word	0x20000290

08001114 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d007      	beq.n	8001136 <HAL_COMP_Init+0x22>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800112c:	b2db      	uxtb	r3, r3
 800112e:	f003 0310 	and.w	r3, r3, #16
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	75fb      	strb	r3, [r7, #23]
 800113a:	e05e      	b.n	80011fa <HAL_COMP_Init+0xe6>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <HAL_COMP_Init+0xf0>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a30      	ldr	r2, [pc, #192]	; (8001204 <HAL_COMP_Init+0xf0>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <HAL_COMP_Init+0xf0>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff fd6d 	bl	8000c34 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d103      	bne.n	800116e <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4313      	orrs	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f023 0202 	bic.w	r2, r3, #2
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	4313      	orrs	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	695a      	ldr	r2, [r3, #20]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69da      	ldr	r2, [r3, #28]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4313      	orrs	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1a      	ldr	r2, [r3, #32]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 80011fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000

08001208 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d007      	beq.n	800122e <HAL_COMP_Start+0x26>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <HAL_COMP_Start+0x2c>
  {
    status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e0c4      	b.n	80013be <HAL_COMP_Start+0x1b6>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b01      	cmp	r3, #1
 800123e:	f040 80bc 	bne.w	80013ba <HAL_COMP_Start+0x1b2>
    {
      /* Get the EXTI Line output configuration */
      extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a61      	ldr	r2, [pc, #388]	; (80013cc <HAL_COMP_Start+0x1c4>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d028      	beq.n	800129e <HAL_COMP_Start+0x96>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a5f      	ldr	r2, [pc, #380]	; (80013d0 <HAL_COMP_Start+0x1c8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d020      	beq.n	8001298 <HAL_COMP_Start+0x90>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a5e      	ldr	r2, [pc, #376]	; (80013d4 <HAL_COMP_Start+0x1cc>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d018      	beq.n	8001292 <HAL_COMP_Start+0x8a>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a5c      	ldr	r2, [pc, #368]	; (80013d8 <HAL_COMP_Start+0x1d0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d010      	beq.n	800128c <HAL_COMP_Start+0x84>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a5b      	ldr	r2, [pc, #364]	; (80013dc <HAL_COMP_Start+0x1d4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d008      	beq.n	8001286 <HAL_COMP_Start+0x7e>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a59      	ldr	r2, [pc, #356]	; (80013e0 <HAL_COMP_Start+0x1d8>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_COMP_Start+0x7a>
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <HAL_COMP_Start+0x9a>
 8001282:	2302      	movs	r3, #2
 8001284:	e00d      	b.n	80012a2 <HAL_COMP_Start+0x9a>
 8001286:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800128a:	e00a      	b.n	80012a2 <HAL_COMP_Start+0x9a>
 800128c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001290:	e007      	b.n	80012a2 <HAL_COMP_Start+0x9a>
 8001292:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001296:	e004      	b.n	80012a2 <HAL_COMP_Start+0x9a>
 8001298:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800129c:	e001      	b.n	80012a2 <HAL_COMP_Start+0x9a>
 800129e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012a2:	60bb      	str	r3, [r7, #8]

      /* Configure the event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_EVENT_RISING | COMP_TRIGGERMODE_EVENT_FALLING)) != RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d077      	beq.n	80013a0 <HAL_COMP_Start+0x198>
      {
        /* Configure the event trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_RISING) != RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d012      	beq.n	80012e2 <HAL_COMP_Start+0xda>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <HAL_COMP_Start+0xcc>
 80012c6:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 80012c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ca:	4946      	ldr	r1, [pc, #280]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	628b      	str	r3, [r1, #40]	; 0x28
 80012d2:	e01a      	b.n	800130a <HAL_COMP_Start+0x102>
 80012d4:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	4942      	ldr	r1, [pc, #264]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	4313      	orrs	r3, r2
 80012de:	608b      	str	r3, [r1, #8]
 80012e0:	e013      	b.n	800130a <HAL_COMP_Start+0x102>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <HAL_COMP_Start+0xf4>
 80012ec:	4b3d      	ldr	r3, [pc, #244]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 80012ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	493b      	ldr	r1, [pc, #236]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	628b      	str	r3, [r1, #40]	; 0x28
 80012fa:	e006      	b.n	800130a <HAL_COMP_Start+0x102>
 80012fc:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	43db      	mvns	r3, r3
 8001304:	4937      	ldr	r1, [pc, #220]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 8001306:	4013      	ands	r3, r2
 8001308:	608b      	str	r3, [r1, #8]
        }

        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_FALLING) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	f003 0320 	and.w	r3, r3, #32
 8001312:	2b00      	cmp	r3, #0
 8001314:	d012      	beq.n	800133c <HAL_COMP_Start+0x134>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d006      	beq.n	800132e <HAL_COMP_Start+0x126>
 8001320:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 8001322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001324:	492f      	ldr	r1, [pc, #188]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	4313      	orrs	r3, r2
 800132a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800132c:	e01a      	b.n	8001364 <HAL_COMP_Start+0x15c>
 800132e:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	492c      	ldr	r1, [pc, #176]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4313      	orrs	r3, r2
 8001338:	60cb      	str	r3, [r1, #12]
 800133a:	e013      	b.n	8001364 <HAL_COMP_Start+0x15c>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <HAL_COMP_Start+0x14e>
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 8001348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	43db      	mvns	r3, r3
 800134e:	4925      	ldr	r1, [pc, #148]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 8001350:	4013      	ands	r3, r2
 8001352:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001354:	e006      	b.n	8001364 <HAL_COMP_Start+0x15c>
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	43db      	mvns	r3, r3
 800135e:	4921      	ldr	r1, [pc, #132]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 8001360:	4013      	ands	r3, r2
 8001362:	60cb      	str	r3, [r1, #12]
        }

        /* Enable EXTI event generation */
        COMP_EXTI_ENABLE_EVENT(extiline);
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d006      	beq.n	800137c <HAL_COMP_Start+0x174>
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 8001370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001372:	491c      	ldr	r1, [pc, #112]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4313      	orrs	r3, r2
 8001378:	624b      	str	r3, [r1, #36]	; 0x24
 800137a:	e005      	b.n	8001388 <HAL_COMP_Start+0x180>
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	4918      	ldr	r1, [pc, #96]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]

        /* Clear COMP EXTI pending bit */
        COMP_EXTI_CLEAR_FLAG(extiline);
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_COMP_Start+0x192>
 8001392:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	6353      	str	r3, [r2, #52]	; 0x34
 8001398:	e002      	b.n	80013a0 <HAL_COMP_Start+0x198>
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <HAL_COMP_Start+0x1dc>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	6153      	str	r3, [r2, #20]
      }

      /* Enable the selected comparator */
      __HAL_COMP_ENABLE(hcomp);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_BUSY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2202      	movs	r2, #2
 80013b4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80013b8:	e001      	b.n	80013be <HAL_COMP_Start+0x1b6>
    }
    else
    {
      status = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80013be:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	4001001c 	.word	0x4001001c
 80013d0:	40010020 	.word	0x40010020
 80013d4:	40010024 	.word	0x40010024
 80013d8:	40010028 	.word	0x40010028
 80013dc:	4001002c 	.word	0x4001002c
 80013e0:	40010030 	.word	0x40010030
 80013e4:	40010400 	.word	0x40010400

080013e8 <HAL_COMP_GetOutputLevel>:
  *         @arg @ref COMP_OUTPUTLEVEL_LOW
  *         @arg @ref COMP_OUTPUTLEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t level = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  level = READ_BIT(hcomp->Instance->CSR, COMP_CSR_COMPxOUT);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80013fe:	60fb      	str	r3, [r7, #12]

  if (level != 0U)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <HAL_COMP_GetOutputLevel+0x24>
  {
    return (COMP_OUTPUTLEVEL_HIGH);
 8001406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800140a:	e000      	b.n	800140e <HAL_COMP_GetOutputLevel+0x26>
  }
  return (COMP_OUTPUTLEVEL_LOW);
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db0b      	blt.n	80014aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	4907      	ldr	r1, [pc, #28]	; (80014b8 <__NVIC_EnableIRQ+0x38>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2001      	movs	r0, #1
 80014a2:	fa00 f202 	lsl.w	r2, r0, r2
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000e100 	.word	0xe000e100

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db0a      	blt.n	80014e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	490c      	ldr	r1, [pc, #48]	; (8001508 <__NVIC_SetPriority+0x4c>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	440b      	add	r3, r1
 80014e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e4:	e00a      	b.n	80014fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4908      	ldr	r1, [pc, #32]	; (800150c <__NVIC_SetPriority+0x50>)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	3b04      	subs	r3, #4
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	761a      	strb	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000e100 	.word	0xe000e100
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	2b04      	cmp	r3, #4
 800152c:	bf28      	it	cs
 800152e:	2304      	movcs	r3, #4
 8001530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3304      	adds	r3, #4
 8001536:	2b06      	cmp	r3, #6
 8001538:	d902      	bls.n	8001540 <NVIC_EncodePriority+0x30>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b03      	subs	r3, #3
 800153e:	e000      	b.n	8001542 <NVIC_EncodePriority+0x32>
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43d9      	mvns	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	4313      	orrs	r3, r2
         );
}
 800156a:	4618      	mov	r0, r3
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f7ff ff8e 	bl	80014bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff29 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff3e 	bl	8001464 <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ff8e 	bl	8001510 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff5d 	bl	80014bc <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff31 	bl	8001480 <__NVIC_EnableIRQ>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ffa2 	bl	8001578 <SysTick_Config>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165a:	e160      	b.n	800191e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2101      	movs	r1, #1
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	4013      	ands	r3, r2
 800166a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 8152 	beq.w	8001918 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b01      	cmp	r3, #1
 800167e:	d005      	beq.n	800168c <HAL_GPIO_Init+0x40>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d130      	bne.n	80016ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c2:	2201      	movs	r2, #1
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	f003 0201 	and.w	r2, r3, #1
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d017      	beq.n	800172a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d123      	bne.n	800177e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3208      	adds	r2, #8
 800173e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	220f      	movs	r2, #15
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	08da      	lsrs	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3208      	adds	r2, #8
 8001778:	6939      	ldr	r1, [r7, #16]
 800177a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0203 	and.w	r2, r3, #3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 80ac 	beq.w	8001918 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c0:	4b5e      	ldr	r3, [pc, #376]	; (800193c <HAL_GPIO_Init+0x2f0>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a5d      	ldr	r2, [pc, #372]	; (800193c <HAL_GPIO_Init+0x2f0>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b5b      	ldr	r3, [pc, #364]	; (800193c <HAL_GPIO_Init+0x2f0>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017d8:	4a59      	ldr	r2, [pc, #356]	; (8001940 <HAL_GPIO_Init+0x2f4>)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3302      	adds	r3, #2
 80017e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	220f      	movs	r2, #15
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001802:	d025      	beq.n	8001850 <HAL_GPIO_Init+0x204>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a4f      	ldr	r2, [pc, #316]	; (8001944 <HAL_GPIO_Init+0x2f8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d01f      	beq.n	800184c <HAL_GPIO_Init+0x200>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a4e      	ldr	r2, [pc, #312]	; (8001948 <HAL_GPIO_Init+0x2fc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d019      	beq.n	8001848 <HAL_GPIO_Init+0x1fc>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a4d      	ldr	r2, [pc, #308]	; (800194c <HAL_GPIO_Init+0x300>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d013      	beq.n	8001844 <HAL_GPIO_Init+0x1f8>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a4c      	ldr	r2, [pc, #304]	; (8001950 <HAL_GPIO_Init+0x304>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d00d      	beq.n	8001840 <HAL_GPIO_Init+0x1f4>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a4b      	ldr	r2, [pc, #300]	; (8001954 <HAL_GPIO_Init+0x308>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d007      	beq.n	800183c <HAL_GPIO_Init+0x1f0>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a4a      	ldr	r2, [pc, #296]	; (8001958 <HAL_GPIO_Init+0x30c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d101      	bne.n	8001838 <HAL_GPIO_Init+0x1ec>
 8001834:	2306      	movs	r3, #6
 8001836:	e00c      	b.n	8001852 <HAL_GPIO_Init+0x206>
 8001838:	2307      	movs	r3, #7
 800183a:	e00a      	b.n	8001852 <HAL_GPIO_Init+0x206>
 800183c:	2305      	movs	r3, #5
 800183e:	e008      	b.n	8001852 <HAL_GPIO_Init+0x206>
 8001840:	2304      	movs	r3, #4
 8001842:	e006      	b.n	8001852 <HAL_GPIO_Init+0x206>
 8001844:	2303      	movs	r3, #3
 8001846:	e004      	b.n	8001852 <HAL_GPIO_Init+0x206>
 8001848:	2302      	movs	r3, #2
 800184a:	e002      	b.n	8001852 <HAL_GPIO_Init+0x206>
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <HAL_GPIO_Init+0x206>
 8001850:	2300      	movs	r3, #0
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	f002 0203 	and.w	r2, r2, #3
 8001858:	0092      	lsls	r2, r2, #2
 800185a:	4093      	lsls	r3, r2
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001862:	4937      	ldr	r1, [pc, #220]	; (8001940 <HAL_GPIO_Init+0x2f4>)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001870:	4b3a      	ldr	r3, [pc, #232]	; (800195c <HAL_GPIO_Init+0x310>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001894:	4a31      	ldr	r2, [pc, #196]	; (800195c <HAL_GPIO_Init+0x310>)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800189a:	4b30      	ldr	r3, [pc, #192]	; (800195c <HAL_GPIO_Init+0x310>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018be:	4a27      	ldr	r2, [pc, #156]	; (800195c <HAL_GPIO_Init+0x310>)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c4:	4b25      	ldr	r3, [pc, #148]	; (800195c <HAL_GPIO_Init+0x310>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018e8:	4a1c      	ldr	r2, [pc, #112]	; (800195c <HAL_GPIO_Init+0x310>)
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ee:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_GPIO_Init+0x310>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001912:	4a12      	ldr	r2, [pc, #72]	; (800195c <HAL_GPIO_Init+0x310>)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	f47f ae97 	bne.w	800165c <HAL_GPIO_Init+0x10>
  }
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40021000 	.word	0x40021000
 8001940:	40010000 	.word	0x40010000
 8001944:	48000400 	.word	0x48000400
 8001948:	48000800 	.word	0x48000800
 800194c:	48000c00 	.word	0x48000c00
 8001950:	48001000 	.word	0x48001000
 8001954:	48001400 	.word	0x48001400
 8001958:	48001800 	.word	0x48001800
 800195c:	40010400 	.word	0x40010400

08001960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	807b      	strh	r3, [r7, #2]
 800196c:	4613      	mov	r3, r2
 800196e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001970:	787b      	ldrb	r3, [r7, #1]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800197c:	e002      	b.n	8001984 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800197e:	887a      	ldrh	r2, [r7, #2]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001996:	af00      	add	r7, sp, #0
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f000 bf01 	b.w	80027ac <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 8160 	beq.w	8001c7a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019ba:	4bae      	ldr	r3, [pc, #696]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d00c      	beq.n	80019e0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c6:	4bab      	ldr	r3, [pc, #684]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d159      	bne.n	8001a86 <HAL_RCC_OscConfig+0xf6>
 80019d2:	4ba8      	ldr	r3, [pc, #672]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80019da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019de:	d152      	bne.n	8001a86 <HAL_RCC_OscConfig+0xf6>
 80019e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80019ec:	fa93 f3a3 	rbit	r3, r3
 80019f0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019f4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d102      	bne.n	8001a12 <HAL_RCC_OscConfig+0x82>
 8001a0c:	4b99      	ldr	r3, [pc, #612]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	e015      	b.n	8001a3e <HAL_RCC_OscConfig+0xae>
 8001a12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a16:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001a26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a2a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a2e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a3a:	4b8e      	ldr	r3, [pc, #568]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a42:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001a46:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001a4a:	fa92 f2a2 	rbit	r2, r2
 8001a4e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001a52:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a56:	fab2 f282 	clz	r2, r2
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	f042 0220 	orr.w	r2, r2, #32
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	f002 021f 	and.w	r2, r2, #31
 8001a66:	2101      	movs	r1, #1
 8001a68:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8102 	beq.w	8001c78 <HAL_RCC_OscConfig+0x2e8>
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f040 80fc 	bne.w	8001c78 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	f000 be93 	b.w	80027ac <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a90:	d106      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x110>
 8001a92:	4b78      	ldr	r3, [pc, #480]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a77      	ldr	r2, [pc, #476]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e030      	b.n	8001b02 <HAL_RCC_OscConfig+0x172>
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x134>
 8001aaa:	4b72      	ldr	r3, [pc, #456]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a71      	ldr	r2, [pc, #452]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b6f      	ldr	r3, [pc, #444]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6e      	ldr	r2, [pc, #440]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e01e      	b.n	8001b02 <HAL_RCC_OscConfig+0x172>
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ace:	d10c      	bne.n	8001aea <HAL_RCC_OscConfig+0x15a>
 8001ad0:	4b68      	ldr	r3, [pc, #416]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a67      	ldr	r2, [pc, #412]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001ad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a64      	ldr	r2, [pc, #400]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	e00b      	b.n	8001b02 <HAL_RCC_OscConfig+0x172>
 8001aea:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a61      	ldr	r2, [pc, #388]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b5f      	ldr	r3, [pc, #380]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a5e      	ldr	r2, [pc, #376]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b00:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d059      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff faf6 	bl	80010fc <HAL_GetTick>
 8001b10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b14:	e00a      	b.n	8001b2c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b16:	f7ff faf1 	bl	80010fc <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d902      	bls.n	8001b2c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	f000 be40 	b.w	80027ac <HAL_RCC_OscConfig+0xe1c>
 8001b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b30:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001b40:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b44:	fab3 f383 	clz	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d102      	bne.n	8001b5e <HAL_RCC_OscConfig+0x1ce>
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	e015      	b.n	8001b8a <HAL_RCC_OscConfig+0x1fa>
 8001b5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b62:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001b6a:	fa93 f3a3 	rbit	r3, r3
 8001b6e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001b72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b76:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b7a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b86:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b8e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001b92:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001b96:	fa92 f2a2 	rbit	r2, r2
 8001b9a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001b9e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ba2:	fab2 f282 	clz	r2, r2
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	f042 0220 	orr.w	r2, r2, #32
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	f002 021f 	and.w	r2, r2, #31
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0ab      	beq.n	8001b16 <HAL_RCC_OscConfig+0x186>
 8001bbe:	e05c      	b.n	8001c7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fa9c 	bl	80010fc <HAL_GetTick>
 8001bc4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bca:	f7ff fa97 	bl	80010fc <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d902      	bls.n	8001be0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	f000 bde6 	b.w	80027ac <HAL_RCC_OscConfig+0xe1c>
 8001be0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001bf4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d102      	bne.n	8001c12 <HAL_RCC_OscConfig+0x282>
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	e015      	b.n	8001c3e <HAL_RCC_OscConfig+0x2ae>
 8001c12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c16:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001c26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c2a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001c32:	fa93 f3a3 	rbit	r3, r3
 8001c36:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_RCC_OscConfig+0x2e4>)
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c42:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001c46:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001c4a:	fa92 f2a2 	rbit	r2, r2
 8001c4e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001c52:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c56:	fab2 f282 	clz	r2, r2
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	f042 0220 	orr.w	r2, r2, #32
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f002 021f 	and.w	r2, r2, #31
 8001c66:	2101      	movs	r1, #1
 8001c68:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1ab      	bne.n	8001bca <HAL_RCC_OscConfig+0x23a>
 8001c72:	e002      	b.n	8001c7a <HAL_RCC_OscConfig+0x2ea>
 8001c74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 8170 	beq.w	8001f6a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c8a:	4bd0      	ldr	r3, [pc, #832]	; (8001fcc <HAL_RCC_OscConfig+0x63c>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00c      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c96:	4bcd      	ldr	r3, [pc, #820]	; (8001fcc <HAL_RCC_OscConfig+0x63c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d16d      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3ee>
 8001ca2:	4bca      	ldr	r3, [pc, #808]	; (8001fcc <HAL_RCC_OscConfig+0x63c>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cae:	d166      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3ee>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001cc2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	095b      	lsrs	r3, r3, #5
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d102      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x350>
 8001cda:	4bbc      	ldr	r3, [pc, #752]	; (8001fcc <HAL_RCC_OscConfig+0x63c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	e013      	b.n	8001d08 <HAL_RCC_OscConfig+0x378>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001cf8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001cfc:	fa93 f3a3 	rbit	r3, r3
 8001d00:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d04:	4bb1      	ldr	r3, [pc, #708]	; (8001fcc <HAL_RCC_OscConfig+0x63c>)
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	2202      	movs	r2, #2
 8001d0a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001d0e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001d12:	fa92 f2a2 	rbit	r2, r2
 8001d16:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001d1a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d1e:	fab2 f282 	clz	r2, r2
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	f042 0220 	orr.w	r2, r2, #32
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	f002 021f 	and.w	r2, r2, #31
 8001d2e:	2101      	movs	r1, #1
 8001d30:	fa01 f202 	lsl.w	r2, r1, r2
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <HAL_RCC_OscConfig+0x3ba>
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d002      	beq.n	8001d4a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	f000 bd31 	b.w	80027ac <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4ba0      	ldr	r3, [pc, #640]	; (8001fcc <HAL_RCC_OscConfig+0x63c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	21f8      	movs	r1, #248	; 0xf8
 8001d5a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001d62:	fa91 f1a1 	rbit	r1, r1
 8001d66:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001d6a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d6e:	fab1 f181 	clz	r1, r1
 8001d72:	b2c9      	uxtb	r1, r1
 8001d74:	408b      	lsls	r3, r1
 8001d76:	4995      	ldr	r1, [pc, #596]	; (8001fcc <HAL_RCC_OscConfig+0x63c>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7c:	e0f5      	b.n	8001f6a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 8085 	beq.w	8001e94 <HAL_RCC_OscConfig+0x504>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001d9c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001daa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	461a      	mov	r2, r3
 8001db2:	2301      	movs	r3, #1
 8001db4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff f9a1 	bl	80010fc <HAL_GetTick>
 8001dba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f99c 	bl	80010fc <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d902      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	f000 bceb 	b.w	80027ac <HAL_RCC_OscConfig+0xe1c>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001de0:	fa93 f3a3 	rbit	r3, r3
 8001de4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001de8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d102      	bne.n	8001e06 <HAL_RCC_OscConfig+0x476>
 8001e00:	4b72      	ldr	r3, [pc, #456]	; (8001fcc <HAL_RCC_OscConfig+0x63c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	e013      	b.n	8001e2e <HAL_RCC_OscConfig+0x49e>
 8001e06:	2302      	movs	r3, #2
 8001e08:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001e18:	2302      	movs	r3, #2
 8001e1a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e1e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e2a:	4b68      	ldr	r3, [pc, #416]	; (8001fcc <HAL_RCC_OscConfig+0x63c>)
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001e34:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001e38:	fa92 f2a2 	rbit	r2, r2
 8001e3c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001e40:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e44:	fab2 f282 	clz	r2, r2
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f042 0220 	orr.w	r2, r2, #32
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	f002 021f 	and.w	r2, r2, #31
 8001e54:	2101      	movs	r1, #1
 8001e56:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0af      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e60:	4b5a      	ldr	r3, [pc, #360]	; (8001fcc <HAL_RCC_OscConfig+0x63c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	21f8      	movs	r1, #248	; 0xf8
 8001e70:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001e78:	fa91 f1a1 	rbit	r1, r1
 8001e7c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001e80:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e84:	fab1 f181 	clz	r1, r1
 8001e88:	b2c9      	uxtb	r1, r1
 8001e8a:	408b      	lsls	r3, r1
 8001e8c:	494f      	ldr	r1, [pc, #316]	; (8001fcc <HAL_RCC_OscConfig+0x63c>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]
 8001e92:	e06a      	b.n	8001f6a <HAL_RCC_OscConfig+0x5da>
 8001e94:	2301      	movs	r3, #1
 8001e96:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001ea6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f91c 	bl	80010fc <HAL_GetTick>
 8001ec4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec8:	e00a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eca:	f7ff f917 	bl	80010fc <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d902      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	f000 bc66 	b.w	80027ac <HAL_RCC_OscConfig+0xe1c>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001ef2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d102      	bne.n	8001f10 <HAL_RCC_OscConfig+0x580>
 8001f0a:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <HAL_RCC_OscConfig+0x63c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	e013      	b.n	8001f38 <HAL_RCC_OscConfig+0x5a8>
 8001f10:	2302      	movs	r3, #2
 8001f12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001f22:	2302      	movs	r3, #2
 8001f24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f28:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f34:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <HAL_RCC_OscConfig+0x63c>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	2202      	movs	r2, #2
 8001f3a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001f3e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f42:	fa92 f2a2 	rbit	r2, r2
 8001f46:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001f4a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f4e:	fab2 f282 	clz	r2, r2
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	f042 0220 	orr.w	r2, r2, #32
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	f002 021f 	and.w	r2, r2, #31
 8001f5e:	2101      	movs	r1, #1
 8001f60:	fa01 f202 	lsl.w	r2, r1, r2
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1af      	bne.n	8001eca <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80da 	beq.w	800212e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d069      	beq.n	8002058 <HAL_RCC_OscConfig+0x6c8>
 8001f84:	2301      	movs	r3, #1
 8001f86:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001f96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_OscConfig+0x640>)
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2301      	movs	r3, #1
 8001fac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fae:	f7ff f8a5 	bl	80010fc <HAL_GetTick>
 8001fb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb6:	e00d      	b.n	8001fd4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb8:	f7ff f8a0 	bl	80010fc <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d905      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e3ef      	b.n	80027ac <HAL_RCC_OscConfig+0xe1c>
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	10908120 	.word	0x10908120
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001fde:	fa93 f2a3 	rbit	r2, r3
 8001fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001fec:	2202      	movs	r2, #2
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	fa93 f2a3 	rbit	r2, r3
 8001ffa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002004:	2202      	movs	r2, #2
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	fa93 f2a3 	rbit	r2, r3
 8002012:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002016:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002018:	4ba4      	ldr	r3, [pc, #656]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 800201a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800201c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002020:	2102      	movs	r1, #2
 8002022:	6019      	str	r1, [r3, #0]
 8002024:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fa93 f1a3 	rbit	r1, r3
 800202e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002032:	6019      	str	r1, [r3, #0]
  return result;
 8002034:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	2101      	movs	r1, #1
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0b0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x628>
 8002056:	e06a      	b.n	800212e <HAL_RCC_OscConfig+0x79e>
 8002058:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	fa93 f2a3 	rbit	r2, r3
 800206a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800206e:	601a      	str	r2, [r3, #0]
  return result;
 8002070:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002074:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	461a      	mov	r2, r3
 800207e:	4b8c      	ldr	r3, [pc, #560]	; (80022b0 <HAL_RCC_OscConfig+0x920>)
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	461a      	mov	r2, r3
 8002086:	2300      	movs	r3, #0
 8002088:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208a:	f7ff f837 	bl	80010fc <HAL_GetTick>
 800208e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002092:	e009      	b.n	80020a8 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002094:	f7ff f832 	bl	80010fc <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e381      	b.n	80027ac <HAL_RCC_OscConfig+0xe1c>
 80020a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020ac:	2202      	movs	r2, #2
 80020ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	fa93 f2a3 	rbit	r2, r3
 80020ba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020c4:	2202      	movs	r2, #2
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	fa93 f2a3 	rbit	r2, r3
 80020d2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020dc:	2202      	movs	r2, #2
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	fa93 f2a3 	rbit	r2, r3
 80020ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80020ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f0:	4b6e      	ldr	r3, [pc, #440]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 80020f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020f8:	2102      	movs	r1, #2
 80020fa:	6019      	str	r1, [r3, #0]
 80020fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	fa93 f1a3 	rbit	r1, r3
 8002106:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800210a:	6019      	str	r1, [r3, #0]
  return result;
 800210c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f003 031f 	and.w	r3, r3, #31
 8002122:	2101      	movs	r1, #1
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1b2      	bne.n	8002094 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8157 	beq.w	80023ec <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213e:	2300      	movs	r3, #0
 8002140:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002144:	4b59      	ldr	r3, [pc, #356]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d112      	bne.n	8002176 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002150:	4b56      	ldr	r3, [pc, #344]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	4a55      	ldr	r2, [pc, #340]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 8002156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215a:	61d3      	str	r3, [r2, #28]
 800215c:	4b53      	ldr	r3, [pc, #332]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	f107 030c 	add.w	r3, r7, #12
 800216e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002170:	2301      	movs	r3, #1
 8002172:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	4b4f      	ldr	r3, [pc, #316]	; (80022b4 <HAL_RCC_OscConfig+0x924>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d11a      	bne.n	80021b8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002182:	4b4c      	ldr	r3, [pc, #304]	; (80022b4 <HAL_RCC_OscConfig+0x924>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a4b      	ldr	r2, [pc, #300]	; (80022b4 <HAL_RCC_OscConfig+0x924>)
 8002188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218e:	f7fe ffb5 	bl	80010fc <HAL_GetTick>
 8002192:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	e009      	b.n	80021ac <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002198:	f7fe ffb0 	bl	80010fc <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b64      	cmp	r3, #100	; 0x64
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e2ff      	b.n	80027ac <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	4b41      	ldr	r3, [pc, #260]	; (80022b4 <HAL_RCC_OscConfig+0x924>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0ef      	beq.n	8002198 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d106      	bne.n	80021d0 <HAL_RCC_OscConfig+0x840>
 80021c2:	4b3a      	ldr	r3, [pc, #232]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	4a39      	ldr	r2, [pc, #228]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6213      	str	r3, [r2, #32]
 80021ce:	e02f      	b.n	8002230 <HAL_RCC_OscConfig+0x8a0>
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x864>
 80021da:	4b34      	ldr	r3, [pc, #208]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4a33      	ldr	r2, [pc, #204]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	6213      	str	r3, [r2, #32]
 80021e6:	4b31      	ldr	r3, [pc, #196]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	4a30      	ldr	r2, [pc, #192]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 80021ec:	f023 0304 	bic.w	r3, r3, #4
 80021f0:	6213      	str	r3, [r2, #32]
 80021f2:	e01d      	b.n	8002230 <HAL_RCC_OscConfig+0x8a0>
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b05      	cmp	r3, #5
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x888>
 80021fe:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4a2a      	ldr	r2, [pc, #168]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	6213      	str	r3, [r2, #32]
 800220a:	4b28      	ldr	r3, [pc, #160]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	4a27      	ldr	r2, [pc, #156]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6213      	str	r3, [r2, #32]
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0x8a0>
 8002218:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a23      	ldr	r2, [pc, #140]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 800221e:	f023 0301 	bic.w	r3, r3, #1
 8002222:	6213      	str	r3, [r2, #32]
 8002224:	4b21      	ldr	r3, [pc, #132]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4a20      	ldr	r2, [pc, #128]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 800222a:	f023 0304 	bic.w	r3, r3, #4
 800222e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d06a      	beq.n	8002310 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223a:	f7fe ff5f 	bl	80010fc <HAL_GetTick>
 800223e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002242:	e00b      	b.n	800225c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7fe ff5a 	bl	80010fc <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e2a7      	b.n	80027ac <HAL_RCC_OscConfig+0xe1c>
 800225c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002260:	2202      	movs	r2, #2
 8002262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	fa93 f2a3 	rbit	r2, r3
 800226e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002278:	2202      	movs	r2, #2
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	fa93 f2a3 	rbit	r2, r3
 8002286:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800228a:	601a      	str	r2, [r3, #0]
  return result;
 800228c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002290:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d108      	bne.n	80022b8 <HAL_RCC_OscConfig+0x928>
 80022a6:	4b01      	ldr	r3, [pc, #4]	; (80022ac <HAL_RCC_OscConfig+0x91c>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	e013      	b.n	80022d4 <HAL_RCC_OscConfig+0x944>
 80022ac:	40021000 	.word	0x40021000
 80022b0:	10908120 	.word	0x10908120
 80022b4:	40007000 	.word	0x40007000
 80022b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022bc:	2202      	movs	r2, #2
 80022be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	fa93 f2a3 	rbit	r2, r3
 80022ca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	4bc0      	ldr	r3, [pc, #768]	; (80025d4 <HAL_RCC_OscConfig+0xc44>)
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80022d8:	2102      	movs	r1, #2
 80022da:	6011      	str	r1, [r2, #0]
 80022dc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	fa92 f1a2 	rbit	r1, r2
 80022e6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80022ea:	6011      	str	r1, [r2, #0]
  return result;
 80022ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	fab2 f282 	clz	r2, r2
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f002 021f 	and.w	r2, r2, #31
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f202 	lsl.w	r2, r1, r2
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d09a      	beq.n	8002244 <HAL_RCC_OscConfig+0x8b4>
 800230e:	e063      	b.n	80023d8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe fef4 	bl	80010fc <HAL_GetTick>
 8002314:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002318:	e00b      	b.n	8002332 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7fe feef 	bl	80010fc <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	; 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e23c      	b.n	80027ac <HAL_RCC_OscConfig+0xe1c>
 8002332:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002336:	2202      	movs	r2, #2
 8002338:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	fa93 f2a3 	rbit	r2, r3
 8002344:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800234e:	2202      	movs	r2, #2
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002360:	601a      	str	r2, [r3, #0]
  return result;
 8002362:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002366:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f043 0302 	orr.w	r3, r3, #2
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d102      	bne.n	8002382 <HAL_RCC_OscConfig+0x9f2>
 800237c:	4b95      	ldr	r3, [pc, #596]	; (80025d4 <HAL_RCC_OscConfig+0xc44>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	e00d      	b.n	800239e <HAL_RCC_OscConfig+0xa0e>
 8002382:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002386:	2202      	movs	r2, #2
 8002388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	fa93 f2a3 	rbit	r2, r3
 8002394:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	4b8e      	ldr	r3, [pc, #568]	; (80025d4 <HAL_RCC_OscConfig+0xc44>)
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80023a2:	2102      	movs	r1, #2
 80023a4:	6011      	str	r1, [r2, #0]
 80023a6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	fa92 f1a2 	rbit	r1, r2
 80023b0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023b4:	6011      	str	r1, [r2, #0]
  return result;
 80023b6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	fab2 f282 	clz	r2, r2
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f002 021f 	and.w	r2, r2, #31
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f202 	lsl.w	r2, r1, r2
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1a0      	bne.n	800231a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023d8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e0:	4b7c      	ldr	r3, [pc, #496]	; (80025d4 <HAL_RCC_OscConfig+0xc44>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	4a7b      	ldr	r2, [pc, #492]	; (80025d4 <HAL_RCC_OscConfig+0xc44>)
 80023e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 81d9 	beq.w	80027aa <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f8:	4b76      	ldr	r3, [pc, #472]	; (80025d4 <HAL_RCC_OscConfig+0xc44>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b08      	cmp	r3, #8
 8002402:	f000 81a6 	beq.w	8002752 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	2b02      	cmp	r3, #2
 800240e:	f040 811e 	bne.w	800264e <HAL_RCC_OscConfig+0xcbe>
 8002412:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002416:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800241a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f2a3 	rbit	r2, r3
 8002426:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800242a:	601a      	str	r2, [r3, #0]
  return result;
 800242c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002430:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800243c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	461a      	mov	r2, r3
 8002444:	2300      	movs	r3, #0
 8002446:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7fe fe58 	bl	80010fc <HAL_GetTick>
 800244c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002450:	e009      	b.n	8002466 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe fe53 	bl	80010fc <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e1a2      	b.n	80027ac <HAL_RCC_OscConfig+0xe1c>
 8002466:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800246a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800246e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	fa93 f2a3 	rbit	r2, r3
 800247a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800247e:	601a      	str	r2, [r3, #0]
  return result;
 8002480:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002484:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002486:	fab3 f383 	clz	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	095b      	lsrs	r3, r3, #5
 800248e:	b2db      	uxtb	r3, r3
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d102      	bne.n	80024a0 <HAL_RCC_OscConfig+0xb10>
 800249a:	4b4e      	ldr	r3, [pc, #312]	; (80025d4 <HAL_RCC_OscConfig+0xc44>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	e01b      	b.n	80024d8 <HAL_RCC_OscConfig+0xb48>
 80024a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	fa93 f2a3 	rbit	r2, r3
 80024b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	fa93 f2a3 	rbit	r2, r3
 80024ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	4b3f      	ldr	r3, [pc, #252]	; (80025d4 <HAL_RCC_OscConfig+0xc44>)
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80024dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024e0:	6011      	str	r1, [r2, #0]
 80024e2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	fa92 f1a2 	rbit	r1, r2
 80024ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80024f0:	6011      	str	r1, [r2, #0]
  return result;
 80024f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	fab2 f282 	clz	r2, r2
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	f042 0220 	orr.w	r2, r2, #32
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	f002 021f 	and.w	r2, r2, #31
 8002508:	2101      	movs	r1, #1
 800250a:	fa01 f202 	lsl.w	r2, r1, r2
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d19e      	bne.n	8002452 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002514:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <HAL_RCC_OscConfig+0xc44>)
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	f023 020f 	bic.w	r2, r3, #15
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	492c      	ldr	r1, [pc, #176]	; (80025d4 <HAL_RCC_OscConfig+0xc44>)
 8002524:	4313      	orrs	r3, r2
 8002526:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002528:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <HAL_RCC_OscConfig+0xc44>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6a19      	ldr	r1, [r3, #32]
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	430b      	orrs	r3, r1
 800253e:	4925      	ldr	r1, [pc, #148]	; (80025d4 <HAL_RCC_OscConfig+0xc44>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
 8002544:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800254c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	fa93 f2a3 	rbit	r2, r3
 8002558:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800255c:	601a      	str	r2, [r3, #0]
  return result;
 800255e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002562:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800256e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	461a      	mov	r2, r3
 8002576:	2301      	movs	r3, #1
 8002578:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257a:	f7fe fdbf 	bl	80010fc <HAL_GetTick>
 800257e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002582:	e009      	b.n	8002598 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002584:	f7fe fdba 	bl	80010fc <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e109      	b.n	80027ac <HAL_RCC_OscConfig+0xe1c>
 8002598:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800259c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025b0:	601a      	str	r2, [r3, #0]
  return result;
 80025b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d105      	bne.n	80025d8 <HAL_RCC_OscConfig+0xc48>
 80025cc:	4b01      	ldr	r3, [pc, #4]	; (80025d4 <HAL_RCC_OscConfig+0xc44>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	e01e      	b.n	8002610 <HAL_RCC_OscConfig+0xc80>
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000
 80025d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	fa93 f2a3 	rbit	r2, r3
 80025ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	fa93 f2a3 	rbit	r2, r3
 8002606:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	4b6a      	ldr	r3, [pc, #424]	; (80027b8 <HAL_RCC_OscConfig+0xe28>)
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002614:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002618:	6011      	str	r1, [r2, #0]
 800261a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	fa92 f1a2 	rbit	r1, r2
 8002624:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002628:	6011      	str	r1, [r2, #0]
  return result;
 800262a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	fab2 f282 	clz	r2, r2
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	f042 0220 	orr.w	r2, r2, #32
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f002 021f 	and.w	r2, r2, #31
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f202 	lsl.w	r2, r1, r2
 8002646:	4013      	ands	r3, r2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d09b      	beq.n	8002584 <HAL_RCC_OscConfig+0xbf4>
 800264c:	e0ad      	b.n	80027aa <HAL_RCC_OscConfig+0xe1a>
 800264e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002652:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	fa93 f2a3 	rbit	r2, r3
 8002662:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002666:	601a      	str	r2, [r3, #0]
  return result;
 8002668:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800266c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002678:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	461a      	mov	r2, r3
 8002680:	2300      	movs	r3, #0
 8002682:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fd3a 	bl	80010fc <HAL_GetTick>
 8002688:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268c:	e009      	b.n	80026a2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe fd35 	bl	80010fc <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e084      	b.n	80027ac <HAL_RCC_OscConfig+0xe1c>
 80026a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	fa93 f2a3 	rbit	r2, r3
 80026b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ba:	601a      	str	r2, [r3, #0]
  return result;
 80026bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d102      	bne.n	80026dc <HAL_RCC_OscConfig+0xd4c>
 80026d6:	4b38      	ldr	r3, [pc, #224]	; (80027b8 <HAL_RCC_OscConfig+0xe28>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	e01b      	b.n	8002714 <HAL_RCC_OscConfig+0xd84>
 80026dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f2a3 	rbit	r2, r3
 80026f0:	f107 0320 	add.w	r3, r7, #32
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	f107 031c 	add.w	r3, r7, #28
 80026fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	f107 031c 	add.w	r3, r7, #28
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	fa93 f2a3 	rbit	r2, r3
 800270a:	f107 0318 	add.w	r3, r7, #24
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <HAL_RCC_OscConfig+0xe28>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	f107 0214 	add.w	r2, r7, #20
 8002718:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800271c:	6011      	str	r1, [r2, #0]
 800271e:	f107 0214 	add.w	r2, r7, #20
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	fa92 f1a2 	rbit	r1, r2
 8002728:	f107 0210 	add.w	r2, r7, #16
 800272c:	6011      	str	r1, [r2, #0]
  return result;
 800272e:	f107 0210 	add.w	r2, r7, #16
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	fab2 f282 	clz	r2, r2
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f042 0220 	orr.w	r2, r2, #32
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	f002 021f 	and.w	r2, r2, #31
 8002744:	2101      	movs	r1, #1
 8002746:	fa01 f202 	lsl.w	r2, r1, r2
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d19e      	bne.n	800268e <HAL_RCC_OscConfig+0xcfe>
 8002750:	e02b      	b.n	80027aa <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e025      	b.n	80027ac <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002760:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <HAL_RCC_OscConfig+0xe28>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002768:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <HAL_RCC_OscConfig+0xe28>)
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002770:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002774:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	429a      	cmp	r2, r3
 8002780:	d111      	bne.n	80027a6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002782:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002786:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002790:	429a      	cmp	r2, r3
 8002792:	d108      	bne.n	80027a6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002794:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002798:	f003 020f 	and.w	r2, r3, #15
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d001      	beq.n	80027aa <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000

080027bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b09e      	sub	sp, #120	; 0x78
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e162      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d4:	4b90      	ldr	r3, [pc, #576]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d910      	bls.n	8002804 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b8d      	ldr	r3, [pc, #564]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 0207 	bic.w	r2, r3, #7
 80027ea:	498b      	ldr	r1, [pc, #556]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b89      	ldr	r3, [pc, #548]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e14a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002810:	4b82      	ldr	r3, [pc, #520]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	497f      	ldr	r1, [pc, #508]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80dc 	beq.w	80029e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d13c      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xf6>
 8002838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800283c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d102      	bne.n	8002862 <HAL_RCC_ClockConfig+0xa6>
 800285c:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	e00f      	b.n	8002882 <HAL_RCC_ClockConfig+0xc6>
 8002862:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002866:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	667b      	str	r3, [r7, #100]	; 0x64
 8002870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002874:	663b      	str	r3, [r7, #96]	; 0x60
 8002876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800287e:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002886:	65ba      	str	r2, [r7, #88]	; 0x58
 8002888:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800288a:	fa92 f2a2 	rbit	r2, r2
 800288e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002892:	fab2 f282 	clz	r2, r2
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	f042 0220 	orr.w	r2, r2, #32
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	f002 021f 	and.w	r2, r2, #31
 80028a2:	2101      	movs	r1, #1
 80028a4:	fa01 f202 	lsl.w	r2, r1, r2
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d17b      	bne.n	80029a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0f3      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d13c      	bne.n	8002934 <HAL_RCC_ClockConfig+0x178>
 80028ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d102      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x128>
 80028de:	4b4f      	ldr	r3, [pc, #316]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	e00f      	b.n	8002904 <HAL_RCC_ClockConfig+0x148>
 80028e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	647b      	str	r3, [r7, #68]	; 0x44
 80028f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f6:	643b      	str	r3, [r7, #64]	; 0x40
 80028f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002900:	4b46      	ldr	r3, [pc, #280]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002908:	63ba      	str	r2, [r7, #56]	; 0x38
 800290a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800290c:	fa92 f2a2 	rbit	r2, r2
 8002910:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002914:	fab2 f282 	clz	r2, r2
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	f042 0220 	orr.w	r2, r2, #32
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f002 021f 	and.w	r2, r2, #31
 8002924:	2101      	movs	r1, #1
 8002926:	fa01 f202 	lsl.w	r2, r1, r2
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d13a      	bne.n	80029a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0b2      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
 8002934:	2302      	movs	r3, #2
 8002936:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d102      	bne.n	800295c <HAL_RCC_ClockConfig+0x1a0>
 8002956:	4b31      	ldr	r3, [pc, #196]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	e00d      	b.n	8002978 <HAL_RCC_ClockConfig+0x1bc>
 800295c:	2302      	movs	r3, #2
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
 8002968:	2302      	movs	r3, #2
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	2202      	movs	r2, #2
 800297a:	61ba      	str	r2, [r7, #24]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	fa92 f2a2 	rbit	r2, r2
 8002982:	617a      	str	r2, [r7, #20]
  return result;
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	fab2 f282 	clz	r2, r2
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	f042 0220 	orr.w	r2, r2, #32
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	f002 021f 	and.w	r2, r2, #31
 8002996:	2101      	movs	r1, #1
 8002998:	fa01 f202 	lsl.w	r2, r1, r2
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e079      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a6:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f023 0203 	bic.w	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	491a      	ldr	r1, [pc, #104]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b8:	f7fe fba0 	bl	80010fc <HAL_GetTick>
 80029bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c0:	f7fe fb9c 	bl	80010fc <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e061      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 020c 	and.w	r2, r3, #12
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d1eb      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d214      	bcs.n	8002a20 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 0207 	bic.w	r2, r3, #7
 80029fe:	4906      	ldr	r1, [pc, #24]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e040      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
 8002a18:	40022000 	.word	0x40022000
 8002a1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	491a      	ldr	r1, [pc, #104]	; (8002aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4a:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4912      	ldr	r1, [pc, #72]	; (8002aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a5e:	f000 f829 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8002a62:	4601      	mov	r1, r0
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a6c:	22f0      	movs	r2, #240	; 0xf0
 8002a6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	fa92 f2a2 	rbit	r2, r2
 8002a76:	60fa      	str	r2, [r7, #12]
  return result;
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	fab2 f282 	clz	r2, r2
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	40d3      	lsrs	r3, r2
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <HAL_RCC_ClockConfig+0x2ec>)
 8002a84:	5cd3      	ldrb	r3, [r2, r3]
 8002a86:	fa21 f303 	lsr.w	r3, r1, r3
 8002a8a:	4a08      	ldr	r2, [pc, #32]	; (8002aac <HAL_RCC_ClockConfig+0x2f0>)
 8002a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_RCC_ClockConfig+0x2f4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe faee 	bl	8001074 <HAL_InitTick>
  
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3778      	adds	r7, #120	; 0x78
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	08004608 	.word	0x08004608
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	20000004 	.word	0x20000004

08002ab4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b08b      	sub	sp, #44	; 0x2c
 8002ab8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ace:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d002      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x30>
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d003      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0x36>
 8002ae2:	e03f      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ae4:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ae6:	623b      	str	r3, [r7, #32]
      break;
 8002ae8:	e03f      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002af0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002af4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	fa92 f2a2 	rbit	r2, r2
 8002afc:	607a      	str	r2, [r7, #4]
  return result;
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	fab2 f282 	clz	r2, r2
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	40d3      	lsrs	r3, r2
 8002b08:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b0a:	5cd3      	ldrb	r3, [r2, r3]
 8002b0c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	220f      	movs	r2, #15
 8002b18:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	fa92 f2a2 	rbit	r2, r2
 8002b20:	60fa      	str	r2, [r7, #12]
  return result;
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	fab2 f282 	clz	r2, r2
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	40d3      	lsrs	r3, r2
 8002b2c:	4a15      	ldr	r2, [pc, #84]	; (8002b84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b3c:	4a0f      	ldr	r2, [pc, #60]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4c:	e007      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	fb02 f303 	mul.w	r3, r2, r3
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	623b      	str	r3, [r7, #32]
      break;
 8002b62:	e002      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b66:	623b      	str	r3, [r7, #32]
      break;
 8002b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	372c      	adds	r7, #44	; 0x2c
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	007a1200 	.word	0x007a1200
 8002b80:	08004618 	.word	0x08004618
 8002b84:	08004628 	.word	0x08004628

08002b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b092      	sub	sp, #72	; 0x48
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 80d4 	beq.w	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bac:	4b4e      	ldr	r3, [pc, #312]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10e      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb8:	4b4b      	ldr	r3, [pc, #300]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	4a4a      	ldr	r2, [pc, #296]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	61d3      	str	r3, [r2, #28]
 8002bc4:	4b48      	ldr	r3, [pc, #288]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd6:	4b45      	ldr	r3, [pc, #276]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d118      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be2:	4b42      	ldr	r3, [pc, #264]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a41      	ldr	r2, [pc, #260]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bee:	f7fe fa85 	bl	80010fc <HAL_GetTick>
 8002bf2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf4:	e008      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf6:	f7fe fa81 	bl	80010fc <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b64      	cmp	r3, #100	; 0x64
 8002c02:	d901      	bls.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e1d6      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	4b38      	ldr	r3, [pc, #224]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c14:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 8084 	beq.w	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d07c      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c34:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c4e:	fab3 f383 	clz	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2301      	movs	r3, #1
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	461a      	mov	r2, r3
 8002c82:	2300      	movs	r3, #0
 8002c84:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c86:	4a18      	ldr	r2, [pc, #96]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d04b      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7fe fa31 	bl	80010fc <HAL_GetTick>
 8002c9a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fe fa2d 	bl	80010fc <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e180      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	623b      	str	r3, [r7, #32]
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	61fb      	str	r3, [r7, #28]
  return result;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f043 0302 	orr.w	r3, r3, #2
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d108      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ce2:	4b01      	ldr	r3, [pc, #4]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	e00d      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	10908100 	.word	0x10908100
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	4ba0      	ldr	r3, [pc, #640]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	2202      	movs	r2, #2
 8002d06:	613a      	str	r2, [r7, #16]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	fa92 f2a2 	rbit	r2, r2
 8002d0e:	60fa      	str	r2, [r7, #12]
  return result;
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	fab2 f282 	clz	r2, r2
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	f002 021f 	and.w	r2, r2, #31
 8002d22:	2101      	movs	r1, #1
 8002d24:	fa01 f202 	lsl.w	r2, r1, r2
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0b7      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d2e:	4b95      	ldr	r3, [pc, #596]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4992      	ldr	r1, [pc, #584]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d105      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d48:	4b8e      	ldr	r3, [pc, #568]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	4a8d      	ldr	r2, [pc, #564]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d60:	4b88      	ldr	r3, [pc, #544]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	f023 0203 	bic.w	r2, r3, #3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4985      	ldr	r1, [pc, #532]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d7e:	4b81      	ldr	r3, [pc, #516]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	497e      	ldr	r1, [pc, #504]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d9c:	4b79      	ldr	r3, [pc, #484]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	4976      	ldr	r1, [pc, #472]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dba:	4b72      	ldr	r3, [pc, #456]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f023 0210 	bic.w	r2, r3, #16
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	496f      	ldr	r1, [pc, #444]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002dd8:	4b6a      	ldr	r3, [pc, #424]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de4:	4967      	ldr	r1, [pc, #412]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002df6:	4b63      	ldr	r3, [pc, #396]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f023 0220 	bic.w	r2, r3, #32
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	4960      	ldr	r1, [pc, #384]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e14:	4b5b      	ldr	r3, [pc, #364]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	4958      	ldr	r1, [pc, #352]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e32:	4b54      	ldr	r3, [pc, #336]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	4951      	ldr	r1, [pc, #324]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e50:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	4949      	ldr	r1, [pc, #292]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e6e:	4b45      	ldr	r3, [pc, #276]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4942      	ldr	r1, [pc, #264]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e8c:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	493a      	ldr	r1, [pc, #232]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002eaa:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	4933      	ldr	r1, [pc, #204]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ec8:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed4:	492b      	ldr	r1, [pc, #172]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d008      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ee6:	4b27      	ldr	r3, [pc, #156]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4924      	ldr	r1, [pc, #144]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002f04:	4b1f      	ldr	r3, [pc, #124]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	491c      	ldr	r1, [pc, #112]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f22:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2e:	4915      	ldr	r1, [pc, #84]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f40:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	490d      	ldr	r1, [pc, #52]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6a:	4906      	ldr	r1, [pc, #24]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00c      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002f7c:	4b01      	ldr	r3, [pc, #4]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	e002      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f90:	490b      	ldr	r1, [pc, #44]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002fa2:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fae:	4904      	ldr	r1, [pc, #16]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3748      	adds	r7, #72	; 0x48
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e049      	b.n	800306a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fd ff1a 	bl	8000e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3304      	adds	r3, #4
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f000 fd30 	bl	8003a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	d001      	beq.n	800308c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e04f      	b.n	800312c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a23      	ldr	r2, [pc, #140]	; (8003138 <HAL_TIM_Base_Start_IT+0xc4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01d      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b6:	d018      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1f      	ldr	r2, [pc, #124]	; (800313c <HAL_TIM_Base_Start_IT+0xc8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <HAL_TIM_Base_Start_IT+0xcc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00e      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1c      	ldr	r2, [pc, #112]	; (8003144 <HAL_TIM_Base_Start_IT+0xd0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <HAL_TIM_Base_Start_IT+0xd4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_TIM_Base_Start_IT+0x76>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a19      	ldr	r2, [pc, #100]	; (800314c <HAL_TIM_Base_Start_IT+0xd8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d115      	bne.n	8003116 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	4b17      	ldr	r3, [pc, #92]	; (8003150 <HAL_TIM_Base_Start_IT+0xdc>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b06      	cmp	r3, #6
 80030fa:	d015      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0xb4>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003102:	d011      	beq.n	8003128 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003114:	e008      	b.n	8003128 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	e000      	b.n	800312a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003128:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40012c00 	.word	0x40012c00
 800313c:	40000400 	.word	0x40000400
 8003140:	40000800 	.word	0x40000800
 8003144:	40013400 	.word	0x40013400
 8003148:	40014000 	.word	0x40014000
 800314c:	40015000 	.word	0x40015000
 8003150:	00010007 	.word	0x00010007

08003154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e049      	b.n	80031fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd fe1e 	bl	8000dbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3304      	adds	r3, #4
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f000 fc68 	bl	8003a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <HAL_TIM_PWM_Start+0x24>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	bf14      	ite	ne
 8003220:	2301      	movne	r3, #1
 8003222:	2300      	moveq	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e03c      	b.n	80032a2 <HAL_TIM_PWM_Start+0x9e>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2b04      	cmp	r3, #4
 800322c:	d109      	bne.n	8003242 <HAL_TIM_PWM_Start+0x3e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b01      	cmp	r3, #1
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	e02f      	b.n	80032a2 <HAL_TIM_PWM_Start+0x9e>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d109      	bne.n	800325c <HAL_TIM_PWM_Start+0x58>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	bf14      	ite	ne
 8003254:	2301      	movne	r3, #1
 8003256:	2300      	moveq	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e022      	b.n	80032a2 <HAL_TIM_PWM_Start+0x9e>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b0c      	cmp	r3, #12
 8003260:	d109      	bne.n	8003276 <HAL_TIM_PWM_Start+0x72>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b01      	cmp	r3, #1
 800326c:	bf14      	ite	ne
 800326e:	2301      	movne	r3, #1
 8003270:	2300      	moveq	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	e015      	b.n	80032a2 <HAL_TIM_PWM_Start+0x9e>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b10      	cmp	r3, #16
 800327a:	d109      	bne.n	8003290 <HAL_TIM_PWM_Start+0x8c>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	bf14      	ite	ne
 8003288:	2301      	movne	r3, #1
 800328a:	2300      	moveq	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	e008      	b.n	80032a2 <HAL_TIM_PWM_Start+0x9e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	bf14      	ite	ne
 800329c:	2301      	movne	r3, #1
 800329e:	2300      	moveq	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0a1      	b.n	80033ee <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <HAL_TIM_PWM_Start+0xb6>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b8:	e023      	b.n	8003302 <HAL_TIM_PWM_Start+0xfe>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d104      	bne.n	80032ca <HAL_TIM_PWM_Start+0xc6>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c8:	e01b      	b.n	8003302 <HAL_TIM_PWM_Start+0xfe>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d104      	bne.n	80032da <HAL_TIM_PWM_Start+0xd6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d8:	e013      	b.n	8003302 <HAL_TIM_PWM_Start+0xfe>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b0c      	cmp	r3, #12
 80032de:	d104      	bne.n	80032ea <HAL_TIM_PWM_Start+0xe6>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032e8:	e00b      	b.n	8003302 <HAL_TIM_PWM_Start+0xfe>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b10      	cmp	r3, #16
 80032ee:	d104      	bne.n	80032fa <HAL_TIM_PWM_Start+0xf6>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032f8:	e003      	b.n	8003302 <HAL_TIM_PWM_Start+0xfe>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2202      	movs	r2, #2
 80032fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2201      	movs	r2, #1
 8003308:	6839      	ldr	r1, [r7, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f000 ffea 	bl	80042e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a38      	ldr	r2, [pc, #224]	; (80033f8 <HAL_TIM_PWM_Start+0x1f4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d018      	beq.n	800334c <HAL_TIM_PWM_Start+0x148>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a37      	ldr	r2, [pc, #220]	; (80033fc <HAL_TIM_PWM_Start+0x1f8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d013      	beq.n	800334c <HAL_TIM_PWM_Start+0x148>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a35      	ldr	r2, [pc, #212]	; (8003400 <HAL_TIM_PWM_Start+0x1fc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00e      	beq.n	800334c <HAL_TIM_PWM_Start+0x148>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a34      	ldr	r2, [pc, #208]	; (8003404 <HAL_TIM_PWM_Start+0x200>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d009      	beq.n	800334c <HAL_TIM_PWM_Start+0x148>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a32      	ldr	r2, [pc, #200]	; (8003408 <HAL_TIM_PWM_Start+0x204>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d004      	beq.n	800334c <HAL_TIM_PWM_Start+0x148>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a31      	ldr	r2, [pc, #196]	; (800340c <HAL_TIM_PWM_Start+0x208>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d101      	bne.n	8003350 <HAL_TIM_PWM_Start+0x14c>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <HAL_TIM_PWM_Start+0x14e>
 8003350:	2300      	movs	r3, #0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003364:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a23      	ldr	r2, [pc, #140]	; (80033f8 <HAL_TIM_PWM_Start+0x1f4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d01d      	beq.n	80033ac <HAL_TIM_PWM_Start+0x1a8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003378:	d018      	beq.n	80033ac <HAL_TIM_PWM_Start+0x1a8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a24      	ldr	r2, [pc, #144]	; (8003410 <HAL_TIM_PWM_Start+0x20c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d013      	beq.n	80033ac <HAL_TIM_PWM_Start+0x1a8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a22      	ldr	r2, [pc, #136]	; (8003414 <HAL_TIM_PWM_Start+0x210>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00e      	beq.n	80033ac <HAL_TIM_PWM_Start+0x1a8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1a      	ldr	r2, [pc, #104]	; (80033fc <HAL_TIM_PWM_Start+0x1f8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d009      	beq.n	80033ac <HAL_TIM_PWM_Start+0x1a8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a18      	ldr	r2, [pc, #96]	; (8003400 <HAL_TIM_PWM_Start+0x1fc>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_TIM_PWM_Start+0x1a8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a19      	ldr	r2, [pc, #100]	; (800340c <HAL_TIM_PWM_Start+0x208>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d115      	bne.n	80033d8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_TIM_PWM_Start+0x214>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b06      	cmp	r3, #6
 80033bc:	d015      	beq.n	80033ea <HAL_TIM_PWM_Start+0x1e6>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c4:	d011      	beq.n	80033ea <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d6:	e008      	b.n	80033ea <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e000      	b.n	80033ec <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	40013400 	.word	0x40013400
 8003400:	40014000 	.word	0x40014000
 8003404:	40014400 	.word	0x40014400
 8003408:	40014800 	.word	0x40014800
 800340c:	40015000 	.word	0x40015000
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800
 8003418:	00010007 	.word	0x00010007

0800341c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b02      	cmp	r3, #2
 8003430:	d122      	bne.n	8003478 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b02      	cmp	r3, #2
 800343e:	d11b      	bne.n	8003478 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0202 	mvn.w	r2, #2
 8003448:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fae3 	bl	8003a2a <HAL_TIM_IC_CaptureCallback>
 8003464:	e005      	b.n	8003472 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fad5 	bl	8003a16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fae6 	bl	8003a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b04      	cmp	r3, #4
 8003484:	d122      	bne.n	80034cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b04      	cmp	r3, #4
 8003492:	d11b      	bne.n	80034cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0204 	mvn.w	r2, #4
 800349c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fab9 	bl	8003a2a <HAL_TIM_IC_CaptureCallback>
 80034b8:	e005      	b.n	80034c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 faab 	bl	8003a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fabc 	bl	8003a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d122      	bne.n	8003520 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d11b      	bne.n	8003520 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0208 	mvn.w	r2, #8
 80034f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2204      	movs	r2, #4
 80034f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fa8f 	bl	8003a2a <HAL_TIM_IC_CaptureCallback>
 800350c:	e005      	b.n	800351a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fa81 	bl	8003a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fa92 	bl	8003a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0310 	and.w	r3, r3, #16
 800352a:	2b10      	cmp	r3, #16
 800352c:	d122      	bne.n	8003574 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b10      	cmp	r3, #16
 800353a:	d11b      	bne.n	8003574 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0210 	mvn.w	r2, #16
 8003544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2208      	movs	r2, #8
 800354a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fa65 	bl	8003a2a <HAL_TIM_IC_CaptureCallback>
 8003560:	e005      	b.n	800356e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fa57 	bl	8003a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 fa68 	bl	8003a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d10e      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d107      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0201 	mvn.w	r2, #1
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fd f844 	bl	8000628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035aa:	2b80      	cmp	r3, #128	; 0x80
 80035ac:	d10e      	bne.n	80035cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b8:	2b80      	cmp	r3, #128	; 0x80
 80035ba:	d107      	bne.n	80035cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 ffce 	bl	8004568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035da:	d10e      	bne.n	80035fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e6:	2b80      	cmp	r3, #128	; 0x80
 80035e8:	d107      	bne.n	80035fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 ffc1 	bl	800457c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003604:	2b40      	cmp	r3, #64	; 0x40
 8003606:	d10e      	bne.n	8003626 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d107      	bne.n	8003626 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800361e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fa16 	bl	8003a52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b20      	cmp	r3, #32
 8003632:	d10e      	bne.n	8003652 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b20      	cmp	r3, #32
 8003640:	d107      	bne.n	8003652 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f06f 0220 	mvn.w	r2, #32
 800364a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 ff81 	bl	8004554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003676:	2302      	movs	r3, #2
 8003678:	e0ff      	b.n	800387a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b14      	cmp	r3, #20
 8003686:	f200 80f0 	bhi.w	800386a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800368a:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800368c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003690:	080036e5 	.word	0x080036e5
 8003694:	0800386b 	.word	0x0800386b
 8003698:	0800386b 	.word	0x0800386b
 800369c:	0800386b 	.word	0x0800386b
 80036a0:	08003725 	.word	0x08003725
 80036a4:	0800386b 	.word	0x0800386b
 80036a8:	0800386b 	.word	0x0800386b
 80036ac:	0800386b 	.word	0x0800386b
 80036b0:	08003767 	.word	0x08003767
 80036b4:	0800386b 	.word	0x0800386b
 80036b8:	0800386b 	.word	0x0800386b
 80036bc:	0800386b 	.word	0x0800386b
 80036c0:	080037a7 	.word	0x080037a7
 80036c4:	0800386b 	.word	0x0800386b
 80036c8:	0800386b 	.word	0x0800386b
 80036cc:	0800386b 	.word	0x0800386b
 80036d0:	080037e9 	.word	0x080037e9
 80036d4:	0800386b 	.word	0x0800386b
 80036d8:	0800386b 	.word	0x0800386b
 80036dc:	0800386b 	.word	0x0800386b
 80036e0:	08003829 	.word	0x08003829
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fa5a 	bl	8003ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699a      	ldr	r2, [r3, #24]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0208 	orr.w	r2, r2, #8
 80036fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0204 	bic.w	r2, r2, #4
 800370e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6999      	ldr	r1, [r3, #24]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	619a      	str	r2, [r3, #24]
      break;
 8003722:	e0a5      	b.n	8003870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fad4 	bl	8003cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800373e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800374e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6999      	ldr	r1, [r3, #24]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	021a      	lsls	r2, r3, #8
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	619a      	str	r2, [r3, #24]
      break;
 8003764:	e084      	b.n	8003870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68b9      	ldr	r1, [r7, #8]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fb47 	bl	8003e00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69da      	ldr	r2, [r3, #28]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0208 	orr.w	r2, r2, #8
 8003780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69da      	ldr	r2, [r3, #28]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0204 	bic.w	r2, r2, #4
 8003790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69d9      	ldr	r1, [r3, #28]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	61da      	str	r2, [r3, #28]
      break;
 80037a4:	e064      	b.n	8003870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fbb9 	bl	8003f24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69d9      	ldr	r1, [r3, #28]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	021a      	lsls	r2, r3, #8
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	61da      	str	r2, [r3, #28]
      break;
 80037e6:	e043      	b.n	8003870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68b9      	ldr	r1, [r7, #8]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fc08 	bl	8004004 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0208 	orr.w	r2, r2, #8
 8003802:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0204 	bic.w	r2, r2, #4
 8003812:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003826:	e023      	b.n	8003870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fc52 	bl	80040d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003842:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003852:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	021a      	lsls	r2, r3, #8
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003868:	e002      	b.n	8003870 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	75fb      	strb	r3, [r7, #23]
      break;
 800386e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003878:	7dfb      	ldrb	r3, [r7, #23]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop

08003884 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_TIM_ConfigClockSource+0x1c>
 800389c:	2302      	movs	r3, #2
 800389e:	e0b6      	b.n	8003a0e <HAL_TIM_ConfigClockSource+0x18a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038dc:	d03e      	beq.n	800395c <HAL_TIM_ConfigClockSource+0xd8>
 80038de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e2:	f200 8087 	bhi.w	80039f4 <HAL_TIM_ConfigClockSource+0x170>
 80038e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ea:	f000 8086 	beq.w	80039fa <HAL_TIM_ConfigClockSource+0x176>
 80038ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f2:	d87f      	bhi.n	80039f4 <HAL_TIM_ConfigClockSource+0x170>
 80038f4:	2b70      	cmp	r3, #112	; 0x70
 80038f6:	d01a      	beq.n	800392e <HAL_TIM_ConfigClockSource+0xaa>
 80038f8:	2b70      	cmp	r3, #112	; 0x70
 80038fa:	d87b      	bhi.n	80039f4 <HAL_TIM_ConfigClockSource+0x170>
 80038fc:	2b60      	cmp	r3, #96	; 0x60
 80038fe:	d050      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x11e>
 8003900:	2b60      	cmp	r3, #96	; 0x60
 8003902:	d877      	bhi.n	80039f4 <HAL_TIM_ConfigClockSource+0x170>
 8003904:	2b50      	cmp	r3, #80	; 0x50
 8003906:	d03c      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0xfe>
 8003908:	2b50      	cmp	r3, #80	; 0x50
 800390a:	d873      	bhi.n	80039f4 <HAL_TIM_ConfigClockSource+0x170>
 800390c:	2b40      	cmp	r3, #64	; 0x40
 800390e:	d058      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0x13e>
 8003910:	2b40      	cmp	r3, #64	; 0x40
 8003912:	d86f      	bhi.n	80039f4 <HAL_TIM_ConfigClockSource+0x170>
 8003914:	2b30      	cmp	r3, #48	; 0x30
 8003916:	d064      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x15e>
 8003918:	2b30      	cmp	r3, #48	; 0x30
 800391a:	d86b      	bhi.n	80039f4 <HAL_TIM_ConfigClockSource+0x170>
 800391c:	2b20      	cmp	r3, #32
 800391e:	d060      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x15e>
 8003920:	2b20      	cmp	r3, #32
 8003922:	d867      	bhi.n	80039f4 <HAL_TIM_ConfigClockSource+0x170>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d05c      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x15e>
 8003928:	2b10      	cmp	r3, #16
 800392a:	d05a      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x15e>
 800392c:	e062      	b.n	80039f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6899      	ldr	r1, [r3, #8]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f000 fcb1 	bl	80042a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003950:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	609a      	str	r2, [r3, #8]
      break;
 800395a:	e04f      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	6899      	ldr	r1, [r3, #8]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f000 fc9a 	bl	80042a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800397e:	609a      	str	r2, [r3, #8]
      break;
 8003980:	e03c      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	6859      	ldr	r1, [r3, #4]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	461a      	mov	r2, r3
 8003990:	f000 fc0e 	bl	80041b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2150      	movs	r1, #80	; 0x50
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fc67 	bl	800426e <TIM_ITRx_SetConfig>
      break;
 80039a0:	e02c      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6859      	ldr	r1, [r3, #4]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	461a      	mov	r2, r3
 80039b0:	f000 fc2d 	bl	800420e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2160      	movs	r1, #96	; 0x60
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fc57 	bl	800426e <TIM_ITRx_SetConfig>
      break;
 80039c0:	e01c      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6859      	ldr	r1, [r3, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f000 fbee 	bl	80041b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2140      	movs	r1, #64	; 0x40
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fc47 	bl	800426e <TIM_ITRx_SetConfig>
      break;
 80039e0:	e00c      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4619      	mov	r1, r3
 80039ec:	4610      	mov	r0, r2
 80039ee:	f000 fc3e 	bl	800426e <TIM_ITRx_SetConfig>
      break;
 80039f2:	e003      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
      break;
 80039f8:	e000      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80039fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a42      	ldr	r2, [pc, #264]	; (8003b84 <TIM_Base_SetConfig+0x11c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a86:	d00f      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a3f      	ldr	r2, [pc, #252]	; (8003b88 <TIM_Base_SetConfig+0x120>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a3e      	ldr	r2, [pc, #248]	; (8003b8c <TIM_Base_SetConfig+0x124>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a3d      	ldr	r2, [pc, #244]	; (8003b90 <TIM_Base_SetConfig+0x128>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a3c      	ldr	r2, [pc, #240]	; (8003b94 <TIM_Base_SetConfig+0x12c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d108      	bne.n	8003aba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a31      	ldr	r2, [pc, #196]	; (8003b84 <TIM_Base_SetConfig+0x11c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01f      	beq.n	8003b02 <TIM_Base_SetConfig+0x9a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac8:	d01b      	beq.n	8003b02 <TIM_Base_SetConfig+0x9a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2e      	ldr	r2, [pc, #184]	; (8003b88 <TIM_Base_SetConfig+0x120>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d017      	beq.n	8003b02 <TIM_Base_SetConfig+0x9a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a2d      	ldr	r2, [pc, #180]	; (8003b8c <TIM_Base_SetConfig+0x124>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <TIM_Base_SetConfig+0x9a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2c      	ldr	r2, [pc, #176]	; (8003b90 <TIM_Base_SetConfig+0x128>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00f      	beq.n	8003b02 <TIM_Base_SetConfig+0x9a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a2c      	ldr	r2, [pc, #176]	; (8003b98 <TIM_Base_SetConfig+0x130>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <TIM_Base_SetConfig+0x9a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a2b      	ldr	r2, [pc, #172]	; (8003b9c <TIM_Base_SetConfig+0x134>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d007      	beq.n	8003b02 <TIM_Base_SetConfig+0x9a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a2a      	ldr	r2, [pc, #168]	; (8003ba0 <TIM_Base_SetConfig+0x138>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_Base_SetConfig+0x9a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a25      	ldr	r2, [pc, #148]	; (8003b94 <TIM_Base_SetConfig+0x12c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d108      	bne.n	8003b14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <TIM_Base_SetConfig+0x11c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d013      	beq.n	8003b68 <TIM_Base_SetConfig+0x100>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a13      	ldr	r2, [pc, #76]	; (8003b90 <TIM_Base_SetConfig+0x128>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00f      	beq.n	8003b68 <TIM_Base_SetConfig+0x100>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <TIM_Base_SetConfig+0x130>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00b      	beq.n	8003b68 <TIM_Base_SetConfig+0x100>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a12      	ldr	r2, [pc, #72]	; (8003b9c <TIM_Base_SetConfig+0x134>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d007      	beq.n	8003b68 <TIM_Base_SetConfig+0x100>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a11      	ldr	r2, [pc, #68]	; (8003ba0 <TIM_Base_SetConfig+0x138>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <TIM_Base_SetConfig+0x100>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a0c      	ldr	r2, [pc, #48]	; (8003b94 <TIM_Base_SetConfig+0x12c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d103      	bne.n	8003b70 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	615a      	str	r2, [r3, #20]
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	40000400 	.word	0x40000400
 8003b8c:	40000800 	.word	0x40000800
 8003b90:	40013400 	.word	0x40013400
 8003b94:	40015000 	.word	0x40015000
 8003b98:	40014000 	.word	0x40014000
 8003b9c:	40014400 	.word	0x40014400
 8003ba0:	40014800 	.word	0x40014800

08003ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	f023 0201 	bic.w	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0303 	bic.w	r3, r3, #3
 8003bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f023 0302 	bic.w	r3, r3, #2
 8003bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a30      	ldr	r2, [pc, #192]	; (8003cc0 <TIM_OC1_SetConfig+0x11c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d013      	beq.n	8003c2c <TIM_OC1_SetConfig+0x88>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a2f      	ldr	r2, [pc, #188]	; (8003cc4 <TIM_OC1_SetConfig+0x120>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00f      	beq.n	8003c2c <TIM_OC1_SetConfig+0x88>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a2e      	ldr	r2, [pc, #184]	; (8003cc8 <TIM_OC1_SetConfig+0x124>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00b      	beq.n	8003c2c <TIM_OC1_SetConfig+0x88>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a2d      	ldr	r2, [pc, #180]	; (8003ccc <TIM_OC1_SetConfig+0x128>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d007      	beq.n	8003c2c <TIM_OC1_SetConfig+0x88>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a2c      	ldr	r2, [pc, #176]	; (8003cd0 <TIM_OC1_SetConfig+0x12c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d003      	beq.n	8003c2c <TIM_OC1_SetConfig+0x88>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a2b      	ldr	r2, [pc, #172]	; (8003cd4 <TIM_OC1_SetConfig+0x130>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d10c      	bne.n	8003c46 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f023 0308 	bic.w	r3, r3, #8
 8003c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f023 0304 	bic.w	r3, r3, #4
 8003c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <TIM_OC1_SetConfig+0x11c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <TIM_OC1_SetConfig+0xd2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a1c      	ldr	r2, [pc, #112]	; (8003cc4 <TIM_OC1_SetConfig+0x120>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00f      	beq.n	8003c76 <TIM_OC1_SetConfig+0xd2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <TIM_OC1_SetConfig+0x124>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00b      	beq.n	8003c76 <TIM_OC1_SetConfig+0xd2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1a      	ldr	r2, [pc, #104]	; (8003ccc <TIM_OC1_SetConfig+0x128>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <TIM_OC1_SetConfig+0xd2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <TIM_OC1_SetConfig+0x12c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_OC1_SetConfig+0xd2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <TIM_OC1_SetConfig+0x130>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d111      	bne.n	8003c9a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	621a      	str	r2, [r3, #32]
}
 8003cb4:	bf00      	nop
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40013400 	.word	0x40013400
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40014400 	.word	0x40014400
 8003cd0:	40014800 	.word	0x40014800
 8003cd4:	40015000 	.word	0x40015000

08003cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	f023 0210 	bic.w	r2, r3, #16
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f023 0320 	bic.w	r3, r3, #32
 8003d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a2c      	ldr	r2, [pc, #176]	; (8003de8 <TIM_OC2_SetConfig+0x110>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d007      	beq.n	8003d4c <TIM_OC2_SetConfig+0x74>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a2b      	ldr	r2, [pc, #172]	; (8003dec <TIM_OC2_SetConfig+0x114>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d003      	beq.n	8003d4c <TIM_OC2_SetConfig+0x74>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a2a      	ldr	r2, [pc, #168]	; (8003df0 <TIM_OC2_SetConfig+0x118>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d10d      	bne.n	8003d68 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a1f      	ldr	r2, [pc, #124]	; (8003de8 <TIM_OC2_SetConfig+0x110>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <TIM_OC2_SetConfig+0xc0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <TIM_OC2_SetConfig+0x114>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00f      	beq.n	8003d98 <TIM_OC2_SetConfig+0xc0>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a1e      	ldr	r2, [pc, #120]	; (8003df4 <TIM_OC2_SetConfig+0x11c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00b      	beq.n	8003d98 <TIM_OC2_SetConfig+0xc0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a1d      	ldr	r2, [pc, #116]	; (8003df8 <TIM_OC2_SetConfig+0x120>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d007      	beq.n	8003d98 <TIM_OC2_SetConfig+0xc0>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a1c      	ldr	r2, [pc, #112]	; (8003dfc <TIM_OC2_SetConfig+0x124>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d003      	beq.n	8003d98 <TIM_OC2_SetConfig+0xc0>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a17      	ldr	r2, [pc, #92]	; (8003df0 <TIM_OC2_SetConfig+0x118>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d113      	bne.n	8003dc0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d9e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003da6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	621a      	str	r2, [r3, #32]
}
 8003dda:	bf00      	nop
 8003ddc:	371c      	adds	r7, #28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40012c00 	.word	0x40012c00
 8003dec:	40013400 	.word	0x40013400
 8003df0:	40015000 	.word	0x40015000
 8003df4:	40014000 	.word	0x40014000
 8003df8:	40014400 	.word	0x40014400
 8003dfc:	40014800 	.word	0x40014800

08003e00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0303 	bic.w	r3, r3, #3
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a2b      	ldr	r2, [pc, #172]	; (8003f0c <TIM_OC3_SetConfig+0x10c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d007      	beq.n	8003e72 <TIM_OC3_SetConfig+0x72>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a2a      	ldr	r2, [pc, #168]	; (8003f10 <TIM_OC3_SetConfig+0x110>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d003      	beq.n	8003e72 <TIM_OC3_SetConfig+0x72>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a29      	ldr	r2, [pc, #164]	; (8003f14 <TIM_OC3_SetConfig+0x114>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10d      	bne.n	8003e8e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a1e      	ldr	r2, [pc, #120]	; (8003f0c <TIM_OC3_SetConfig+0x10c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <TIM_OC3_SetConfig+0xbe>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <TIM_OC3_SetConfig+0x110>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00f      	beq.n	8003ebe <TIM_OC3_SetConfig+0xbe>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <TIM_OC3_SetConfig+0x118>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00b      	beq.n	8003ebe <TIM_OC3_SetConfig+0xbe>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a1c      	ldr	r2, [pc, #112]	; (8003f1c <TIM_OC3_SetConfig+0x11c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d007      	beq.n	8003ebe <TIM_OC3_SetConfig+0xbe>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a1b      	ldr	r2, [pc, #108]	; (8003f20 <TIM_OC3_SetConfig+0x120>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <TIM_OC3_SetConfig+0xbe>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a16      	ldr	r2, [pc, #88]	; (8003f14 <TIM_OC3_SetConfig+0x114>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d113      	bne.n	8003ee6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	621a      	str	r2, [r3, #32]
}
 8003f00:	bf00      	nop
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	40013400 	.word	0x40013400
 8003f14:	40015000 	.word	0x40015000
 8003f18:	40014000 	.word	0x40014000
 8003f1c:	40014400 	.word	0x40014400
 8003f20:	40014800 	.word	0x40014800

08003f24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	021b      	lsls	r3, r3, #8
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	031b      	lsls	r3, r3, #12
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a1a      	ldr	r2, [pc, #104]	; (8003fec <TIM_OC4_SetConfig+0xc8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d013      	beq.n	8003fb0 <TIM_OC4_SetConfig+0x8c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a19      	ldr	r2, [pc, #100]	; (8003ff0 <TIM_OC4_SetConfig+0xcc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00f      	beq.n	8003fb0 <TIM_OC4_SetConfig+0x8c>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a18      	ldr	r2, [pc, #96]	; (8003ff4 <TIM_OC4_SetConfig+0xd0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00b      	beq.n	8003fb0 <TIM_OC4_SetConfig+0x8c>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a17      	ldr	r2, [pc, #92]	; (8003ff8 <TIM_OC4_SetConfig+0xd4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d007      	beq.n	8003fb0 <TIM_OC4_SetConfig+0x8c>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a16      	ldr	r2, [pc, #88]	; (8003ffc <TIM_OC4_SetConfig+0xd8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d003      	beq.n	8003fb0 <TIM_OC4_SetConfig+0x8c>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a15      	ldr	r2, [pc, #84]	; (8004000 <TIM_OC4_SetConfig+0xdc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d109      	bne.n	8003fc4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	019b      	lsls	r3, r3, #6
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	621a      	str	r2, [r3, #32]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40012c00 	.word	0x40012c00
 8003ff0:	40013400 	.word	0x40013400
 8003ff4:	40014000 	.word	0x40014000
 8003ff8:	40014400 	.word	0x40014400
 8003ffc:	40014800 	.word	0x40014800
 8004000:	40015000 	.word	0x40015000

08004004 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004048:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	041b      	lsls	r3, r3, #16
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <TIM_OC5_SetConfig+0xbc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d013      	beq.n	8004086 <TIM_OC5_SetConfig+0x82>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a18      	ldr	r2, [pc, #96]	; (80040c4 <TIM_OC5_SetConfig+0xc0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00f      	beq.n	8004086 <TIM_OC5_SetConfig+0x82>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a17      	ldr	r2, [pc, #92]	; (80040c8 <TIM_OC5_SetConfig+0xc4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00b      	beq.n	8004086 <TIM_OC5_SetConfig+0x82>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a16      	ldr	r2, [pc, #88]	; (80040cc <TIM_OC5_SetConfig+0xc8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d007      	beq.n	8004086 <TIM_OC5_SetConfig+0x82>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a15      	ldr	r2, [pc, #84]	; (80040d0 <TIM_OC5_SetConfig+0xcc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d003      	beq.n	8004086 <TIM_OC5_SetConfig+0x82>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a14      	ldr	r2, [pc, #80]	; (80040d4 <TIM_OC5_SetConfig+0xd0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d109      	bne.n	800409a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	621a      	str	r2, [r3, #32]
}
 80040b4:	bf00      	nop
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40013400 	.word	0x40013400
 80040c8:	40014000 	.word	0x40014000
 80040cc:	40014400 	.word	0x40014400
 80040d0:	40014800 	.word	0x40014800
 80040d4:	40015000 	.word	0x40015000

080040d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800410a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800411e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	051b      	lsls	r3, r3, #20
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a1a      	ldr	r2, [pc, #104]	; (8004198 <TIM_OC6_SetConfig+0xc0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <TIM_OC6_SetConfig+0x84>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a19      	ldr	r2, [pc, #100]	; (800419c <TIM_OC6_SetConfig+0xc4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00f      	beq.n	800415c <TIM_OC6_SetConfig+0x84>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <TIM_OC6_SetConfig+0xc8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00b      	beq.n	800415c <TIM_OC6_SetConfig+0x84>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a17      	ldr	r2, [pc, #92]	; (80041a4 <TIM_OC6_SetConfig+0xcc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d007      	beq.n	800415c <TIM_OC6_SetConfig+0x84>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a16      	ldr	r2, [pc, #88]	; (80041a8 <TIM_OC6_SetConfig+0xd0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_OC6_SetConfig+0x84>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a15      	ldr	r2, [pc, #84]	; (80041ac <TIM_OC6_SetConfig+0xd4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d109      	bne.n	8004170 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004162:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	029b      	lsls	r3, r3, #10
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	621a      	str	r2, [r3, #32]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40012c00 	.word	0x40012c00
 800419c:	40013400 	.word	0x40013400
 80041a0:	40014000 	.word	0x40014000
 80041a4:	40014400 	.word	0x40014400
 80041a8:	40014800 	.word	0x40014800
 80041ac:	40015000 	.word	0x40015000

080041b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f023 0201 	bic.w	r2, r3, #1
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f023 030a 	bic.w	r3, r3, #10
 80041ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	621a      	str	r2, [r3, #32]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800420e:	b480      	push	{r7}
 8004210:	b087      	sub	sp, #28
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f023 0210 	bic.w	r2, r3, #16
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	031b      	lsls	r3, r3, #12
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800424a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800426e:	b480      	push	{r7}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	f043 0307 	orr.w	r3, r3, #7
 8004290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	609a      	str	r2, [r3, #8]
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	021a      	lsls	r2, r3, #8
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	609a      	str	r2, [r3, #8]
}
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2201      	movs	r2, #1
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1a      	ldr	r2, [r3, #32]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	43db      	mvns	r3, r3
 8004306:	401a      	ands	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a1a      	ldr	r2, [r3, #32]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	431a      	orrs	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004344:	2302      	movs	r3, #2
 8004346:	e06d      	b.n	8004424 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a30      	ldr	r2, [pc, #192]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d009      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a2f      	ldr	r2, [pc, #188]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d004      	beq.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a2d      	ldr	r2, [pc, #180]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d108      	bne.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800438c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d01d      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c4:	d018      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1c      	ldr	r2, [pc, #112]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d013      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1a      	ldr	r2, [pc, #104]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00e      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a15      	ldr	r2, [pc, #84]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d009      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a16      	ldr	r2, [pc, #88]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a11      	ldr	r2, [pc, #68]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d10c      	bne.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	4313      	orrs	r3, r2
 8004408:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	40012c00 	.word	0x40012c00
 8004434:	40013400 	.word	0x40013400
 8004438:	40015000 	.word	0x40015000
 800443c:	40000400 	.word	0x40000400
 8004440:	40000800 	.word	0x40000800
 8004444:	40014000 	.word	0x40014000

08004448 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004460:	2302      	movs	r3, #2
 8004462:	e06a      	b.n	800453a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	041b      	lsls	r3, r3, #16
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a19      	ldr	r2, [pc, #100]	; (8004548 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d009      	beq.n	80044fc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a17      	ldr	r2, [pc, #92]	; (800454c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d004      	beq.n	80044fc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a16      	ldr	r2, [pc, #88]	; (8004550 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d115      	bne.n	8004528 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	051b      	lsls	r3, r3, #20
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40013400 	.word	0x40013400
 8004550:	40015000 	.word	0x40015000

08004554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <__libc_init_array>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4d0d      	ldr	r5, [pc, #52]	; (80045c8 <__libc_init_array+0x38>)
 8004594:	4c0d      	ldr	r4, [pc, #52]	; (80045cc <__libc_init_array+0x3c>)
 8004596:	1b64      	subs	r4, r4, r5
 8004598:	10a4      	asrs	r4, r4, #2
 800459a:	2600      	movs	r6, #0
 800459c:	42a6      	cmp	r6, r4
 800459e:	d109      	bne.n	80045b4 <__libc_init_array+0x24>
 80045a0:	4d0b      	ldr	r5, [pc, #44]	; (80045d0 <__libc_init_array+0x40>)
 80045a2:	4c0c      	ldr	r4, [pc, #48]	; (80045d4 <__libc_init_array+0x44>)
 80045a4:	f000 f820 	bl	80045e8 <_init>
 80045a8:	1b64      	subs	r4, r4, r5
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	2600      	movs	r6, #0
 80045ae:	42a6      	cmp	r6, r4
 80045b0:	d105      	bne.n	80045be <__libc_init_array+0x2e>
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
 80045b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b8:	4798      	blx	r3
 80045ba:	3601      	adds	r6, #1
 80045bc:	e7ee      	b.n	800459c <__libc_init_array+0xc>
 80045be:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c2:	4798      	blx	r3
 80045c4:	3601      	adds	r6, #1
 80045c6:	e7f2      	b.n	80045ae <__libc_init_array+0x1e>
 80045c8:	08004638 	.word	0x08004638
 80045cc:	08004638 	.word	0x08004638
 80045d0:	08004638 	.word	0x08004638
 80045d4:	0800463c 	.word	0x0800463c

080045d8 <memset>:
 80045d8:	4402      	add	r2, r0
 80045da:	4603      	mov	r3, r0
 80045dc:	4293      	cmp	r3, r2
 80045de:	d100      	bne.n	80045e2 <memset+0xa>
 80045e0:	4770      	bx	lr
 80045e2:	f803 1b01 	strb.w	r1, [r3], #1
 80045e6:	e7f9      	b.n	80045dc <memset+0x4>

080045e8 <_init>:
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	bf00      	nop
 80045ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ee:	bc08      	pop	{r3}
 80045f0:	469e      	mov	lr, r3
 80045f2:	4770      	bx	lr

080045f4 <_fini>:
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f6:	bf00      	nop
 80045f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fa:	bc08      	pop	{r3}
 80045fc:	469e      	mov	lr, r3
 80045fe:	4770      	bx	lr
