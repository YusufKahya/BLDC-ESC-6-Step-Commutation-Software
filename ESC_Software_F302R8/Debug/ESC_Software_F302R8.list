
ESC_Software_F302R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004240  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004400  08004400  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004400  08004400  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004400  08004400  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004400  08004400  00014400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000000c  08004414  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08004414  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbef  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e4b  00000000  00000000  0002cc2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002ea78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002f538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afc0  00000000  00000000  0002ff10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d338  00000000  00000000  0004aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1389  00000000  00000000  00058208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9591  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bac  00000000  00000000  000f95e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043b0 	.word	0x080043b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080043b0 	.word	0x080043b0

080001c8 <PeripheralsStart>:
#include "TimeTask.h"

const uint8_t Trigger_Control_State[6] = {State_A_B,State_A_C,State_B_C,State_B_A,State_C_A,State_C_B};

void PeripheralsStart()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	  Motor_Control.Duty_Cycle = 25;
 80001cc:	4b1d      	ldr	r3, [pc, #116]	; (8000244 <PeripheralsStart+0x7c>)
 80001ce:	2219      	movs	r2, #25
 80001d0:	709a      	strb	r2, [r3, #2]

	  Start_Up.Duty_Cycle = 50;
 80001d2:	4b1d      	ldr	r3, [pc, #116]	; (8000248 <PeripheralsStart+0x80>)
 80001d4:	2232      	movs	r2, #50	; 0x32
 80001d6:	701a      	strb	r2, [r3, #0]
	  Start_Up.Delay_Seconds = 0.00005f; // 50 mikro saniye (20k task'ta yapılabilecek minimum süre)
 80001d8:	4b1b      	ldr	r3, [pc, #108]	; (8000248 <PeripheralsStart+0x80>)
 80001da:	4a1c      	ldr	r2, [pc, #112]	; (800024c <PeripheralsStart+0x84>)
 80001dc:	605a      	str	r2, [r3, #4]
	  Start_Up.Tour = 5;
 80001de:	4b1a      	ldr	r3, [pc, #104]	; (8000248 <PeripheralsStart+0x80>)
 80001e0:	2205      	movs	r2, #5
 80001e2:	805a      	strh	r2, [r3, #2]

	  Start_Up.Align_Coefficient = 2;
 80001e4:	4b18      	ldr	r3, [pc, #96]	; (8000248 <PeripheralsStart+0x80>)
 80001e6:	2202      	movs	r2, #2
 80001e8:	819a      	strh	r2, [r3, #12]
	  Start_Up.Align_DutyCycle = 50;
 80001ea:	4b17      	ldr	r3, [pc, #92]	; (8000248 <PeripheralsStart+0x80>)
 80001ec:	2232      	movs	r2, #50	; 0x32
 80001ee:	81da      	strh	r2, [r3, #14]

	  Motor_Control.Drive_Stage = START_UP;
 80001f0:	4b14      	ldr	r3, [pc, #80]	; (8000244 <PeripheralsStart+0x7c>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	  Motor_Control.Blinde_Mode_RPM = 20;
 80001f8:	4b12      	ldr	r3, [pc, #72]	; (8000244 <PeripheralsStart+0x7c>)
 80001fa:	2214      	movs	r2, #20
 80001fc:	629a      	str	r2, [r3, #40]	; 0x28

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// Phase A High
 80001fe:	2100      	movs	r1, #0
 8000200:	4813      	ldr	r0, [pc, #76]	; (8000250 <PeripheralsStart+0x88>)
 8000202:	f002 ffcd 	bl	80031a0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	// Phase B High
 8000206:	2104      	movs	r1, #4
 8000208:	4811      	ldr	r0, [pc, #68]	; (8000250 <PeripheralsStart+0x88>)
 800020a:	f002 ffc9 	bl	80031a0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	// Phase C High
 800020e:	2108      	movs	r1, #8
 8000210:	480f      	ldr	r0, [pc, #60]	; (8000250 <PeripheralsStart+0x88>)
 8000212:	f002 ffc5 	bl	80031a0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// Phase A Low
 8000216:	2100      	movs	r1, #0
 8000218:	480e      	ldr	r0, [pc, #56]	; (8000254 <PeripheralsStart+0x8c>)
 800021a:	f002 ffc1 	bl	80031a0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	// Phase B Low
 800021e:	2104      	movs	r1, #4
 8000220:	480c      	ldr	r0, [pc, #48]	; (8000254 <PeripheralsStart+0x8c>)
 8000222:	f002 ffbd 	bl	80031a0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	// Phase C Low
 8000226:	2108      	movs	r1, #8
 8000228:	480a      	ldr	r0, [pc, #40]	; (8000254 <PeripheralsStart+0x8c>)
 800022a:	f002 ffb9 	bl	80031a0 <HAL_TIM_PWM_Start>

	  HAL_COMP_Start(&hcomp2);	// Phase A Out
 800022e:	480a      	ldr	r0, [pc, #40]	; (8000258 <PeripheralsStart+0x90>)
 8000230:	f001 f922 	bl	8001478 <HAL_COMP_Start>
	  HAL_COMP_Start(&hcomp4);	// Phase B Out
 8000234:	4809      	ldr	r0, [pc, #36]	; (800025c <PeripheralsStart+0x94>)
 8000236:	f001 f91f 	bl	8001478 <HAL_COMP_Start>
	  HAL_COMP_Start(&hcomp6);	// Phase C Out
 800023a:	4809      	ldr	r0, [pc, #36]	; (8000260 <PeripheralsStart+0x98>)
 800023c:	f001 f91c 	bl	8001478 <HAL_COMP_Start>

//	  HAL_TIM_Base_Start_IT(&htim15);	// for Time Tasks
}
 8000240:	bf00      	nop
 8000242:	bd80      	pop	{r7, pc}
 8000244:	200001fc 	.word	0x200001fc
 8000248:	2000016c 	.word	0x2000016c
 800024c:	3851b717 	.word	0x3851b717
 8000250:	20000120 	.word	0x20000120
 8000254:	200001ac 	.word	0x200001ac
 8000258:	2000017c 	.word	0x2000017c
 800025c:	200000ec 	.word	0x200000ec
 8000260:	200000bc 	.word	0x200000bc

08000264 <Stop_Motor>:

void Stop_Motor()
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <Stop_Motor+0x48>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2200      	movs	r2, #0
 800026e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000270:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <Stop_Motor+0x48>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2200      	movs	r2, #0
 8000276:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <Stop_Motor+0x48>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2200      	movs	r2, #0
 800027e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 8000280:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <Stop_Motor+0x4c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2200      	movs	r2, #0
 8000286:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <Stop_Motor+0x4c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2200      	movs	r2, #0
 800028e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <Stop_Motor+0x4c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2200      	movs	r2, #0
 8000296:	63da      	str	r2, [r3, #60]	; 0x3c

	Motor_Control.Drive_Stage = START_UP;
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <Stop_Motor+0x50>)
 800029a:	2200      	movs	r2, #0
 800029c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000120 	.word	0x20000120
 80002b0:	200001ac 	.word	0x200001ac
 80002b4:	200001fc 	.word	0x200001fc

080002b8 <Start_Up_Motor>:

void Start_Up_Motor()
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	static int Tour_Counter = 0;

	if(Motor_Control.Control_Counter++ >= MOTOR_CONTROL_TASK_HZ*Start_Up.Delay_Seconds)
 80002bc:	4b29      	ldr	r3, [pc, #164]	; (8000364 <Start_Up_Motor+0xac>)
 80002be:	69da      	ldr	r2, [r3, #28]
 80002c0:	1c53      	adds	r3, r2, #1
 80002c2:	4928      	ldr	r1, [pc, #160]	; (8000364 <Start_Up_Motor+0xac>)
 80002c4:	61cb      	str	r3, [r1, #28]
 80002c6:	ee07 2a90 	vmov	s15, r2
 80002ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80002ce:	4b26      	ldr	r3, [pc, #152]	; (8000368 <Start_Up_Motor+0xb0>)
 80002d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80002d4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800036c <Start_Up_Motor+0xb4>
 80002d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80002dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002e4:	da00      	bge.n	80002e8 <Start_Up_Motor+0x30>
		else
		{
			Motor_Control.Motor_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
		}
	}
}
 80002e6:	e03a      	b.n	800035e <Start_Up_Motor+0xa6>
		Motor_Control.Control_Counter = 0;
 80002e8:	4b1e      	ldr	r3, [pc, #120]	; (8000364 <Start_Up_Motor+0xac>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	61da      	str	r2, [r3, #28]
		Set_Motor_State(Trigger_Control_State[Motor_Control.Motor_State_Index], Start_Up.Duty_Cycle);
 80002ee:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <Start_Up_Motor+0xac>)
 80002f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80002f4:	461a      	mov	r2, r3
 80002f6:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <Start_Up_Motor+0xb8>)
 80002f8:	5c9b      	ldrb	r3, [r3, r2]
 80002fa:	4a1b      	ldr	r2, [pc, #108]	; (8000368 <Start_Up_Motor+0xb0>)
 80002fc:	7812      	ldrb	r2, [r2, #0]
 80002fe:	b292      	uxth	r2, r2
 8000300:	4611      	mov	r1, r2
 8000302:	4618      	mov	r0, r3
 8000304:	f000 f98c 	bl	8000620 <Set_Motor_State>
		if( (Trigger_Control_State[Motor_Control.Motor_State_Index] == State_C_B) && Tour_Counter++ >= Start_Up.Tour)
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <Start_Up_Motor+0xac>)
 800030a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800030e:	461a      	mov	r2, r3
 8000310:	4b17      	ldr	r3, [pc, #92]	; (8000370 <Start_Up_Motor+0xb8>)
 8000312:	5c9b      	ldrb	r3, [r3, r2]
 8000314:	2b04      	cmp	r3, #4
 8000316:	d110      	bne.n	800033a <Start_Up_Motor+0x82>
 8000318:	4b16      	ldr	r3, [pc, #88]	; (8000374 <Start_Up_Motor+0xbc>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	1c5a      	adds	r2, r3, #1
 800031e:	4915      	ldr	r1, [pc, #84]	; (8000374 <Start_Up_Motor+0xbc>)
 8000320:	600a      	str	r2, [r1, #0]
 8000322:	4a11      	ldr	r2, [pc, #68]	; (8000368 <Start_Up_Motor+0xb0>)
 8000324:	8852      	ldrh	r2, [r2, #2]
 8000326:	4293      	cmp	r3, r2
 8000328:	db07      	blt.n	800033a <Start_Up_Motor+0x82>
			Motor_Control.Drive_Stage = ALIGN;
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <Start_Up_Motor+0xac>)
 800032c:	2201      	movs	r2, #1
 800032e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			Tour_Counter = 0;
 8000332:	4b10      	ldr	r3, [pc, #64]	; (8000374 <Start_Up_Motor+0xbc>)
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
}
 8000338:	e011      	b.n	800035e <Start_Up_Motor+0xa6>
			Motor_Control.Motor_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <Start_Up_Motor+0xac>)
 800033c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000340:	1c5a      	adds	r2, r3, #1
 8000342:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <Start_Up_Motor+0xc0>)
 8000344:	fb83 3102 	smull	r3, r1, r3, r2
 8000348:	17d3      	asrs	r3, r2, #31
 800034a:	1ac9      	subs	r1, r1, r3
 800034c:	460b      	mov	r3, r1
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	440b      	add	r3, r1
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	1ad1      	subs	r1, r2, r3
 8000356:	b2ca      	uxtb	r2, r1
 8000358:	4b02      	ldr	r3, [pc, #8]	; (8000364 <Start_Up_Motor+0xac>)
 800035a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	200001fc 	.word	0x200001fc
 8000368:	2000016c 	.word	0x2000016c
 800036c:	469c4000 	.word	0x469c4000
 8000370:	080043c8 	.word	0x080043c8
 8000374:	20000028 	.word	0x20000028
 8000378:	2aaaaaab 	.word	0x2aaaaaab

0800037c <Align_Motor>:

void Align_Motor()
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	static int Tour_Counter = 0;

	if(Motor_Control.Control_Counter++ >= MOTOR_CONTROL_TASK_HZ*Start_Up.Delay_Seconds)
 8000380:	4b2b      	ldr	r3, [pc, #172]	; (8000430 <Align_Motor+0xb4>)
 8000382:	69da      	ldr	r2, [r3, #28]
 8000384:	1c53      	adds	r3, r2, #1
 8000386:	492a      	ldr	r1, [pc, #168]	; (8000430 <Align_Motor+0xb4>)
 8000388:	61cb      	str	r3, [r1, #28]
 800038a:	ee07 2a90 	vmov	s15, r2
 800038e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000392:	4b28      	ldr	r3, [pc, #160]	; (8000434 <Align_Motor+0xb8>)
 8000394:	edd3 7a01 	vldr	s15, [r3, #4]
 8000398:	eddf 6a27 	vldr	s13, [pc, #156]	; 8000438 <Align_Motor+0xbc>
 800039c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80003a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80003a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003a8:	da00      	bge.n	80003ac <Align_Motor+0x30>
		else
		{
			Motor_Control.Motor_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
		}
	}
}
 80003aa:	e03e      	b.n	800042a <Align_Motor+0xae>
		Motor_Control.Control_Counter = 0;
 80003ac:	4b20      	ldr	r3, [pc, #128]	; (8000430 <Align_Motor+0xb4>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]
		Set_Motor_State(Trigger_Control_State[Motor_Control.Motor_State_Index], Start_Up.Align_DutyCycle);
 80003b2:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <Align_Motor+0xb4>)
 80003b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003b8:	461a      	mov	r2, r3
 80003ba:	4b20      	ldr	r3, [pc, #128]	; (800043c <Align_Motor+0xc0>)
 80003bc:	5c9b      	ldrb	r3, [r3, r2]
 80003be:	4a1d      	ldr	r2, [pc, #116]	; (8000434 <Align_Motor+0xb8>)
 80003c0:	89d2      	ldrh	r2, [r2, #14]
 80003c2:	4611      	mov	r1, r2
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 f92b 	bl	8000620 <Set_Motor_State>
		if( (Trigger_Control_State[Motor_Control.Motor_State_Index] == State_C_B) && Tour_Counter++ >= Start_Up.Tour*Start_Up.Align_Coefficient)
 80003ca:	4b19      	ldr	r3, [pc, #100]	; (8000430 <Align_Motor+0xb4>)
 80003cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003d0:	461a      	mov	r2, r3
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <Align_Motor+0xc0>)
 80003d4:	5c9b      	ldrb	r3, [r3, r2]
 80003d6:	2b04      	cmp	r3, #4
 80003d8:	d115      	bne.n	8000406 <Align_Motor+0x8a>
 80003da:	4b19      	ldr	r3, [pc, #100]	; (8000440 <Align_Motor+0xc4>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	1c5a      	adds	r2, r3, #1
 80003e0:	4917      	ldr	r1, [pc, #92]	; (8000440 <Align_Motor+0xc4>)
 80003e2:	600a      	str	r2, [r1, #0]
 80003e4:	4a13      	ldr	r2, [pc, #76]	; (8000434 <Align_Motor+0xb8>)
 80003e6:	8852      	ldrh	r2, [r2, #2]
 80003e8:	4611      	mov	r1, r2
 80003ea:	4a12      	ldr	r2, [pc, #72]	; (8000434 <Align_Motor+0xb8>)
 80003ec:	8992      	ldrh	r2, [r2, #12]
 80003ee:	fb02 f201 	mul.w	r2, r2, r1
 80003f2:	4293      	cmp	r3, r2
 80003f4:	db07      	blt.n	8000406 <Align_Motor+0x8a>
			Motor_Control.Drive_Stage = RUN;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <Align_Motor+0xb4>)
 80003f8:	2202      	movs	r2, #2
 80003fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			Tour_Counter = 0;
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <Align_Motor+0xc4>)
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
}
 8000404:	e011      	b.n	800042a <Align_Motor+0xae>
			Motor_Control.Motor_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <Align_Motor+0xb4>)
 8000408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <Align_Motor+0xc8>)
 8000410:	fb83 3102 	smull	r3, r1, r3, r2
 8000414:	17d3      	asrs	r3, r2, #31
 8000416:	1ac9      	subs	r1, r1, r3
 8000418:	460b      	mov	r3, r1
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	440b      	add	r3, r1
 800041e:	005b      	lsls	r3, r3, #1
 8000420:	1ad1      	subs	r1, r2, r3
 8000422:	b2ca      	uxtb	r2, r1
 8000424:	4b02      	ldr	r3, [pc, #8]	; (8000430 <Align_Motor+0xb4>)
 8000426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	200001fc 	.word	0x200001fc
 8000434:	2000016c 	.word	0x2000016c
 8000438:	469c4000 	.word	0x469c4000
 800043c:	080043c8 	.word	0x080043c8
 8000440:	2000002c 	.word	0x2000002c
 8000444:	2aaaaaab 	.word	0x2aaaaaab

08000448 <Run_Motor>:

void Run_Motor()
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0

	  static uint8_t Next_State_Index = 0;

	  Motor_Control.A_Out = HAL_GPIO_ReadPin(COMP_A_OUT_GPIO_Port, COMP_A_OUT_Pin);
 800044c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f001 fb5e 	bl	8001b14 <HAL_GPIO_ReadPin>
 8000458:	4603      	mov	r3, r0
 800045a:	461a      	mov	r2, r3
 800045c:	4b29      	ldr	r3, [pc, #164]	; (8000504 <Run_Motor+0xbc>)
 800045e:	605a      	str	r2, [r3, #4]
	  Motor_Control.B_Out = HAL_GPIO_ReadPin(COMP_B_OUT_GPIO_Port, COMP_B_OUT_Pin);
 8000460:	2102      	movs	r1, #2
 8000462:	4829      	ldr	r0, [pc, #164]	; (8000508 <Run_Motor+0xc0>)
 8000464:	f001 fb56 	bl	8001b14 <HAL_GPIO_ReadPin>
 8000468:	4603      	mov	r3, r0
 800046a:	461a      	mov	r2, r3
 800046c:	4b25      	ldr	r3, [pc, #148]	; (8000504 <Run_Motor+0xbc>)
 800046e:	609a      	str	r2, [r3, #8]
	  Motor_Control.C_Out = HAL_GPIO_ReadPin(COMP_C_OUT_GPIO_Port, COMP_C_OUT_Pin);
 8000470:	2140      	movs	r1, #64	; 0x40
 8000472:	4826      	ldr	r0, [pc, #152]	; (800050c <Run_Motor+0xc4>)
 8000474:	f001 fb4e 	bl	8001b14 <HAL_GPIO_ReadPin>
 8000478:	4603      	mov	r3, r0
 800047a:	461a      	mov	r2, r3
 800047c:	4b21      	ldr	r3, [pc, #132]	; (8000504 <Run_Motor+0xbc>)
 800047e:	60da      	str	r2, [r3, #12]

	  Motor_Control.Rotor_Position = (Motor_Control.C_Out << 2) + (Motor_Control.B_Out << 1) + (Motor_Control.A_Out);
 8000480:	4b20      	ldr	r3, [pc, #128]	; (8000504 <Run_Motor+0xbc>)
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	b2db      	uxtb	r3, r3
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	b2da      	uxtb	r2, r3
 800048a:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <Run_Motor+0xbc>)
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	b2db      	uxtb	r3, r3
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	b2db      	uxtb	r3, r3
 8000494:	4413      	add	r3, r2
 8000496:	b2da      	uxtb	r2, r3
 8000498:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <Run_Motor+0xbc>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4413      	add	r3, r2
 80004a0:	b2da      	uxtb	r2, r3
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <Run_Motor+0xbc>)
 80004a4:	70da      	strb	r2, [r3, #3]

	  Next_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <Run_Motor+0xbc>)
 80004a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80004ac:	1c5a      	adds	r2, r3, #1
 80004ae:	4b18      	ldr	r3, [pc, #96]	; (8000510 <Run_Motor+0xc8>)
 80004b0:	fb83 3102 	smull	r3, r1, r3, r2
 80004b4:	17d3      	asrs	r3, r2, #31
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	460b      	mov	r3, r1
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	440b      	add	r3, r1
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	1ad1      	subs	r1, r2, r3
 80004c2:	b2ca      	uxtb	r2, r1
 80004c4:	4b13      	ldr	r3, [pc, #76]	; (8000514 <Run_Motor+0xcc>)
 80004c6:	701a      	strb	r2, [r3, #0]

	  if(Motor_Control.Rotor_Position == Trigger_Control_State[Next_State_Index])
 80004c8:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <Run_Motor+0xbc>)
 80004ca:	78da      	ldrb	r2, [r3, #3]
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <Run_Motor+0xcc>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4619      	mov	r1, r3
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <Run_Motor+0xd0>)
 80004d4:	5c5b      	ldrb	r3, [r3, r1]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d111      	bne.n	80004fe <Run_Motor+0xb6>
	  {
		  Motor_Control.Motor_State_Index = Next_State_Index;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <Run_Motor+0xcc>)
 80004dc:	781a      	ldrb	r2, [r3, #0]
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <Run_Motor+0xbc>)
 80004e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		  Set_Motor_State(Trigger_Control_State[Motor_Control.Motor_State_Index], Motor_Control.Duty_Cycle);
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <Run_Motor+0xbc>)
 80004e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <Run_Motor+0xd0>)
 80004ee:	5c9b      	ldrb	r3, [r3, r2]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <Run_Motor+0xbc>)
 80004f2:	7892      	ldrb	r2, [r2, #2]
 80004f4:	b292      	uxth	r2, r2
 80004f6:	4611      	mov	r1, r2
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f891 	bl	8000620 <Set_Motor_State>
//			  Motor_Control.RPM_Counter = 0;
//			  Motor_Control.RPM++;	// Buraya beklediğimizden hızlı giriyor		0,008 saniyede bir giriyo.
//		  }
	  }

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	200001fc 	.word	0x200001fc
 8000508:	48000400 	.word	0x48000400
 800050c:	48000800 	.word	0x48000800
 8000510:	2aaaaaab 	.word	0x2aaaaaab
 8000514:	20000030 	.word	0x20000030
 8000518:	080043c8 	.word	0x080043c8

0800051c <Blinde_Mode>:

void Blinde_Mode()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	  if(Motor_Control.Blinde_Mode_Counter++ >= MOTOR_CONTROL_TASK_HZ*(float)(1.0f/(Motor_Control.Blinde_Mode_RPM*6)))
 8000520:	4b38      	ldr	r3, [pc, #224]	; (8000604 <Blinde_Mode+0xe8>)
 8000522:	6a1a      	ldr	r2, [r3, #32]
 8000524:	1c53      	adds	r3, r2, #1
 8000526:	4937      	ldr	r1, [pc, #220]	; (8000604 <Blinde_Mode+0xe8>)
 8000528:	620b      	str	r3, [r1, #32]
 800052a:	ee07 2a90 	vmov	s15, r2
 800052e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000532:	4b34      	ldr	r3, [pc, #208]	; (8000604 <Blinde_Mode+0xe8>)
 8000534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000536:	4613      	mov	r3, r2
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	4413      	add	r3, r2
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	ee07 3a90 	vmov	s15, r3
 8000542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000546:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800054a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800054e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8000608 <Blinde_Mode+0xec>
 8000552:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800055a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800055e:	da00      	bge.n	8000562 <Blinde_Mode+0x46>
		  Set_Motor_State(Trigger_Control_State[h], Motor_Control.Duty_Cycle);
		  h = (h+1) % 6;

		  Motor_Control.Drive_Stage = START_UP;
	  }
}
 8000560:	e04d      	b.n	80005fe <Blinde_Mode+0xe2>
		  Motor_Control.Blinde_Mode_Counter = 0;
 8000562:	4b28      	ldr	r3, [pc, #160]	; (8000604 <Blinde_Mode+0xe8>)
 8000564:	2200      	movs	r2, #0
 8000566:	621a      	str	r2, [r3, #32]
		  Motor_Control.A_Out = HAL_GPIO_ReadPin(COMP_A_OUT_GPIO_Port, COMP_A_OUT_Pin);
 8000568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f001 fad0 	bl	8001b14 <HAL_GPIO_ReadPin>
 8000574:	4603      	mov	r3, r0
 8000576:	461a      	mov	r2, r3
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <Blinde_Mode+0xe8>)
 800057a:	605a      	str	r2, [r3, #4]
		  Motor_Control.B_Out = HAL_GPIO_ReadPin(COMP_B_OUT_GPIO_Port, COMP_B_OUT_Pin);
 800057c:	2102      	movs	r1, #2
 800057e:	4823      	ldr	r0, [pc, #140]	; (800060c <Blinde_Mode+0xf0>)
 8000580:	f001 fac8 	bl	8001b14 <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	461a      	mov	r2, r3
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <Blinde_Mode+0xe8>)
 800058a:	609a      	str	r2, [r3, #8]
		  Motor_Control.C_Out = HAL_GPIO_ReadPin(COMP_C_OUT_GPIO_Port, COMP_C_OUT_Pin);
 800058c:	2140      	movs	r1, #64	; 0x40
 800058e:	4820      	ldr	r0, [pc, #128]	; (8000610 <Blinde_Mode+0xf4>)
 8000590:	f001 fac0 	bl	8001b14 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <Blinde_Mode+0xe8>)
 800059a:	60da      	str	r2, [r3, #12]
		  Motor_Control.Rotor_Position = (Motor_Control.C_Out << 2) + (Motor_Control.B_Out << 1) + (Motor_Control.A_Out);
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <Blinde_Mode+0xe8>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <Blinde_Mode+0xe8>)
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	4413      	add	r3, r2
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <Blinde_Mode+0xe8>)
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4413      	add	r3, r2
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <Blinde_Mode+0xe8>)
 80005c0:	70da      	strb	r2, [r3, #3]
		  Set_Motor_State(Trigger_Control_State[h], Motor_Control.Duty_Cycle);
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <Blinde_Mode+0xf8>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a14      	ldr	r2, [pc, #80]	; (8000618 <Blinde_Mode+0xfc>)
 80005c8:	5cd3      	ldrb	r3, [r2, r3]
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <Blinde_Mode+0xe8>)
 80005cc:	7892      	ldrb	r2, [r2, #2]
 80005ce:	b292      	uxth	r2, r2
 80005d0:	4611      	mov	r1, r2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f824 	bl	8000620 <Set_Motor_State>
		  h = (h+1) % 6;
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <Blinde_Mode+0xf8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	1c59      	adds	r1, r3, #1
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <Blinde_Mode+0x100>)
 80005e0:	fb83 3201 	smull	r3, r2, r3, r1
 80005e4:	17cb      	asrs	r3, r1, #31
 80005e6:	1ad2      	subs	r2, r2, r3
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	1aca      	subs	r2, r1, r3
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <Blinde_Mode+0xf8>)
 80005f4:	601a      	str	r2, [r3, #0]
		  Motor_Control.Drive_Stage = START_UP;
 80005f6:	4b03      	ldr	r3, [pc, #12]	; (8000604 <Blinde_Mode+0xe8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200001fc 	.word	0x200001fc
 8000608:	469c4000 	.word	0x469c4000
 800060c:	48000400 	.word	0x48000400
 8000610:	48000800 	.word	0x48000800
 8000614:	20000034 	.word	0x20000034
 8000618:	080043c8 	.word	0x080043c8
 800061c:	2aaaaaab 	.word	0x2aaaaaab

08000620 <Set_Motor_State>:

void Set_Motor_State(uint8_t State, uint16_t DutyCycle)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	460a      	mov	r2, r1
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	4613      	mov	r3, r2
 800062e:	80bb      	strh	r3, [r7, #4]
	Motor_Control.Signal = (htim1.Init.Period+1)*DutyCycle/100;	// CCR
 8000630:	4b79      	ldr	r3, [pc, #484]	; (8000818 <Set_Motor_State+0x1f8>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	3301      	adds	r3, #1
 8000636:	88ba      	ldrh	r2, [r7, #4]
 8000638:	fb02 f303 	mul.w	r3, r2, r3
 800063c:	4a77      	ldr	r2, [pc, #476]	; (800081c <Set_Motor_State+0x1fc>)
 800063e:	fba2 2303 	umull	r2, r3, r2, r3
 8000642:	095b      	lsrs	r3, r3, #5
 8000644:	4a76      	ldr	r2, [pc, #472]	; (8000820 <Set_Motor_State+0x200>)
 8000646:	6113      	str	r3, [r2, #16]
	Motor_Control.Max_Signal = htim1.Init.Period+1;				// ARR
 8000648:	4b73      	ldr	r3, [pc, #460]	; (8000818 <Set_Motor_State+0x1f8>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	3301      	adds	r3, #1
 800064e:	4a74      	ldr	r2, [pc, #464]	; (8000820 <Set_Motor_State+0x200>)
 8000650:	6153      	str	r3, [r2, #20]

	switch(State)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	3b01      	subs	r3, #1
 8000656:	2b05      	cmp	r3, #5
 8000658:	f200 80d6 	bhi.w	8000808 <Set_Motor_State+0x1e8>
 800065c:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <Set_Motor_State+0x44>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	080006bf 	.word	0x080006bf
 8000668:	08000743 	.word	0x08000743
 800066c:	08000701 	.word	0x08000701
 8000670:	080007c7 	.word	0x080007c7
 8000674:	0800067d 	.word	0x0800067d
 8000678:	08000785 	.word	0x08000785
	{

		case State_A_B:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 800067c:	4b69      	ldr	r3, [pc, #420]	; (8000824 <Set_Motor_State+0x204>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2200      	movs	r2, #0
 8000682:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 8000684:	4b67      	ldr	r3, [pc, #412]	; (8000824 <Set_Motor_State+0x204>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2200      	movs	r2, #0
 800068a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800068c:	4b62      	ldr	r3, [pc, #392]	; (8000818 <Set_Motor_State+0x1f8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2200      	movs	r2, #0
 8000692:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000694:	4b60      	ldr	r3, [pc, #384]	; (8000818 <Set_Motor_State+0x1f8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2200      	movs	r2, #0
 800069a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,Motor_Control.Signal);		// A HIGH ACTIVE
 800069c:	4b5e      	ldr	r3, [pc, #376]	; (8000818 <Set_Motor_State+0x1f8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a5f      	ldr	r2, [pc, #380]	; (8000820 <Set_Motor_State+0x200>)
 80006a2:	6912      	ldr	r2, [r2, #16]
 80006a4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,Motor_Control.Max_Signal);	// B LOW AVTIVE
 80006a6:	4b5f      	ldr	r3, [pc, #380]	; (8000824 <Set_Motor_State+0x204>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a5d      	ldr	r2, [pc, #372]	; (8000820 <Set_Motor_State+0x200>)
 80006ac:	6952      	ldr	r2, [r2, #20]
 80006ae:	639a      	str	r2, [r3, #56]	; 0x38

			Motor_Control.Pulse_Center = htim1.Instance->CCR1 / 2;
 80006b0:	4b59      	ldr	r3, [pc, #356]	; (8000818 <Set_Motor_State+0x1f8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006b6:	085b      	lsrs	r3, r3, #1
 80006b8:	4a59      	ldr	r2, [pc, #356]	; (8000820 <Set_Motor_State+0x200>)
 80006ba:	6193      	str	r3, [r2, #24]

			break;
 80006bc:	e0a5      	b.n	800080a <Set_Motor_State+0x1ea>

		case State_A_C:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 80006be:	4b59      	ldr	r3, [pc, #356]	; (8000824 <Set_Motor_State+0x204>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2200      	movs	r2, #0
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 80006c6:	4b57      	ldr	r3, [pc, #348]	; (8000824 <Set_Motor_State+0x204>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2200      	movs	r2, #0
 80006cc:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80006ce:	4b52      	ldr	r3, [pc, #328]	; (8000818 <Set_Motor_State+0x1f8>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2200      	movs	r2, #0
 80006d4:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80006d6:	4b50      	ldr	r3, [pc, #320]	; (8000818 <Set_Motor_State+0x1f8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2200      	movs	r2, #0
 80006dc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,Motor_Control.Signal);		// A HIGH ACTIVE
 80006de:	4b4e      	ldr	r3, [pc, #312]	; (8000818 <Set_Motor_State+0x1f8>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a4f      	ldr	r2, [pc, #316]	; (8000820 <Set_Motor_State+0x200>)
 80006e4:	6912      	ldr	r2, [r2, #16]
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,Motor_Control.Max_Signal);	// C LOW ACTIVE
 80006e8:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <Set_Motor_State+0x204>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a4c      	ldr	r2, [pc, #304]	; (8000820 <Set_Motor_State+0x200>)
 80006ee:	6952      	ldr	r2, [r2, #20]
 80006f0:	63da      	str	r2, [r3, #60]	; 0x3c

			Motor_Control.Pulse_Center = htim1.Instance->CCR1 / 2;
 80006f2:	4b49      	ldr	r3, [pc, #292]	; (8000818 <Set_Motor_State+0x1f8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006f8:	085b      	lsrs	r3, r3, #1
 80006fa:	4a49      	ldr	r2, [pc, #292]	; (8000820 <Set_Motor_State+0x200>)
 80006fc:	6193      	str	r3, [r2, #24]

			break;
 80006fe:	e084      	b.n	800080a <Set_Motor_State+0x1ea>

		case State_B_C:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 8000700:	4b48      	ldr	r3, [pc, #288]	; (8000824 <Set_Motor_State+0x204>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2200      	movs	r2, #0
 8000706:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 8000708:	4b46      	ldr	r3, [pc, #280]	; (8000824 <Set_Motor_State+0x204>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2200      	movs	r2, #0
 800070e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000710:	4b41      	ldr	r3, [pc, #260]	; (8000818 <Set_Motor_State+0x1f8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000718:	4b3f      	ldr	r3, [pc, #252]	; (8000818 <Set_Motor_State+0x1f8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2200      	movs	r2, #0
 800071e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Motor_Control.Signal);		// B HIGH ACTIVE
 8000720:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <Set_Motor_State+0x1f8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a3e      	ldr	r2, [pc, #248]	; (8000820 <Set_Motor_State+0x200>)
 8000726:	6912      	ldr	r2, [r2, #16]
 8000728:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,Motor_Control.Max_Signal);	// C LOW ACTIVE
 800072a:	4b3e      	ldr	r3, [pc, #248]	; (8000824 <Set_Motor_State+0x204>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a3c      	ldr	r2, [pc, #240]	; (8000820 <Set_Motor_State+0x200>)
 8000730:	6952      	ldr	r2, [r2, #20]
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c

			Motor_Control.Pulse_Center = htim1.Instance->CCR2 / 2;
 8000734:	4b38      	ldr	r3, [pc, #224]	; (8000818 <Set_Motor_State+0x1f8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800073a:	085b      	lsrs	r3, r3, #1
 800073c:	4a38      	ldr	r2, [pc, #224]	; (8000820 <Set_Motor_State+0x200>)
 800073e:	6193      	str	r3, [r2, #24]

			break;
 8000740:	e063      	b.n	800080a <Set_Motor_State+0x1ea>

		case State_B_A:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 8000742:	4b38      	ldr	r3, [pc, #224]	; (8000824 <Set_Motor_State+0x204>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2200      	movs	r2, #0
 8000748:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 800074a:	4b36      	ldr	r3, [pc, #216]	; (8000824 <Set_Motor_State+0x204>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2200      	movs	r2, #0
 8000750:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000752:	4b31      	ldr	r3, [pc, #196]	; (8000818 <Set_Motor_State+0x1f8>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2200      	movs	r2, #0
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 800075a:	4b2f      	ldr	r3, [pc, #188]	; (8000818 <Set_Motor_State+0x1f8>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2200      	movs	r2, #0
 8000760:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Motor_Control.Signal);	// B HIGH ACTIVE
 8000762:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <Set_Motor_State+0x1f8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a2e      	ldr	r2, [pc, #184]	; (8000820 <Set_Motor_State+0x200>)
 8000768:	6912      	ldr	r2, [r2, #16]
 800076a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,Motor_Control.Max_Signal);	// A LOW ACTIVE
 800076c:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <Set_Motor_State+0x204>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a2b      	ldr	r2, [pc, #172]	; (8000820 <Set_Motor_State+0x200>)
 8000772:	6952      	ldr	r2, [r2, #20]
 8000774:	635a      	str	r2, [r3, #52]	; 0x34

			Motor_Control.Pulse_Center = htim1.Instance->CCR2 / 2;
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <Set_Motor_State+0x1f8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	4a28      	ldr	r2, [pc, #160]	; (8000820 <Set_Motor_State+0x200>)
 8000780:	6193      	str	r3, [r2, #24]

			break;
 8000782:	e042      	b.n	800080a <Set_Motor_State+0x1ea>

		case State_C_A:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 8000784:	4b27      	ldr	r3, [pc, #156]	; (8000824 <Set_Motor_State+0x204>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2200      	movs	r2, #0
 800078a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 800078c:	4b25      	ldr	r3, [pc, #148]	; (8000824 <Set_Motor_State+0x204>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2200      	movs	r2, #0
 8000792:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <Set_Motor_State+0x1f8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2200      	movs	r2, #0
 800079a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <Set_Motor_State+0x1f8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2200      	movs	r2, #0
 80007a2:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,Motor_Control.Signal);	// C HIGH ACTIVE
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <Set_Motor_State+0x1f8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a1d      	ldr	r2, [pc, #116]	; (8000820 <Set_Motor_State+0x200>)
 80007aa:	6912      	ldr	r2, [r2, #16]
 80007ac:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,Motor_Control.Max_Signal);	// A LOW ACTIVE
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <Set_Motor_State+0x204>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a1b      	ldr	r2, [pc, #108]	; (8000820 <Set_Motor_State+0x200>)
 80007b4:	6952      	ldr	r2, [r2, #20]
 80007b6:	635a      	str	r2, [r3, #52]	; 0x34

			Motor_Control.Pulse_Center = htim1.Instance->CCR3 / 2;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <Set_Motor_State+0x1f8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007be:	085b      	lsrs	r3, r3, #1
 80007c0:	4a17      	ldr	r2, [pc, #92]	; (8000820 <Set_Motor_State+0x200>)
 80007c2:	6193      	str	r3, [r2, #24]

			break;
 80007c4:	e021      	b.n	800080a <Set_Motor_State+0x1ea>

		case State_C_B:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <Set_Motor_State+0x204>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2200      	movs	r2, #0
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <Set_Motor_State+0x204>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2200      	movs	r2, #0
 80007d4:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <Set_Motor_State+0x1f8>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2200      	movs	r2, #0
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <Set_Motor_State+0x1f8>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2200      	movs	r2, #0
 80007e4:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,Motor_Control.Signal);	// C HIGH ACTIVE
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <Set_Motor_State+0x1f8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <Set_Motor_State+0x200>)
 80007ec:	6912      	ldr	r2, [r2, #16]
 80007ee:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,Motor_Control.Max_Signal);	// B LOW ACTIVE
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <Set_Motor_State+0x204>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <Set_Motor_State+0x200>)
 80007f6:	6952      	ldr	r2, [r2, #20]
 80007f8:	639a      	str	r2, [r3, #56]	; 0x38

			Motor_Control.Pulse_Center = htim1.Instance->CCR3 / 2;
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <Set_Motor_State+0x1f8>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	4a07      	ldr	r2, [pc, #28]	; (8000820 <Set_Motor_State+0x200>)
 8000804:	6193      	str	r3, [r2, #24]

			break;
 8000806:	e000      	b.n	800080a <Set_Motor_State+0x1ea>

		default:
			break;
 8000808:	bf00      	nop

	}
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000120 	.word	0x20000120
 800081c:	51eb851f 	.word	0x51eb851f
 8000820:	200001fc 	.word	0x200001fc
 8000824:	200001ac 	.word	0x200001ac

08000828 <HAL_TIM_PeriodElapsedCallback>:
#include "TimeTask.h"
#include "SixStepCommutation.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	if(htim == &htim15)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d115      	bne.n	8000864 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		timerCounter++;
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000840:	6013      	str	r3, [r2, #0]
//		if(timerCounter % 20 == 1 )
//		{
//			Time.Task.Hz_50 = 1;
//		}

		if(timerCounter % 200 == 1 )
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000848:	fba3 1302 	umull	r1, r3, r3, r2
 800084c:	099b      	lsrs	r3, r3, #6
 800084e:	21c8      	movs	r1, #200	; 0xc8
 8000850:	fb01 f303 	mul.w	r3, r1, r3
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	2b01      	cmp	r3, #1
 8000858:	d104      	bne.n	8000864 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			Time.Task.Hz_5 = 1;
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800085c:	7813      	ldrb	r3, [r2, #0]
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	7013      	strb	r3, [r2, #0]
//		{
//			Time.Task.Hz_100 = 1;
//		}

	}
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	20000070 	.word	0x20000070
 8000874:	2000011c 	.word	0x2000011c
 8000878:	51eb851f 	.word	0x51eb851f
 800087c:	200001f8 	.word	0x200001f8

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000884:	f000 fd18 	bl	80012b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000888:	f000 f846 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f000 fa7a 	bl	8000d84 <MX_GPIO_Init>
  MX_COMP2_Init();
 8000890:	f000 f8a0 	bl	80009d4 <MX_COMP2_Init>
  MX_COMP4_Init();
 8000894:	f000 f8c4 	bl	8000a20 <MX_COMP4_Init>
  MX_COMP6_Init();
 8000898:	f000 f8e8 	bl	8000a6c <MX_COMP6_Init>
  MX_TIM1_Init();
 800089c:	f000 f90c 	bl	8000ab8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008a0:	f000 f9b0 	bl	8000c04 <MX_TIM2_Init>
  MX_TIM15_Init();
 80008a4:	f000 fa1c 	bl	8000ce0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  PeripheralsStart();
 80008a8:	f7ff fc8e 	bl	80001c8 <PeripheralsStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Motor_Control.System_Enable == 1)
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <main+0x90>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d127      	bne.n	8000904 <main+0x84>
	  {

		  if(htim1.Instance->CNT == Motor_Control.Pulse_Center)
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <main+0x94>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <main+0x90>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d1f4      	bne.n	80008ac <main+0x2c>
		  {

			  Motor_Control.RPM_Counter++;
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <main+0x90>)
 80008c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c6:	3301      	adds	r3, #1
 80008c8:	4a11      	ldr	r2, [pc, #68]	; (8000910 <main+0x90>)
 80008ca:	62d3      	str	r3, [r2, #44]	; 0x2c

			  if(Motor_Control.Blinde_Mode != 1)
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <main+0x90>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d014      	beq.n	80008fe <main+0x7e>
			  {

				  switch(Motor_Control.Drive_Stage)
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <main+0x90>)
 80008d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d00c      	beq.n	80008f8 <main+0x78>
 80008de:	2b02      	cmp	r3, #2
 80008e0:	dc13      	bgt.n	800090a <main+0x8a>
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <main+0x6c>
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d003      	beq.n	80008f2 <main+0x72>

						  break;
					  }

					  default:
						  break;
 80008ea:	e00e      	b.n	800090a <main+0x8a>
						  Start_Up_Motor();
 80008ec:	f7ff fce4 	bl	80002b8 <Start_Up_Motor>
						  break;
 80008f0:	e00c      	b.n	800090c <main+0x8c>
						  Align_Motor();
 80008f2:	f7ff fd43 	bl	800037c <Align_Motor>
						  break;
 80008f6:	e009      	b.n	800090c <main+0x8c>
						  Run_Motor();
 80008f8:	f7ff fda6 	bl	8000448 <Run_Motor>
						  break;
 80008fc:	e006      	b.n	800090c <main+0x8c>
				  }
			  }

			  else
			  {
				  Blinde_Mode();
 80008fe:	f7ff fe0d 	bl	800051c <Blinde_Mode>
 8000902:	e7d3      	b.n	80008ac <main+0x2c>

	  }

	  else
	  {
		  Stop_Motor();
 8000904:	f7ff fcae 	bl	8000264 <Stop_Motor>
 8000908:	e7d0      	b.n	80008ac <main+0x2c>
						  break;
 800090a:	bf00      	nop
	  if(Motor_Control.System_Enable == 1)
 800090c:	e7ce      	b.n	80008ac <main+0x2c>
 800090e:	bf00      	nop
 8000910:	200001fc 	.word	0x200001fc
 8000914:	20000120 	.word	0x20000120

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09c      	sub	sp, #112	; 0x70
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000922:	2228      	movs	r2, #40	; 0x28
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f003 fd3a 	bl	80043a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800093c:	463b      	mov	r3, r7
 800093e:	2234      	movs	r2, #52	; 0x34
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f003 fd2c 	bl	80043a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000948:	2301      	movs	r3, #1
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800094c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000950:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000956:	2301      	movs	r3, #1
 8000958:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000962:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000964:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000968:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800096e:	4618      	mov	r0, r3
 8000970:	f001 f8e8 	bl	8001b44 <HAL_RCC_OscConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800097a:	f000 fa3f 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097e:	230f      	movs	r3, #15
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000982:	2302      	movs	r3, #2
 8000984:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800098a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000994:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000998:	2102      	movs	r1, #2
 800099a:	4618      	mov	r0, r3
 800099c:	f001 ffda 	bl	8002954 <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009a6:	f000 fa29 	bl	8000dfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15;
 80009aa:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 80009ae:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 f9b0 	bl	8002d20 <HAL_RCCEx_PeriphCLKConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80009c6:	f000 fa19 	bl	8000dfc <Error_Handler>
  }
}
 80009ca:	bf00      	nop
 80009cc:	3770      	adds	r7, #112	; 0x70
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_COMP2_Init+0x44>)
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <MX_COMP2_Init+0x48>)
 80009dc:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_COMP2_Init+0x44>)
 80009e0:	2240      	movs	r2, #64	; 0x40
 80009e2:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_COMP2_Init+0x44>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_COMP2_Init+0x44>)
 80009ec:	222a      	movs	r2, #42	; 0x2a
 80009ee:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_COMP2_Init+0x44>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_COMP2_Init+0x44>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_COMP2_Init+0x44>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_COMP2_Init+0x44>)
 8000a04:	f000 fcbe 	bl	8001384 <HAL_COMP_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8000a0e:	f000 f9f5 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000017c 	.word	0x2000017c
 8000a1c:	40010020 	.word	0x40010020

08000a20 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_COMP4_Init+0x44>)
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <MX_COMP4_Init+0x48>)
 8000a28:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_COMP4_Init+0x44>)
 8000a2c:	2240      	movs	r2, #64	; 0x40
 8000a2e:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_COMP4_Init+0x44>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_COMP4_Init+0x44>)
 8000a38:	222a      	movs	r2, #42	; 0x2a
 8000a3a:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_COMP4_Init+0x44>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_COMP4_Init+0x44>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_COMP4_Init+0x44>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_COMP4_Init+0x44>)
 8000a50:	f000 fc98 	bl	8001384 <HAL_COMP_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_COMP4_Init+0x3e>
  {
    Error_Handler();
 8000a5a:	f000 f9cf 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000ec 	.word	0x200000ec
 8000a68:	40010028 	.word	0x40010028

08000a6c <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_COMP6_Init+0x44>)
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <MX_COMP6_Init+0x48>)
 8000a74:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_COMP6_Init+0x44>)
 8000a78:	2240      	movs	r2, #64	; 0x40
 8000a7a:	605a      	str	r2, [r3, #4]
  hcomp6.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_COMP6_Init+0x44>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hcomp6.Init.Output = COMP_OUTPUT_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_COMP6_Init+0x44>)
 8000a84:	222a      	movs	r2, #42	; 0x2a
 8000a86:	60da      	str	r2, [r3, #12]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_COMP6_Init+0x44>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_COMP6_Init+0x44>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_COMP6_Init+0x44>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_COMP6_Init+0x44>)
 8000a9c:	f000 fc72 	bl	8001384 <HAL_COMP_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_COMP6_Init+0x3e>
  {
    Error_Handler();
 8000aa6:	f000 f9a9 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200000bc 	.word	0x200000bc
 8000ab4:	40010030 	.word	0x40010030

08000ab8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b096      	sub	sp, #88	; 0x58
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
 8000ada:	615a      	str	r2, [r3, #20]
 8000adc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	222c      	movs	r2, #44	; 0x2c
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 fc5b 	bl	80043a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aea:	4b44      	ldr	r3, [pc, #272]	; (8000bfc <MX_TIM1_Init+0x144>)
 8000aec:	4a44      	ldr	r2, [pc, #272]	; (8000c00 <MX_TIM1_Init+0x148>)
 8000aee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000af0:	4b42      	ldr	r3, [pc, #264]	; (8000bfc <MX_TIM1_Init+0x144>)
 8000af2:	2247      	movs	r2, #71	; 0x47
 8000af4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b41      	ldr	r3, [pc, #260]	; (8000bfc <MX_TIM1_Init+0x144>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 8000afc:	4b3f      	ldr	r3, [pc, #252]	; (8000bfc <MX_TIM1_Init+0x144>)
 8000afe:	2231      	movs	r2, #49	; 0x31
 8000b00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b02:	4b3e      	ldr	r3, [pc, #248]	; (8000bfc <MX_TIM1_Init+0x144>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b08:	4b3c      	ldr	r3, [pc, #240]	; (8000bfc <MX_TIM1_Init+0x144>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0e:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <MX_TIM1_Init+0x144>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b14:	4839      	ldr	r0, [pc, #228]	; (8000bfc <MX_TIM1_Init+0x144>)
 8000b16:	f002 faec 	bl	80030f2 <HAL_TIM_PWM_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000b20:	f000 f96c 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b34:	4619      	mov	r1, r3
 8000b36:	4831      	ldr	r0, [pc, #196]	; (8000bfc <MX_TIM1_Init+0x144>)
 8000b38:	f003 fb12 	bl	8004160 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000b42:	f000 f95b 	bl	8000dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b46:	2360      	movs	r3, #96	; 0x60
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b52:	2300      	movs	r3, #0
 8000b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b66:	2200      	movs	r2, #0
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4824      	ldr	r0, [pc, #144]	; (8000bfc <MX_TIM1_Init+0x144>)
 8000b6c:	f002 fd1e 	bl	80035ac <HAL_TIM_PWM_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b76:	f000 f941 	bl	8000dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b7e:	2204      	movs	r2, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	481e      	ldr	r0, [pc, #120]	; (8000bfc <MX_TIM1_Init+0x144>)
 8000b84:	f002 fd12 	bl	80035ac <HAL_TIM_PWM_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000b8e:	f000 f935 	bl	8000dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b96:	2208      	movs	r2, #8
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4818      	ldr	r0, [pc, #96]	; (8000bfc <MX_TIM1_Init+0x144>)
 8000b9c:	f002 fd06 	bl	80035ac <HAL_TIM_PWM_ConfigChannel>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000ba6:	f000 f929 	bl	8000dfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4807      	ldr	r0, [pc, #28]	; (8000bfc <MX_TIM1_Init+0x144>)
 8000be0:	f003 fb24 	bl	800422c <HAL_TIMEx_ConfigBreakDeadTime>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000bea:	f000 f907 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <MX_TIM1_Init+0x144>)
 8000bf0:	f000 fa74 	bl	80010dc <HAL_TIM_MspPostInit>

}
 8000bf4:	bf00      	nop
 8000bf6:	3758      	adds	r7, #88	; 0x58
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000120 	.word	0x20000120
 8000c00:	40012c00 	.word	0x40012c00

08000c04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c16:	463b      	mov	r3, r7
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
 8000c24:	615a      	str	r2, [r3, #20]
 8000c26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c28:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <MX_TIM2_Init+0xd8>)
 8000c2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000c30:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <MX_TIM2_Init+0xd8>)
 8000c32:	2247      	movs	r2, #71	; 0x47
 8000c34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <MX_TIM2_Init+0xd8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 8000c3c:	4b27      	ldr	r3, [pc, #156]	; (8000cdc <MX_TIM2_Init+0xd8>)
 8000c3e:	2231      	movs	r2, #49	; 0x31
 8000c40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c42:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <MX_TIM2_Init+0xd8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <MX_TIM2_Init+0xd8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c4e:	4823      	ldr	r0, [pc, #140]	; (8000cdc <MX_TIM2_Init+0xd8>)
 8000c50:	f002 fa4f 	bl	80030f2 <HAL_TIM_PWM_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c5a:	f000 f8cf 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	481b      	ldr	r0, [pc, #108]	; (8000cdc <MX_TIM2_Init+0xd8>)
 8000c6e:	f003 fa77 	bl	8004160 <HAL_TIMEx_MasterConfigSynchronization>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c78:	f000 f8c0 	bl	8000dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c7c:	2360      	movs	r3, #96	; 0x60
 8000c7e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4619      	mov	r1, r3
 8000c92:	4812      	ldr	r0, [pc, #72]	; (8000cdc <MX_TIM2_Init+0xd8>)
 8000c94:	f002 fc8a 	bl	80035ac <HAL_TIM_PWM_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000c9e:	f000 f8ad 	bl	8000dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <MX_TIM2_Init+0xd8>)
 8000caa:	f002 fc7f 	bl	80035ac <HAL_TIM_PWM_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000cb4:	f000 f8a2 	bl	8000dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	2208      	movs	r2, #8
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <MX_TIM2_Init+0xd8>)
 8000cc0:	f002 fc74 	bl	80035ac <HAL_TIM_PWM_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000cca:	f000 f897 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cce:	4803      	ldr	r0, [pc, #12]	; (8000cdc <MX_TIM2_Init+0xd8>)
 8000cd0:	f000 fa04 	bl	80010dc <HAL_TIM_MspPostInit>

}
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	; 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200001ac 	.word	0x200001ac

08000ce0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d00:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <MX_TIM15_Init+0xa0>)
 8000d02:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 71;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d06:	2247      	movs	r2, #71	; 0x47
 8000d08:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d16:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d2a:	4814      	ldr	r0, [pc, #80]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d2c:	f002 f98a 	bl	8003044 <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000d36:	f000 f861 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	4619      	mov	r1, r3
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d48:	f002 fd44 	bl	80037d4 <HAL_TIM_ConfigClockSource>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000d52:	f000 f853 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_TIM15_Init+0x9c>)
 8000d64:	f003 f9fc 	bl	8004160 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000d6e:	f000 f845 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3720      	adds	r7, #32
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000070 	.word	0x20000070
 8000d80:	40014000 	.word	0x40014000

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <MX_GPIO_Init+0x74>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	4a1a      	ldr	r2, [pc, #104]	; (8000df8 <MX_GPIO_Init+0x74>)
 8000d90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d94:	6153      	str	r3, [r2, #20]
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <MX_GPIO_Init+0x74>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_GPIO_Init+0x74>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <MX_GPIO_Init+0x74>)
 8000da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dac:	6153      	str	r3, [r2, #20]
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <MX_GPIO_Init+0x74>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_GPIO_Init+0x74>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <MX_GPIO_Init+0x74>)
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	6153      	str	r3, [r2, #20]
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_GPIO_Init+0x74>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_GPIO_Init+0x74>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <MX_GPIO_Init+0x74>)
 8000dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ddc:	6153      	str	r3, [r2, #20]
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_GPIO_Init+0x74>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]

}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_MspInit+0x44>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <HAL_MspInit+0x44>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_MspInit+0x44>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <HAL_MspInit+0x44>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_MspInit+0x44>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_MspInit+0x44>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e3e:	2007      	movs	r0, #7
 8000e40:	f000 fcb4 	bl	80017ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	; 0x38
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a66      	ldr	r2, [pc, #408]	; (8001008 <HAL_COMP_MspInit+0x1b8>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d12b      	bne.n	8000eca <HAL_COMP_MspInit+0x7a>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b66      	ldr	r3, [pc, #408]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	4a65      	ldr	r2, [pc, #404]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	6153      	str	r3, [r2, #20]
 8000e7e:	4b63      	ldr	r3, [pc, #396]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	623b      	str	r3, [r7, #32]
 8000e88:	6a3b      	ldr	r3, [r7, #32]
    /**COMP2 GPIO Configuration
    PA4     ------> COMP2_INM
    PA7     ------> COMP2_INP
    PA12     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = Neutral_Point_Pin|COMP_A_INP_Pin;
 8000e8a:	2390      	movs	r3, #144	; 0x90
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea0:	f000 fcc6 	bl	8001830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = COMP_A_OUT_Pin;
 8000ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_GPCOMP2;
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(COMP_A_OUT_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f000 fcb4 	bl	8001830 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 8000ec8:	e099      	b.n	8000ffe <HAL_COMP_MspInit+0x1ae>
  else if(hcomp->Instance==COMP4)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a50      	ldr	r2, [pc, #320]	; (8001010 <HAL_COMP_MspInit+0x1c0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d141      	bne.n	8000f58 <HAL_COMP_MspInit+0x108>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	4a4c      	ldr	r2, [pc, #304]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ede:	6153      	str	r3, [r2, #20]
 8000ee0:	4b4a      	ldr	r3, [pc, #296]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	4b47      	ldr	r3, [pc, #284]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	4a46      	ldr	r2, [pc, #280]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000ef2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef6:	6153      	str	r3, [r2, #20]
 8000ef8:	4b44      	ldr	r3, [pc, #272]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f00:	61bb      	str	r3, [r7, #24]
 8000f02:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Neutral_Point_Pin;
 8000f04:	2310      	movs	r3, #16
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Neutral_Point_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f14:	4619      	mov	r1, r3
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1a:	f000 fc89 	bl	8001830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = COMP_B_INP_Pin;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f22:	2303      	movs	r3, #3
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COMP_B_INP_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4838      	ldr	r0, [pc, #224]	; (8001014 <HAL_COMP_MspInit+0x1c4>)
 8000f32:	f000 fc7d 	bl	8001830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = COMP_B_OUT_Pin;
 8000f36:	2302      	movs	r3, #2
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_GPCOMP4;
 8000f46:	2308      	movs	r3, #8
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(COMP_B_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4830      	ldr	r0, [pc, #192]	; (8001014 <HAL_COMP_MspInit+0x1c4>)
 8000f52:	f000 fc6d 	bl	8001830 <HAL_GPIO_Init>
}
 8000f56:	e052      	b.n	8000ffe <HAL_COMP_MspInit+0x1ae>
  else if(hcomp->Instance==COMP6)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a2e      	ldr	r2, [pc, #184]	; (8001018 <HAL_COMP_MspInit+0x1c8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d14d      	bne.n	8000ffe <HAL_COMP_MspInit+0x1ae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b2a      	ldr	r3, [pc, #168]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	4a29      	ldr	r2, [pc, #164]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	6153      	str	r3, [r2, #20]
 8000f6e:	4b27      	ldr	r3, [pc, #156]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b24      	ldr	r3, [pc, #144]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f84:	6153      	str	r3, [r2, #20]
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	4a1d      	ldr	r2, [pc, #116]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000f98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f9c:	6153      	str	r3, [r2, #20]
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <HAL_COMP_MspInit+0x1bc>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Neutral_Point_Pin;
 8000faa:	2310      	movs	r3, #16
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Neutral_Point_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc0:	f000 fc36 	bl	8001830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = COMP_C_INP_Pin;
 8000fc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COMP_C_INP_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480e      	ldr	r0, [pc, #56]	; (8001014 <HAL_COMP_MspInit+0x1c4>)
 8000fda:	f000 fc29 	bl	8001830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = COMP_C_OUT_Pin;
 8000fde:	2340      	movs	r3, #64	; 0x40
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_GPCOMP6;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(COMP_C_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4808      	ldr	r0, [pc, #32]	; (800101c <HAL_COMP_MspInit+0x1cc>)
 8000ffa:	f000 fc19 	bl	8001830 <HAL_GPIO_Init>
}
 8000ffe:	bf00      	nop
 8001000:	3738      	adds	r7, #56	; 0x38
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40010020 	.word	0x40010020
 800100c:	40021000 	.word	0x40021000
 8001010:	40010028 	.word	0x40010028
 8001014:	48000400 	.word	0x48000400
 8001018:	40010030 	.word	0x40010030
 800101c:	48000800 	.word	0x48000800

08001020 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a16      	ldr	r2, [pc, #88]	; (8001088 <HAL_TIM_PWM_MspInit+0x68>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d114      	bne.n	800105c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_TIM_PWM_MspInit+0x6c>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <HAL_TIM_PWM_MspInit+0x6c>)
 8001038:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <HAL_TIM_PWM_MspInit+0x6c>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	2018      	movs	r0, #24
 8001050:	f000 fbb7 	bl	80017c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001054:	2018      	movs	r0, #24
 8001056:	f000 fbd0 	bl	80017fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800105a:	e010      	b.n	800107e <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001064:	d10b      	bne.n	800107e <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_TIM_PWM_MspInit+0x6c>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <HAL_TIM_PWM_MspInit+0x6c>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	61d3      	str	r3, [r2, #28]
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_TIM_PWM_MspInit+0x6c>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40012c00 	.word	0x40012c00
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <HAL_TIM_Base_MspInit+0x44>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d113      	bne.n	80010ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_TIM_Base_MspInit+0x48>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <HAL_TIM_Base_MspInit+0x48>)
 80010a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ac:	6193      	str	r3, [r2, #24]
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_TIM_Base_MspInit+0x48>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2018      	movs	r0, #24
 80010c0:	f000 fb7f 	bl	80017c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80010c4:	2018      	movs	r0, #24
 80010c6:	f000 fb98 	bl	80017fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40014000 	.word	0x40014000
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a31      	ldr	r2, [pc, #196]	; (80011c0 <HAL_TIM_MspPostInit+0xe4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d11c      	bne.n	8001138 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <HAL_TIM_MspPostInit+0xe8>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4a30      	ldr	r2, [pc, #192]	; (80011c4 <HAL_TIM_MspPostInit+0xe8>)
 8001104:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001108:	6153      	str	r3, [r2, #20]
 800110a:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <HAL_TIM_MspPostInit+0xe8>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = A_HIGH_Pin|B_HIGH_Pin|C_HIGH_Pin;
 8001116:	2307      	movs	r3, #7
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001126:	2302      	movs	r3, #2
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4825      	ldr	r0, [pc, #148]	; (80011c8 <HAL_TIM_MspPostInit+0xec>)
 8001132:	f000 fb7d 	bl	8001830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001136:	e03e      	b.n	80011b6 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001140:	d139      	bne.n	80011b6 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <HAL_TIM_MspPostInit+0xe8>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	4a1f      	ldr	r2, [pc, #124]	; (80011c4 <HAL_TIM_MspPostInit+0xe8>)
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	6153      	str	r3, [r2, #20]
 800114e:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_TIM_MspPostInit+0xe8>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_TIM_MspPostInit+0xe8>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <HAL_TIM_MspPostInit+0xe8>)
 8001160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001164:	6153      	str	r3, [r2, #20]
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_TIM_MspPostInit+0xe8>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_LOW_Pin|B_LOW_Pin;
 8001172:	2303      	movs	r3, #3
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001182:	2301      	movs	r3, #1
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001190:	f000 fb4e 	bl	8001830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = C_LOW_Pin;
 8001194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011a6:	2301      	movs	r3, #1
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(C_LOW_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	4806      	ldr	r0, [pc, #24]	; (80011cc <HAL_TIM_MspPostInit+0xf0>)
 80011b2:	f000 fb3d 	bl	8001830 <HAL_GPIO_Init>
}
 80011b6:	bf00      	nop
 80011b8:	3728      	adds	r7, #40	; 0x28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40012c00 	.word	0x40012c00
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000800 	.word	0x48000800
 80011cc:	48000400 	.word	0x48000400

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <NMI_Handler+0x4>

080011d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <HardFault_Handler+0x4>

080011dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <MemManage_Handler+0x4>

080011e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <UsageFault_Handler+0x4>

080011ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121c:	f000 f892 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800122a:	f002 f89f 	bl	800336c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800122e:	4803      	ldr	r0, [pc, #12]	; (800123c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001230:	f002 f89c 	bl	800336c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000120 	.word	0x20000120
 800123c:	20000070 	.word	0x20000070

08001240 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <SystemInit+0x20>)
 8001246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <SystemInit+0x20>)
 800124c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800129c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800126a:	490e      	ldr	r1, [pc, #56]	; (80012a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <LoopForever+0xe>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001280:	4c0b      	ldr	r4, [pc, #44]	; (80012b0 <LoopForever+0x16>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800128e:	f7ff ffd7 	bl	8001240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001292:	f003 f861 	bl	8004358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001296:	f7ff faf3 	bl	8000880 <main>

0800129a <LoopForever>:

LoopForever:
    b LoopForever
 800129a:	e7fe      	b.n	800129a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800129c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012a8:	08004408 	.word	0x08004408
  ldr r2, =_sbss
 80012ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012b0:	20000238 	.word	0x20000238

080012b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC1_IRQHandler>
	...

080012b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_Init+0x28>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_Init+0x28>)
 80012c2:	f043 0310 	orr.w	r3, r3, #16
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f000 fa6f 	bl	80017ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f000 f808 	bl	80012e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f7ff fd98 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40022000 	.word	0x40022000

080012e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_InitTick+0x54>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x58>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fa87 	bl	8001816 <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00e      	b.n	8001330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d80a      	bhi.n	800132e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f000 fa4f 	bl	80017c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <HAL_InitTick+0x5c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000000 	.word	0x20000000
 800133c:	20000008 	.word	0x20000008
 8001340:	20000004 	.word	0x20000004

08001344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000008 	.word	0x20000008
 8001368:	20000234 	.word	0x20000234

0800136c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000234 	.word	0x20000234

08001384 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d007      	beq.n	80013a6 <HAL_COMP_Init+0x22>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	75fb      	strb	r3, [r7, #23]
 80013aa:	e05e      	b.n	800146a <HAL_COMP_Init+0xe6>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <HAL_COMP_Init+0xf0>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a30      	ldr	r2, [pc, #192]	; (8001474 <HAL_COMP_Init+0xf0>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <HAL_COMP_Init+0xf0>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fd43 	bl	8000e50 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d103      	bne.n	80013de <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f023 0202 	bic.w	r2, r3, #2
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	4313      	orrs	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800142a:	4313      	orrs	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69da      	ldr	r2, [r3, #28]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4313      	orrs	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1a      	ldr	r2, [r3, #32]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 800146a:	7dfb      	ldrb	r3, [r7, #23]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000

08001478 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d007      	beq.n	800149e <HAL_COMP_Start+0x26>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <HAL_COMP_Start+0x2c>
  {
    status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	e0a5      	b.n	80015f0 <HAL_COMP_Start+0x178>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	f040 809d 	bne.w	80015ec <HAL_COMP_Start+0x174>
    {
      /* Get the EXTI Line output configuration */
      extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a52      	ldr	r2, [pc, #328]	; (8001600 <HAL_COMP_Start+0x188>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d009      	beq.n	80014d0 <HAL_COMP_Start+0x58>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a50      	ldr	r2, [pc, #320]	; (8001604 <HAL_COMP_Start+0x18c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d102      	bne.n	80014cc <HAL_COMP_Start+0x54>
 80014c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ca:	e003      	b.n	80014d4 <HAL_COMP_Start+0x5c>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e001      	b.n	80014d4 <HAL_COMP_Start+0x5c>
 80014d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d4:	60bb      	str	r3, [r7, #8]

      /* Configure the event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_EVENT_RISING | COMP_TRIGGERMODE_EVENT_FALLING)) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d077      	beq.n	80015d2 <HAL_COMP_Start+0x15a>
      {
        /* Configure the event trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_RISING) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d012      	beq.n	8001514 <HAL_COMP_Start+0x9c>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <HAL_COMP_Start+0x8e>
 80014f8:	4b43      	ldr	r3, [pc, #268]	; (8001608 <HAL_COMP_Start+0x190>)
 80014fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014fc:	4942      	ldr	r1, [pc, #264]	; (8001608 <HAL_COMP_Start+0x190>)
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	4313      	orrs	r3, r2
 8001502:	628b      	str	r3, [r1, #40]	; 0x28
 8001504:	e01a      	b.n	800153c <HAL_COMP_Start+0xc4>
 8001506:	4b40      	ldr	r3, [pc, #256]	; (8001608 <HAL_COMP_Start+0x190>)
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	493f      	ldr	r1, [pc, #252]	; (8001608 <HAL_COMP_Start+0x190>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4313      	orrs	r3, r2
 8001510:	608b      	str	r3, [r1, #8]
 8001512:	e013      	b.n	800153c <HAL_COMP_Start+0xc4>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d007      	beq.n	800152e <HAL_COMP_Start+0xb6>
 800151e:	4b3a      	ldr	r3, [pc, #232]	; (8001608 <HAL_COMP_Start+0x190>)
 8001520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	43db      	mvns	r3, r3
 8001526:	4938      	ldr	r1, [pc, #224]	; (8001608 <HAL_COMP_Start+0x190>)
 8001528:	4013      	ands	r3, r2
 800152a:	628b      	str	r3, [r1, #40]	; 0x28
 800152c:	e006      	b.n	800153c <HAL_COMP_Start+0xc4>
 800152e:	4b36      	ldr	r3, [pc, #216]	; (8001608 <HAL_COMP_Start+0x190>)
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	43db      	mvns	r3, r3
 8001536:	4934      	ldr	r1, [pc, #208]	; (8001608 <HAL_COMP_Start+0x190>)
 8001538:	4013      	ands	r3, r2
 800153a:	608b      	str	r3, [r1, #8]
        }

        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_FALLING) != RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	f003 0320 	and.w	r3, r3, #32
 8001544:	2b00      	cmp	r3, #0
 8001546:	d012      	beq.n	800156e <HAL_COMP_Start+0xf6>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d006      	beq.n	8001560 <HAL_COMP_Start+0xe8>
 8001552:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <HAL_COMP_Start+0x190>)
 8001554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001556:	492c      	ldr	r1, [pc, #176]	; (8001608 <HAL_COMP_Start+0x190>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
 800155c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800155e:	e01a      	b.n	8001596 <HAL_COMP_Start+0x11e>
 8001560:	4b29      	ldr	r3, [pc, #164]	; (8001608 <HAL_COMP_Start+0x190>)
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	4928      	ldr	r1, [pc, #160]	; (8001608 <HAL_COMP_Start+0x190>)
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	4313      	orrs	r3, r2
 800156a:	60cb      	str	r3, [r1, #12]
 800156c:	e013      	b.n	8001596 <HAL_COMP_Start+0x11e>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <HAL_COMP_Start+0x110>
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <HAL_COMP_Start+0x190>)
 800157a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	43db      	mvns	r3, r3
 8001580:	4921      	ldr	r1, [pc, #132]	; (8001608 <HAL_COMP_Start+0x190>)
 8001582:	4013      	ands	r3, r2
 8001584:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001586:	e006      	b.n	8001596 <HAL_COMP_Start+0x11e>
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <HAL_COMP_Start+0x190>)
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	43db      	mvns	r3, r3
 8001590:	491d      	ldr	r1, [pc, #116]	; (8001608 <HAL_COMP_Start+0x190>)
 8001592:	4013      	ands	r3, r2
 8001594:	60cb      	str	r3, [r1, #12]
        }

        /* Enable EXTI event generation */
        COMP_EXTI_ENABLE_EVENT(extiline);
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d006      	beq.n	80015ae <HAL_COMP_Start+0x136>
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_COMP_Start+0x190>)
 80015a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a4:	4918      	ldr	r1, [pc, #96]	; (8001608 <HAL_COMP_Start+0x190>)
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	624b      	str	r3, [r1, #36]	; 0x24
 80015ac:	e005      	b.n	80015ba <HAL_COMP_Start+0x142>
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_COMP_Start+0x190>)
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	4915      	ldr	r1, [pc, #84]	; (8001608 <HAL_COMP_Start+0x190>)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]

        /* Clear COMP EXTI pending bit */
        COMP_EXTI_CLEAR_FLAG(extiline);
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_COMP_Start+0x154>
 80015c4:	4a10      	ldr	r2, [pc, #64]	; (8001608 <HAL_COMP_Start+0x190>)
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	6353      	str	r3, [r2, #52]	; 0x34
 80015ca:	e002      	b.n	80015d2 <HAL_COMP_Start+0x15a>
 80015cc:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_COMP_Start+0x190>)
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	6153      	str	r3, [r2, #20]
      }

      /* Enable the selected comparator */
      __HAL_COMP_ENABLE(hcomp);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f042 0201 	orr.w	r2, r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_BUSY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2202      	movs	r2, #2
 80015e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80015ea:	e001      	b.n	80015f0 <HAL_COMP_Start+0x178>
    }
    else
    {
      status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40010020 	.word	0x40010020
 8001604:	40010028 	.word	0x40010028
 8001608:	40010400 	.word	0x40010400

0800160c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	60d3      	str	r3, [r2, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db0b      	blt.n	800169a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	4907      	ldr	r1, [pc, #28]	; (80016a8 <__NVIC_EnableIRQ+0x38>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2001      	movs	r0, #1
 8001692:	fa00 f202 	lsl.w	r2, r0, r2
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000e100 	.word	0xe000e100

080016ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	6039      	str	r1, [r7, #0]
 80016b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	db0a      	blt.n	80016d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	490c      	ldr	r1, [pc, #48]	; (80016f8 <__NVIC_SetPriority+0x4c>)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	0112      	lsls	r2, r2, #4
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	440b      	add	r3, r1
 80016d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d4:	e00a      	b.n	80016ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4908      	ldr	r1, [pc, #32]	; (80016fc <__NVIC_SetPriority+0x50>)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	3b04      	subs	r3, #4
 80016e4:	0112      	lsls	r2, r2, #4
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	440b      	add	r3, r1
 80016ea:	761a      	strb	r2, [r3, #24]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000e100 	.word	0xe000e100
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f1c3 0307 	rsb	r3, r3, #7
 800171a:	2b04      	cmp	r3, #4
 800171c:	bf28      	it	cs
 800171e:	2304      	movcs	r3, #4
 8001720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3304      	adds	r3, #4
 8001726:	2b06      	cmp	r3, #6
 8001728:	d902      	bls.n	8001730 <NVIC_EncodePriority+0x30>
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3b03      	subs	r3, #3
 800172e:	e000      	b.n	8001732 <NVIC_EncodePriority+0x32>
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	f04f 32ff 	mov.w	r2, #4294967295
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	401a      	ands	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001748:	f04f 31ff 	mov.w	r1, #4294967295
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	43d9      	mvns	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	4313      	orrs	r3, r2
         );
}
 800175a:	4618      	mov	r0, r3
 800175c:	3724      	adds	r7, #36	; 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001778:	d301      	bcc.n	800177e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177a:	2301      	movs	r3, #1
 800177c:	e00f      	b.n	800179e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <SysTick_Config+0x40>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001786:	210f      	movs	r1, #15
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f7ff ff8e 	bl	80016ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <SysTick_Config+0x40>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <SysTick_Config+0x40>)
 8001798:	2207      	movs	r2, #7
 800179a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	e000e010 	.word	0xe000e010

080017ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ff29 	bl	800160c <__NVIC_SetPriorityGrouping>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d4:	f7ff ff3e 	bl	8001654 <__NVIC_GetPriorityGrouping>
 80017d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	6978      	ldr	r0, [r7, #20]
 80017e0:	f7ff ff8e 	bl	8001700 <NVIC_EncodePriority>
 80017e4:	4602      	mov	r2, r0
 80017e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff5d 	bl	80016ac <__NVIC_SetPriority>
}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff31 	bl	8001670 <__NVIC_EnableIRQ>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ffa2 	bl	8001768 <SysTick_Config>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183e:	e14e      	b.n	8001ade <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2101      	movs	r1, #1
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	4013      	ands	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 8140 	beq.w	8001ad8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	2b01      	cmp	r3, #1
 8001862:	d005      	beq.n	8001870 <HAL_GPIO_Init+0x40>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d130      	bne.n	80018d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a6:	2201      	movs	r2, #1
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	f003 0201 	and.w	r2, r3, #1
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d017      	beq.n	800190e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	2203      	movs	r2, #3
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d123      	bne.n	8001962 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	08da      	lsrs	r2, r3, #3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3208      	adds	r2, #8
 8001922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	220f      	movs	r2, #15
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	691a      	ldr	r2, [r3, #16]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	08da      	lsrs	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3208      	adds	r2, #8
 800195c:	6939      	ldr	r1, [r7, #16]
 800195e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	2203      	movs	r2, #3
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 0203 	and.w	r2, r3, #3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 809a 	beq.w	8001ad8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a4:	4b55      	ldr	r3, [pc, #340]	; (8001afc <HAL_GPIO_Init+0x2cc>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a54      	ldr	r2, [pc, #336]	; (8001afc <HAL_GPIO_Init+0x2cc>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b52      	ldr	r3, [pc, #328]	; (8001afc <HAL_GPIO_Init+0x2cc>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019bc:	4a50      	ldr	r2, [pc, #320]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	089b      	lsrs	r3, r3, #2
 80019c2:	3302      	adds	r3, #2
 80019c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	220f      	movs	r2, #15
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019e6:	d013      	beq.n	8001a10 <HAL_GPIO_Init+0x1e0>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a46      	ldr	r2, [pc, #280]	; (8001b04 <HAL_GPIO_Init+0x2d4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d00d      	beq.n	8001a0c <HAL_GPIO_Init+0x1dc>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a45      	ldr	r2, [pc, #276]	; (8001b08 <HAL_GPIO_Init+0x2d8>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d007      	beq.n	8001a08 <HAL_GPIO_Init+0x1d8>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a44      	ldr	r2, [pc, #272]	; (8001b0c <HAL_GPIO_Init+0x2dc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d101      	bne.n	8001a04 <HAL_GPIO_Init+0x1d4>
 8001a00:	2303      	movs	r3, #3
 8001a02:	e006      	b.n	8001a12 <HAL_GPIO_Init+0x1e2>
 8001a04:	2305      	movs	r3, #5
 8001a06:	e004      	b.n	8001a12 <HAL_GPIO_Init+0x1e2>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_Init+0x1e2>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_GPIO_Init+0x1e2>
 8001a10:	2300      	movs	r3, #0
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	f002 0203 	and.w	r2, r2, #3
 8001a18:	0092      	lsls	r2, r2, #2
 8001a1a:	4093      	lsls	r3, r2
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a22:	4937      	ldr	r1, [pc, #220]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a30:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a54:	4a2e      	ldr	r2, [pc, #184]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a5a:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a7e:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a84:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001aa8:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ad2:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3301      	adds	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f47f aea9 	bne.w	8001840 <HAL_GPIO_Init+0x10>
  }
}
 8001aee:	bf00      	nop
 8001af0:	bf00      	nop
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40010000 	.word	0x40010000
 8001b04:	48000400 	.word	0x48000400
 8001b08:	48000800 	.word	0x48000800
 8001b0c:	48000c00 	.word	0x48000c00
 8001b10:	40010400 	.word	0x40010400

08001b14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	e001      	b.n	8001b36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f000 bef4 	b.w	8002946 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 816a 	beq.w	8001e42 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b6e:	4bb3      	ldr	r3, [pc, #716]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d00c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b7a:	4bb0      	ldr	r3, [pc, #704]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d159      	bne.n	8001c3a <HAL_RCC_OscConfig+0xf6>
 8001b86:	4bad      	ldr	r3, [pc, #692]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b92:	d152      	bne.n	8001c3a <HAL_RCC_OscConfig+0xf6>
 8001b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b98:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001ba0:	fa93 f3a3 	rbit	r3, r3
 8001ba4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ba8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d102      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x82>
 8001bc0:	4b9e      	ldr	r3, [pc, #632]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	e015      	b.n	8001bf2 <HAL_RCC_OscConfig+0xae>
 8001bc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001bda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bde:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001be2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001bee:	4b93      	ldr	r3, [pc, #588]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bf6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001bfa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001bfe:	fa92 f2a2 	rbit	r2, r2
 8001c02:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001c06:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001c0a:	fab2 f282 	clz	r2, r2
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	f042 0220 	orr.w	r2, r2, #32
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	f002 021f 	and.w	r2, r2, #31
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 810c 	beq.w	8001e40 <HAL_RCC_OscConfig+0x2fc>
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 8106 	bne.w	8001e40 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	f000 be86 	b.w	8002946 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c44:	d106      	bne.n	8001c54 <HAL_RCC_OscConfig+0x110>
 8001c46:	4b7d      	ldr	r3, [pc, #500]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a7c      	ldr	r2, [pc, #496]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e030      	b.n	8001cb6 <HAL_RCC_OscConfig+0x172>
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x134>
 8001c5e:	4b77      	ldr	r3, [pc, #476]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a76      	ldr	r2, [pc, #472]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b74      	ldr	r3, [pc, #464]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a73      	ldr	r2, [pc, #460]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e01e      	b.n	8001cb6 <HAL_RCC_OscConfig+0x172>
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c82:	d10c      	bne.n	8001c9e <HAL_RCC_OscConfig+0x15a>
 8001c84:	4b6d      	ldr	r3, [pc, #436]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a6c      	ldr	r2, [pc, #432]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001c8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b6a      	ldr	r3, [pc, #424]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a69      	ldr	r2, [pc, #420]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	e00b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x172>
 8001c9e:	4b67      	ldr	r3, [pc, #412]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a66      	ldr	r2, [pc, #408]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b64      	ldr	r3, [pc, #400]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a63      	ldr	r2, [pc, #396]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cb6:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	f023 020f 	bic.w	r2, r3, #15
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	495d      	ldr	r1, [pc, #372]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d059      	beq.n	8001d88 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fb4a 	bl	800136c <HAL_GetTick>
 8001cd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cde:	f7ff fb45 	bl	800136c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d902      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	f000 be29 	b.w	8002946 <HAL_RCC_OscConfig+0xe02>
 8001cf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001d08:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d102      	bne.n	8001d26 <HAL_RCC_OscConfig+0x1e2>
 8001d20:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	e015      	b.n	8001d52 <HAL_RCC_OscConfig+0x20e>
 8001d26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d2a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d3e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d42:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d56:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d5a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d5e:	fa92 f2a2 	rbit	r2, r2
 8001d62:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d66:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d6a:	fab2 f282 	clz	r2, r2
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	f042 0220 	orr.w	r2, r2, #32
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	f002 021f 	and.w	r2, r2, #31
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0ab      	beq.n	8001cde <HAL_RCC_OscConfig+0x19a>
 8001d86:	e05c      	b.n	8001e42 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff faf0 	bl	800136c <HAL_GetTick>
 8001d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d90:	e00a      	b.n	8001da8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d92:	f7ff faeb 	bl	800136c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d902      	bls.n	8001da8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	f000 bdcf 	b.w	8002946 <HAL_RCC_OscConfig+0xe02>
 8001da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001dbc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d102      	bne.n	8001dda <HAL_RCC_OscConfig+0x296>
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	e015      	b.n	8001e06 <HAL_RCC_OscConfig+0x2c2>
 8001dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dde:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001dee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001df6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <HAL_RCC_OscConfig+0x2f8>)
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e0a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001e0e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e12:	fa92 f2a2 	rbit	r2, r2
 8001e16:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001e1a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001e1e:	fab2 f282 	clz	r2, r2
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	f042 0220 	orr.w	r2, r2, #32
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	f002 021f 	and.w	r2, r2, #31
 8001e2e:	2101      	movs	r1, #1
 8001e30:	fa01 f202 	lsl.w	r2, r1, r2
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1ab      	bne.n	8001d92 <HAL_RCC_OscConfig+0x24e>
 8001e3a:	e002      	b.n	8001e42 <HAL_RCC_OscConfig+0x2fe>
 8001e3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 816f 	beq.w	8002130 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e52:	4bd0      	ldr	r3, [pc, #832]	; (8002194 <HAL_RCC_OscConfig+0x650>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e5e:	4bcd      	ldr	r3, [pc, #820]	; (8002194 <HAL_RCC_OscConfig+0x650>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d16c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x400>
 8001e6a:	4bca      	ldr	r3, [pc, #808]	; (8002194 <HAL_RCC_OscConfig+0x650>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d166      	bne.n	8001f44 <HAL_RCC_OscConfig+0x400>
 8001e76:	2302      	movs	r3, #2
 8001e78:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001e88:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d102      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x362>
 8001ea0:	4bbc      	ldr	r3, [pc, #752]	; (8002194 <HAL_RCC_OscConfig+0x650>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	e013      	b.n	8001ece <HAL_RCC_OscConfig+0x38a>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001eb8:	2302      	movs	r3, #2
 8001eba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ebe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001eca:	4bb2      	ldr	r3, [pc, #712]	; (8002194 <HAL_RCC_OscConfig+0x650>)
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001ed4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ed8:	fa92 f2a2 	rbit	r2, r2
 8001edc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ee0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001ee4:	fab2 f282 	clz	r2, r2
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	f042 0220 	orr.w	r2, r2, #32
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	f002 021f 	and.w	r2, r2, #31
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d007      	beq.n	8001f10 <HAL_RCC_OscConfig+0x3cc>
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d002      	beq.n	8001f10 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f000 bd1b 	b.w	8002946 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f10:	4ba0      	ldr	r3, [pc, #640]	; (8002194 <HAL_RCC_OscConfig+0x650>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	21f8      	movs	r1, #248	; 0xf8
 8001f20:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f28:	fa91 f1a1 	rbit	r1, r1
 8001f2c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001f30:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f34:	fab1 f181 	clz	r1, r1
 8001f38:	b2c9      	uxtb	r1, r1
 8001f3a:	408b      	lsls	r3, r1
 8001f3c:	4995      	ldr	r1, [pc, #596]	; (8002194 <HAL_RCC_OscConfig+0x650>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f42:	e0f5      	b.n	8002130 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8085 	beq.w	800205a <HAL_RCC_OscConfig+0x516>
 8001f50:	2301      	movs	r3, #1
 8001f52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001f62:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	461a      	mov	r2, r3
 8001f78:	2301      	movs	r3, #1
 8001f7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f9f6 	bl	800136c <HAL_GetTick>
 8001f80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f86:	f7ff f9f1 	bl	800136c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d902      	bls.n	8001f9c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	f000 bcd5 	b.w	8002946 <HAL_RCC_OscConfig+0xe02>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001fae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	095b      	lsrs	r3, r3, #5
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d102      	bne.n	8001fcc <HAL_RCC_OscConfig+0x488>
 8001fc6:	4b73      	ldr	r3, [pc, #460]	; (8002194 <HAL_RCC_OscConfig+0x650>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	e013      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4b0>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001fde:	2302      	movs	r3, #2
 8001fe0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001fe4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ff0:	4b68      	ldr	r3, [pc, #416]	; (8002194 <HAL_RCC_OscConfig+0x650>)
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001ffa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ffe:	fa92 f2a2 	rbit	r2, r2
 8002002:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002006:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800200a:	fab2 f282 	clz	r2, r2
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	f042 0220 	orr.w	r2, r2, #32
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	f002 021f 	and.w	r2, r2, #31
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f202 	lsl.w	r2, r1, r2
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0af      	beq.n	8001f86 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	4b5b      	ldr	r3, [pc, #364]	; (8002194 <HAL_RCC_OscConfig+0x650>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	21f8      	movs	r1, #248	; 0xf8
 8002036:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800203e:	fa91 f1a1 	rbit	r1, r1
 8002042:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002046:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800204a:	fab1 f181 	clz	r1, r1
 800204e:	b2c9      	uxtb	r1, r1
 8002050:	408b      	lsls	r3, r1
 8002052:	4950      	ldr	r1, [pc, #320]	; (8002194 <HAL_RCC_OscConfig+0x650>)
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
 8002058:	e06a      	b.n	8002130 <HAL_RCC_OscConfig+0x5ec>
 800205a:	2301      	movs	r3, #1
 800205c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800206c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800207a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	461a      	mov	r2, r3
 8002082:	2300      	movs	r3, #0
 8002084:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7ff f971 	bl	800136c <HAL_GetTick>
 800208a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002090:	f7ff f96c 	bl	800136c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d902      	bls.n	80020a6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	f000 bc50 	b.w	8002946 <HAL_RCC_OscConfig+0xe02>
 80020a6:	2302      	movs	r3, #2
 80020a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80020b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d102      	bne.n	80020d6 <HAL_RCC_OscConfig+0x592>
 80020d0:	4b30      	ldr	r3, [pc, #192]	; (8002194 <HAL_RCC_OscConfig+0x650>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	e013      	b.n	80020fe <HAL_RCC_OscConfig+0x5ba>
 80020d6:	2302      	movs	r3, #2
 80020d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020e0:	fa93 f3a3 	rbit	r3, r3
 80020e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020e8:	2302      	movs	r3, #2
 80020ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80020fa:	4b26      	ldr	r3, [pc, #152]	; (8002194 <HAL_RCC_OscConfig+0x650>)
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	2202      	movs	r2, #2
 8002100:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002104:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002108:	fa92 f2a2 	rbit	r2, r2
 800210c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002110:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002114:	fab2 f282 	clz	r2, r2
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	f042 0220 	orr.w	r2, r2, #32
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	f002 021f 	and.w	r2, r2, #31
 8002124:	2101      	movs	r1, #1
 8002126:	fa01 f202 	lsl.w	r2, r1, r2
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1af      	bne.n	8002090 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 80da 	beq.w	80022f4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d069      	beq.n	800221e <HAL_RCC_OscConfig+0x6da>
 800214a:	2301      	movs	r3, #1
 800214c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800215c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002160:	fab3 f383 	clz	r3, r3
 8002164:	b2db      	uxtb	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_OscConfig+0x654>)
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	461a      	mov	r2, r3
 8002170:	2301      	movs	r3, #1
 8002172:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002174:	f7ff f8fa 	bl	800136c <HAL_GetTick>
 8002178:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217c:	e00e      	b.n	800219c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800217e:	f7ff f8f5 	bl	800136c <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d906      	bls.n	800219c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e3d9      	b.n	8002946 <HAL_RCC_OscConfig+0xe02>
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000
 8002198:	10908120 	.word	0x10908120
 800219c:	2302      	movs	r3, #2
 800219e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021b2:	2202      	movs	r2, #2
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	fa93 f2a3 	rbit	r2, r3
 80021c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80021ca:	2202      	movs	r2, #2
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	fa93 f2a3 	rbit	r2, r3
 80021d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021de:	4ba5      	ldr	r3, [pc, #660]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 80021e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80021e6:	2102      	movs	r1, #2
 80021e8:	6019      	str	r1, [r3, #0]
 80021ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	fa93 f1a3 	rbit	r1, r3
 80021f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021f8:	6019      	str	r1, [r3, #0]
  return result;
 80021fa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	2101      	movs	r1, #1
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0b0      	beq.n	800217e <HAL_RCC_OscConfig+0x63a>
 800221c:	e06a      	b.n	80022f4 <HAL_RCC_OscConfig+0x7b0>
 800221e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002222:	2201      	movs	r2, #1
 8002224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002234:	601a      	str	r2, [r3, #0]
  return result;
 8002236:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800223a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	4b8c      	ldr	r3, [pc, #560]	; (8002478 <HAL_RCC_OscConfig+0x934>)
 8002246:	4413      	add	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	461a      	mov	r2, r3
 800224c:	2300      	movs	r3, #0
 800224e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002250:	f7ff f88c 	bl	800136c <HAL_GetTick>
 8002254:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002258:	e009      	b.n	800226e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800225a:	f7ff f887 	bl	800136c <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e36b      	b.n	8002946 <HAL_RCC_OscConfig+0xe02>
 800226e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002272:	2202      	movs	r2, #2
 8002274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	fa93 f2a3 	rbit	r2, r3
 8002280:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800228a:	2202      	movs	r2, #2
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	fa93 f2a3 	rbit	r2, r3
 8002298:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022a2:	2202      	movs	r2, #2
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	fa93 f2a3 	rbit	r2, r3
 80022b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b6:	4b6f      	ldr	r3, [pc, #444]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 80022b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022be:	2102      	movs	r1, #2
 80022c0:	6019      	str	r1, [r3, #0]
 80022c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	fa93 f1a3 	rbit	r1, r3
 80022cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022d0:	6019      	str	r1, [r3, #0]
  return result;
 80022d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	2101      	movs	r1, #1
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1b2      	bne.n	800225a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 8158 	beq.w	80025b4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002304:	2300      	movs	r3, #0
 8002306:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230a:	4b5a      	ldr	r3, [pc, #360]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d112      	bne.n	800233c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	4b57      	ldr	r3, [pc, #348]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	4a56      	ldr	r2, [pc, #344]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002320:	61d3      	str	r3, [r2, #28]
 8002322:	4b54      	ldr	r3, [pc, #336]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800232a:	f107 0308 	add.w	r3, r7, #8
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	f107 0308 	add.w	r3, r7, #8
 8002334:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002336:	2301      	movs	r3, #1
 8002338:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	4b4f      	ldr	r3, [pc, #316]	; (800247c <HAL_RCC_OscConfig+0x938>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d11a      	bne.n	800237e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002348:	4b4c      	ldr	r3, [pc, #304]	; (800247c <HAL_RCC_OscConfig+0x938>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a4b      	ldr	r2, [pc, #300]	; (800247c <HAL_RCC_OscConfig+0x938>)
 800234e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002352:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002354:	f7ff f80a 	bl	800136c <HAL_GetTick>
 8002358:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235c:	e009      	b.n	8002372 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235e:	f7ff f805 	bl	800136c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	; 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e2e9      	b.n	8002946 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002372:	4b42      	ldr	r3, [pc, #264]	; (800247c <HAL_RCC_OscConfig+0x938>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0ef      	beq.n	800235e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x852>
 8002388:	4b3a      	ldr	r3, [pc, #232]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4a39      	ldr	r2, [pc, #228]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6213      	str	r3, [r2, #32]
 8002394:	e02f      	b.n	80023f6 <HAL_RCC_OscConfig+0x8b2>
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10c      	bne.n	80023ba <HAL_RCC_OscConfig+0x876>
 80023a0:	4b34      	ldr	r3, [pc, #208]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4a33      	ldr	r2, [pc, #204]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	4b31      	ldr	r3, [pc, #196]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a30      	ldr	r2, [pc, #192]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 80023b2:	f023 0304 	bic.w	r3, r3, #4
 80023b6:	6213      	str	r3, [r2, #32]
 80023b8:	e01d      	b.n	80023f6 <HAL_RCC_OscConfig+0x8b2>
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b05      	cmp	r3, #5
 80023c2:	d10c      	bne.n	80023de <HAL_RCC_OscConfig+0x89a>
 80023c4:	4b2b      	ldr	r3, [pc, #172]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4a2a      	ldr	r2, [pc, #168]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 80023ca:	f043 0304 	orr.w	r3, r3, #4
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	4b28      	ldr	r3, [pc, #160]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a27      	ldr	r2, [pc, #156]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6213      	str	r3, [r2, #32]
 80023dc:	e00b      	b.n	80023f6 <HAL_RCC_OscConfig+0x8b2>
 80023de:	4b25      	ldr	r3, [pc, #148]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a24      	ldr	r2, [pc, #144]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	6213      	str	r3, [r2, #32]
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a21      	ldr	r2, [pc, #132]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 80023f0:	f023 0304 	bic.w	r3, r3, #4
 80023f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d06b      	beq.n	80024d8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002400:	f7fe ffb4 	bl	800136c <HAL_GetTick>
 8002404:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002408:	e00b      	b.n	8002422 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7fe ffaf 	bl	800136c <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e291      	b.n	8002946 <HAL_RCC_OscConfig+0xe02>
 8002422:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002426:	2202      	movs	r2, #2
 8002428:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	fa93 f2a3 	rbit	r2, r3
 8002434:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800243e:	2202      	movs	r2, #2
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	fa93 f2a3 	rbit	r2, r3
 800244c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002450:	601a      	str	r2, [r3, #0]
  return result;
 8002452:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002456:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f043 0302 	orr.w	r3, r3, #2
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d109      	bne.n	8002480 <HAL_RCC_OscConfig+0x93c>
 800246c:	4b01      	ldr	r3, [pc, #4]	; (8002474 <HAL_RCC_OscConfig+0x930>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	e014      	b.n	800249c <HAL_RCC_OscConfig+0x958>
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	10908120 	.word	0x10908120
 800247c:	40007000 	.word	0x40007000
 8002480:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002484:	2202      	movs	r2, #2
 8002486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	fa93 f2a3 	rbit	r2, r3
 8002492:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	4bbb      	ldr	r3, [pc, #748]	; (8002788 <HAL_RCC_OscConfig+0xc44>)
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024a0:	2102      	movs	r1, #2
 80024a2:	6011      	str	r1, [r2, #0]
 80024a4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	fa92 f1a2 	rbit	r1, r2
 80024ae:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80024b2:	6011      	str	r1, [r2, #0]
  return result;
 80024b4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	fab2 f282 	clz	r2, r2
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	f002 021f 	and.w	r2, r2, #31
 80024ca:	2101      	movs	r1, #1
 80024cc:	fa01 f202 	lsl.w	r2, r1, r2
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d099      	beq.n	800240a <HAL_RCC_OscConfig+0x8c6>
 80024d6:	e063      	b.n	80025a0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d8:	f7fe ff48 	bl	800136c <HAL_GetTick>
 80024dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	e00b      	b.n	80024fa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7fe ff43 	bl	800136c <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e225      	b.n	8002946 <HAL_RCC_OscConfig+0xe02>
 80024fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80024fe:	2202      	movs	r2, #2
 8002500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	fa93 f2a3 	rbit	r2, r3
 800250c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002516:	2202      	movs	r2, #2
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	fa93 f2a3 	rbit	r2, r3
 8002524:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002528:	601a      	str	r2, [r3, #0]
  return result;
 800252a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800252e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f043 0302 	orr.w	r3, r3, #2
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d102      	bne.n	800254a <HAL_RCC_OscConfig+0xa06>
 8002544:	4b90      	ldr	r3, [pc, #576]	; (8002788 <HAL_RCC_OscConfig+0xc44>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	e00d      	b.n	8002566 <HAL_RCC_OscConfig+0xa22>
 800254a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800254e:	2202      	movs	r2, #2
 8002550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	fa93 f2a3 	rbit	r2, r3
 800255c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	4b89      	ldr	r3, [pc, #548]	; (8002788 <HAL_RCC_OscConfig+0xc44>)
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800256a:	2102      	movs	r1, #2
 800256c:	6011      	str	r1, [r2, #0]
 800256e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	fa92 f1a2 	rbit	r1, r2
 8002578:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800257c:	6011      	str	r1, [r2, #0]
  return result;
 800257e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	fab2 f282 	clz	r2, r2
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	f002 021f 	and.w	r2, r2, #31
 8002594:	2101      	movs	r1, #1
 8002596:	fa01 f202 	lsl.w	r2, r1, r2
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1a0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a8:	4b77      	ldr	r3, [pc, #476]	; (8002788 <HAL_RCC_OscConfig+0xc44>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	4a76      	ldr	r2, [pc, #472]	; (8002788 <HAL_RCC_OscConfig+0xc44>)
 80025ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 81c2 	beq.w	8002944 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c0:	4b71      	ldr	r3, [pc, #452]	; (8002788 <HAL_RCC_OscConfig+0xc44>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	f000 819c 	beq.w	8002906 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	f040 8114 	bne.w	8002802 <HAL_RCC_OscConfig+0xcbe>
 80025da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	fa93 f2a3 	rbit	r2, r3
 80025ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025f2:	601a      	str	r2, [r3, #0]
  return result;
 80025f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002604:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	461a      	mov	r2, r3
 800260c:	2300      	movs	r3, #0
 800260e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7fe feac 	bl	800136c <HAL_GetTick>
 8002614:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002618:	e009      	b.n	800262e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261a:	f7fe fea7 	bl	800136c <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e18b      	b.n	8002946 <HAL_RCC_OscConfig+0xe02>
 800262e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002632:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	fa93 f2a3 	rbit	r2, r3
 8002642:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002646:	601a      	str	r2, [r3, #0]
  return result;
 8002648:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800264c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d102      	bne.n	8002668 <HAL_RCC_OscConfig+0xb24>
 8002662:	4b49      	ldr	r3, [pc, #292]	; (8002788 <HAL_RCC_OscConfig+0xc44>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	e01b      	b.n	80026a0 <HAL_RCC_OscConfig+0xb5c>
 8002668:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800266c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	fa93 f2a3 	rbit	r2, r3
 800267c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	fa93 f2a3 	rbit	r2, r3
 8002696:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <HAL_RCC_OscConfig+0xc44>)
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026a8:	6011      	str	r1, [r2, #0]
 80026aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	fa92 f1a2 	rbit	r1, r2
 80026b4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80026b8:	6011      	str	r1, [r2, #0]
  return result;
 80026ba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	fab2 f282 	clz	r2, r2
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	f042 0220 	orr.w	r2, r2, #32
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	f002 021f 	and.w	r2, r2, #31
 80026d0:	2101      	movs	r1, #1
 80026d2:	fa01 f202 	lsl.w	r2, r1, r2
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d19e      	bne.n	800261a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026dc:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <HAL_RCC_OscConfig+0xc44>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	430b      	orrs	r3, r1
 80026f2:	4925      	ldr	r1, [pc, #148]	; (8002788 <HAL_RCC_OscConfig+0xc44>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
 80026f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	fa93 f2a3 	rbit	r2, r3
 800270c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002710:	601a      	str	r2, [r3, #0]
  return result;
 8002712:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002716:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002722:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	461a      	mov	r2, r3
 800272a:	2301      	movs	r3, #1
 800272c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7fe fe1d 	bl	800136c <HAL_GetTick>
 8002732:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002736:	e009      	b.n	800274c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe fe18 	bl	800136c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e0fc      	b.n	8002946 <HAL_RCC_OscConfig+0xe02>
 800274c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002750:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	fa93 f2a3 	rbit	r2, r3
 8002760:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002764:	601a      	str	r2, [r3, #0]
  return result;
 8002766:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800276a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d105      	bne.n	800278c <HAL_RCC_OscConfig+0xc48>
 8002780:	4b01      	ldr	r3, [pc, #4]	; (8002788 <HAL_RCC_OscConfig+0xc44>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	e01e      	b.n	80027c4 <HAL_RCC_OscConfig+0xc80>
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002790:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	fa93 f2a3 	rbit	r2, r3
 80027a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	fa93 f2a3 	rbit	r2, r3
 80027ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	4b63      	ldr	r3, [pc, #396]	; (8002950 <HAL_RCC_OscConfig+0xe0c>)
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027cc:	6011      	str	r1, [r2, #0]
 80027ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	fa92 f1a2 	rbit	r1, r2
 80027d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80027dc:	6011      	str	r1, [r2, #0]
  return result;
 80027de:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	fab2 f282 	clz	r2, r2
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	f042 0220 	orr.w	r2, r2, #32
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	f002 021f 	and.w	r2, r2, #31
 80027f4:	2101      	movs	r1, #1
 80027f6:	fa01 f202 	lsl.w	r2, r1, r2
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d09b      	beq.n	8002738 <HAL_RCC_OscConfig+0xbf4>
 8002800:	e0a0      	b.n	8002944 <HAL_RCC_OscConfig+0xe00>
 8002802:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002806:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800280a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	fa93 f2a3 	rbit	r2, r3
 8002816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800281a:	601a      	str	r2, [r3, #0]
  return result;
 800281c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002820:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800282c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	461a      	mov	r2, r3
 8002834:	2300      	movs	r3, #0
 8002836:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7fe fd98 	bl	800136c <HAL_GetTick>
 800283c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002840:	e009      	b.n	8002856 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002842:	f7fe fd93 	bl	800136c <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e077      	b.n	8002946 <HAL_RCC_OscConfig+0xe02>
 8002856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800285a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800285e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	fa93 f2a3 	rbit	r2, r3
 800286a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800286e:	601a      	str	r2, [r3, #0]
  return result;
 8002870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002874:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d102      	bne.n	8002890 <HAL_RCC_OscConfig+0xd4c>
 800288a:	4b31      	ldr	r3, [pc, #196]	; (8002950 <HAL_RCC_OscConfig+0xe0c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	e01b      	b.n	80028c8 <HAL_RCC_OscConfig+0xd84>
 8002890:	f107 0320 	add.w	r3, r7, #32
 8002894:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f107 0320 	add.w	r3, r7, #32
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	fa93 f2a3 	rbit	r2, r3
 80028a4:	f107 031c 	add.w	r3, r7, #28
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	f107 0318 	add.w	r3, r7, #24
 80028ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	f107 0318 	add.w	r3, r7, #24
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	fa93 f2a3 	rbit	r2, r3
 80028be:	f107 0314 	add.w	r3, r7, #20
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	4b22      	ldr	r3, [pc, #136]	; (8002950 <HAL_RCC_OscConfig+0xe0c>)
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	f107 0210 	add.w	r2, r7, #16
 80028cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028d0:	6011      	str	r1, [r2, #0]
 80028d2:	f107 0210 	add.w	r2, r7, #16
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	fa92 f1a2 	rbit	r1, r2
 80028dc:	f107 020c 	add.w	r2, r7, #12
 80028e0:	6011      	str	r1, [r2, #0]
  return result;
 80028e2:	f107 020c 	add.w	r2, r7, #12
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	fab2 f282 	clz	r2, r2
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	f042 0220 	orr.w	r2, r2, #32
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	f002 021f 	and.w	r2, r2, #31
 80028f8:	2101      	movs	r1, #1
 80028fa:	fa01 f202 	lsl.w	r2, r1, r2
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d19e      	bne.n	8002842 <HAL_RCC_OscConfig+0xcfe>
 8002904:	e01e      	b.n	8002944 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e018      	b.n	8002946 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002914:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <HAL_RCC_OscConfig+0xe0c>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800291c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002920:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	429a      	cmp	r2, r3
 800292c:	d108      	bne.n	8002940 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800292e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002932:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000

08002954 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b09e      	sub	sp, #120	; 0x78
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e162      	b.n	8002c32 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800296c:	4b90      	ldr	r3, [pc, #576]	; (8002bb0 <HAL_RCC_ClockConfig+0x25c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d910      	bls.n	800299c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b8d      	ldr	r3, [pc, #564]	; (8002bb0 <HAL_RCC_ClockConfig+0x25c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 0207 	bic.w	r2, r3, #7
 8002982:	498b      	ldr	r1, [pc, #556]	; (8002bb0 <HAL_RCC_ClockConfig+0x25c>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b89      	ldr	r3, [pc, #548]	; (8002bb0 <HAL_RCC_ClockConfig+0x25c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e14a      	b.n	8002c32 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a8:	4b82      	ldr	r3, [pc, #520]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	497f      	ldr	r1, [pc, #508]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80dc 	beq.w	8002b80 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d13c      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xf6>
 80029d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e0:	fab3 f383 	clz	r3, r3
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d102      	bne.n	80029fa <HAL_RCC_ClockConfig+0xa6>
 80029f4:	4b6f      	ldr	r3, [pc, #444]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	e00f      	b.n	8002a1a <HAL_RCC_ClockConfig+0xc6>
 80029fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	667b      	str	r3, [r7, #100]	; 0x64
 8002a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a0c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a16:	4b67      	ldr	r3, [pc, #412]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a22:	fa92 f2a2 	rbit	r2, r2
 8002a26:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a2a:	fab2 f282 	clz	r2, r2
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	f042 0220 	orr.w	r2, r2, #32
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	f002 021f 	and.w	r2, r2, #31
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d17b      	bne.n	8002b3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0f3      	b.n	8002c32 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d13c      	bne.n	8002acc <HAL_RCC_ClockConfig+0x178>
 8002a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d102      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x128>
 8002a76:	4b4f      	ldr	r3, [pc, #316]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	e00f      	b.n	8002a9c <HAL_RCC_ClockConfig+0x148>
 8002a7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	647b      	str	r3, [r7, #68]	; 0x44
 8002a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a98:	4b46      	ldr	r3, [pc, #280]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aa0:	63ba      	str	r2, [r7, #56]	; 0x38
 8002aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aa4:	fa92 f2a2 	rbit	r2, r2
 8002aa8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aac:	fab2 f282 	clz	r2, r2
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	f042 0220 	orr.w	r2, r2, #32
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	f002 021f 	and.w	r2, r2, #31
 8002abc:	2101      	movs	r1, #1
 8002abe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d13a      	bne.n	8002b3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0b2      	b.n	8002c32 <HAL_RCC_ClockConfig+0x2de>
 8002acc:	2302      	movs	r3, #2
 8002ace:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d102      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x1a0>
 8002aee:	4b31      	ldr	r3, [pc, #196]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	e00d      	b.n	8002b10 <HAL_RCC_ClockConfig+0x1bc>
 8002af4:	2302      	movs	r3, #2
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	fa93 f3a3 	rbit	r3, r3
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
 8002b00:	2302      	movs	r3, #2
 8002b02:	623b      	str	r3, [r7, #32]
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	2202      	movs	r2, #2
 8002b12:	61ba      	str	r2, [r7, #24]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	fa92 f2a2 	rbit	r2, r2
 8002b1a:	617a      	str	r2, [r7, #20]
  return result;
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	fab2 f282 	clz	r2, r2
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	f042 0220 	orr.w	r2, r2, #32
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	f002 021f 	and.w	r2, r2, #31
 8002b2e:	2101      	movs	r1, #1
 8002b30:	fa01 f202 	lsl.w	r2, r1, r2
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e079      	b.n	8002c32 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	491a      	ldr	r1, [pc, #104]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b50:	f7fe fc0c 	bl	800136c <HAL_GetTick>
 8002b54:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b58:	f7fe fc08 	bl	800136c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e061      	b.n	8002c32 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 020c 	and.w	r2, r3, #12
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d1eb      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_RCC_ClockConfig+0x25c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d214      	bcs.n	8002bb8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <HAL_RCC_ClockConfig+0x25c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 0207 	bic.w	r2, r3, #7
 8002b96:	4906      	ldr	r1, [pc, #24]	; (8002bb0 <HAL_RCC_ClockConfig+0x25c>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <HAL_RCC_ClockConfig+0x25c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e040      	b.n	8002c32 <HAL_RCC_ClockConfig+0x2de>
 8002bb0:	40022000 	.word	0x40022000
 8002bb4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <HAL_RCC_ClockConfig+0x2e8>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	491a      	ldr	r1, [pc, #104]	; (8002c3c <HAL_RCC_ClockConfig+0x2e8>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002be2:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <HAL_RCC_ClockConfig+0x2e8>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4912      	ldr	r1, [pc, #72]	; (8002c3c <HAL_RCC_ClockConfig+0x2e8>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bf6:	f000 f829 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002bfa:	4601      	mov	r1, r0
 8002bfc:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <HAL_RCC_ClockConfig+0x2e8>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c04:	22f0      	movs	r2, #240	; 0xf0
 8002c06:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	fa92 f2a2 	rbit	r2, r2
 8002c0e:	60fa      	str	r2, [r7, #12]
  return result;
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	fab2 f282 	clz	r2, r2
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	40d3      	lsrs	r3, r2
 8002c1a:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <HAL_RCC_ClockConfig+0x2ec>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c22:	4a08      	ldr	r2, [pc, #32]	; (8002c44 <HAL_RCC_ClockConfig+0x2f0>)
 8002c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c26:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <HAL_RCC_ClockConfig+0x2f4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe fb5a 	bl	80012e4 <HAL_InitTick>
  
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3778      	adds	r7, #120	; 0x78
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	080043d0 	.word	0x080043d0
 8002c44:	20000000 	.word	0x20000000
 8002c48:	20000004 	.word	0x20000004

08002c4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b08b      	sub	sp, #44	; 0x2c
 8002c50:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c66:	4b29      	ldr	r3, [pc, #164]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d002      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0x30>
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d003      	beq.n	8002c82 <HAL_RCC_GetSysClockFreq+0x36>
 8002c7a:	e03c      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c7c:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c7e:	623b      	str	r3, [r7, #32]
      break;
 8002c80:	e03c      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c88:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c8c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	fa92 f2a2 	rbit	r2, r2
 8002c94:	607a      	str	r2, [r7, #4]
  return result;
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	fab2 f282 	clz	r2, r2
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	40d3      	lsrs	r3, r2
 8002ca0:	4a1c      	ldr	r2, [pc, #112]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ca2:	5cd3      	ldrb	r3, [r2, r3]
 8002ca4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ca6:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	220f      	movs	r2, #15
 8002cb0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	fa92 f2a2 	rbit	r2, r2
 8002cb8:	60fa      	str	r2, [r7, #12]
  return result;
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	fab2 f282 	clz	r2, r2
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	40d3      	lsrs	r3, r2
 8002cc4:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cc6:	5cd3      	ldrb	r3, [r2, r3]
 8002cc8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce4:	e004      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	623b      	str	r3, [r7, #32]
      break;
 8002cf4:	e002      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cf8:	623b      	str	r3, [r7, #32]
      break;
 8002cfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	372c      	adds	r7, #44	; 0x2c
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	007a1200 	.word	0x007a1200
 8002d14:	080043e0 	.word	0x080043e0
 8002d18:	080043f0 	.word	0x080043f0
 8002d1c:	003d0900 	.word	0x003d0900

08002d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b092      	sub	sp, #72	; 0x48
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 80d4 	beq.w	8002eec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d44:	4b4e      	ldr	r3, [pc, #312]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10e      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d50:	4b4b      	ldr	r3, [pc, #300]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	4a4a      	ldr	r2, [pc, #296]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	61d3      	str	r3, [r2, #28]
 8002d5c:	4b48      	ldr	r3, [pc, #288]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b45      	ldr	r3, [pc, #276]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d118      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7a:	4b42      	ldr	r3, [pc, #264]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a41      	ldr	r2, [pc, #260]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d86:	f7fe faf1 	bl	800136c <HAL_GetTick>
 8002d8a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	e008      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8e:	f7fe faed 	bl	800136c <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b64      	cmp	r3, #100	; 0x64
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e14b      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	4b38      	ldr	r3, [pc, #224]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dac:	4b34      	ldr	r3, [pc, #208]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8084 	beq.w	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d07c      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dcc:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	461a      	mov	r2, r3
 8002df6:	2301      	movs	r3, #1
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e1e:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e22:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d04b      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fe fa9d 	bl	800136c <HAL_GetTick>
 8002e32:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fe fa99 	bl	800136c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e0f5      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
 8002e58:	2302      	movs	r3, #2
 8002e5a:	623b      	str	r3, [r7, #32]
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	61fb      	str	r3, [r7, #28]
  return result;
 8002e64:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d108      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e7a:	4b01      	ldr	r3, [pc, #4]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	e00d      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40007000 	.word	0x40007000
 8002e88:	10908100 	.word	0x10908100
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	4b69      	ldr	r3, [pc, #420]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	613a      	str	r2, [r7, #16]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	fa92 f2a2 	rbit	r2, r2
 8002ea6:	60fa      	str	r2, [r7, #12]
  return result;
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	fab2 f282 	clz	r2, r2
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	f002 021f 	and.w	r2, r2, #31
 8002eba:	2101      	movs	r1, #1
 8002ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0b7      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ec6:	4b5e      	ldr	r3, [pc, #376]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	495b      	ldr	r1, [pc, #364]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ed8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d105      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee0:	4b57      	ldr	r3, [pc, #348]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	4a56      	ldr	r2, [pc, #344]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ef8:	4b51      	ldr	r3, [pc, #324]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	f023 0203 	bic.w	r2, r3, #3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	494e      	ldr	r1, [pc, #312]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f16:	4b4a      	ldr	r3, [pc, #296]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f023 0210 	bic.w	r2, r3, #16
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	4947      	ldr	r1, [pc, #284]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f34:	4b42      	ldr	r3, [pc, #264]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	493f      	ldr	r1, [pc, #252]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f52:	4b3b      	ldr	r3, [pc, #236]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f023 0220 	bic.w	r2, r3, #32
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	4938      	ldr	r1, [pc, #224]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f70:	4b33      	ldr	r3, [pc, #204]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	4930      	ldr	r1, [pc, #192]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f8e:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	4929      	ldr	r1, [pc, #164]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002fac:	4b24      	ldr	r3, [pc, #144]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	4921      	ldr	r1, [pc, #132]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	491a      	ldr	r1, [pc, #104]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002fe8:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	4912      	ldr	r1, [pc, #72]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003006:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	490b      	ldr	r1, [pc, #44]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003014:	4313      	orrs	r3, r2
 8003016:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	4903      	ldr	r1, [pc, #12]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003032:	4313      	orrs	r3, r2
 8003034:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3748      	adds	r7, #72	; 0x48
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000

08003044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e049      	b.n	80030ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fe f810 	bl	8001090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3304      	adds	r3, #4
 8003080:	4619      	mov	r1, r3
 8003082:	4610      	mov	r0, r2
 8003084:	f000 fc98 	bl	80039b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e049      	b.n	8003198 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d106      	bne.n	800311e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7fd ff81 	bl	8001020 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2202      	movs	r2, #2
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3304      	adds	r3, #4
 800312e:	4619      	mov	r1, r3
 8003130:	4610      	mov	r0, r2
 8003132:	f000 fc41 	bl	80039b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d109      	bne.n	80031c4 <HAL_TIM_PWM_Start+0x24>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	bf14      	ite	ne
 80031bc:	2301      	movne	r3, #1
 80031be:	2300      	moveq	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	e03c      	b.n	800323e <HAL_TIM_PWM_Start+0x9e>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d109      	bne.n	80031de <HAL_TIM_PWM_Start+0x3e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	bf14      	ite	ne
 80031d6:	2301      	movne	r3, #1
 80031d8:	2300      	moveq	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	e02f      	b.n	800323e <HAL_TIM_PWM_Start+0x9e>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d109      	bne.n	80031f8 <HAL_TIM_PWM_Start+0x58>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	bf14      	ite	ne
 80031f0:	2301      	movne	r3, #1
 80031f2:	2300      	moveq	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e022      	b.n	800323e <HAL_TIM_PWM_Start+0x9e>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b0c      	cmp	r3, #12
 80031fc:	d109      	bne.n	8003212 <HAL_TIM_PWM_Start+0x72>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b01      	cmp	r3, #1
 8003208:	bf14      	ite	ne
 800320a:	2301      	movne	r3, #1
 800320c:	2300      	moveq	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	e015      	b.n	800323e <HAL_TIM_PWM_Start+0x9e>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b10      	cmp	r3, #16
 8003216:	d109      	bne.n	800322c <HAL_TIM_PWM_Start+0x8c>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	bf14      	ite	ne
 8003224:	2301      	movne	r3, #1
 8003226:	2300      	moveq	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e008      	b.n	800323e <HAL_TIM_PWM_Start+0x9e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b01      	cmp	r3, #1
 8003236:	bf14      	ite	ne
 8003238:	2301      	movne	r3, #1
 800323a:	2300      	moveq	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e083      	b.n	800334e <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d104      	bne.n	8003256 <HAL_TIM_PWM_Start+0xb6>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003254:	e023      	b.n	800329e <HAL_TIM_PWM_Start+0xfe>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b04      	cmp	r3, #4
 800325a:	d104      	bne.n	8003266 <HAL_TIM_PWM_Start+0xc6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003264:	e01b      	b.n	800329e <HAL_TIM_PWM_Start+0xfe>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b08      	cmp	r3, #8
 800326a:	d104      	bne.n	8003276 <HAL_TIM_PWM_Start+0xd6>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003274:	e013      	b.n	800329e <HAL_TIM_PWM_Start+0xfe>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b0c      	cmp	r3, #12
 800327a:	d104      	bne.n	8003286 <HAL_TIM_PWM_Start+0xe6>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003284:	e00b      	b.n	800329e <HAL_TIM_PWM_Start+0xfe>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b10      	cmp	r3, #16
 800328a:	d104      	bne.n	8003296 <HAL_TIM_PWM_Start+0xf6>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003294:	e003      	b.n	800329e <HAL_TIM_PWM_Start+0xfe>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2202      	movs	r2, #2
 800329a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2201      	movs	r2, #1
 80032a4:	6839      	ldr	r1, [r7, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 ff34 	bl	8004114 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a29      	ldr	r2, [pc, #164]	; (8003358 <HAL_TIM_PWM_Start+0x1b8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00e      	beq.n	80032d4 <HAL_TIM_PWM_Start+0x134>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a28      	ldr	r2, [pc, #160]	; (800335c <HAL_TIM_PWM_Start+0x1bc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d009      	beq.n	80032d4 <HAL_TIM_PWM_Start+0x134>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a26      	ldr	r2, [pc, #152]	; (8003360 <HAL_TIM_PWM_Start+0x1c0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d004      	beq.n	80032d4 <HAL_TIM_PWM_Start+0x134>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a25      	ldr	r2, [pc, #148]	; (8003364 <HAL_TIM_PWM_Start+0x1c4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d101      	bne.n	80032d8 <HAL_TIM_PWM_Start+0x138>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <HAL_TIM_PWM_Start+0x13a>
 80032d8:	2300      	movs	r3, #0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d007      	beq.n	80032ee <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a19      	ldr	r2, [pc, #100]	; (8003358 <HAL_TIM_PWM_Start+0x1b8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d009      	beq.n	800330c <HAL_TIM_PWM_Start+0x16c>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003300:	d004      	beq.n	800330c <HAL_TIM_PWM_Start+0x16c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a15      	ldr	r2, [pc, #84]	; (800335c <HAL_TIM_PWM_Start+0x1bc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d115      	bne.n	8003338 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <HAL_TIM_PWM_Start+0x1c8>)
 8003314:	4013      	ands	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b06      	cmp	r3, #6
 800331c:	d015      	beq.n	800334a <HAL_TIM_PWM_Start+0x1aa>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003324:	d011      	beq.n	800334a <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003336:	e008      	b.n	800334a <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	e000      	b.n	800334c <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40014000 	.word	0x40014000
 8003360:	40014400 	.word	0x40014400
 8003364:	40014800 	.word	0x40014800
 8003368:	00010007 	.word	0x00010007

0800336c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	d122      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b02      	cmp	r3, #2
 800338e:	d11b      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0202 	mvn.w	r2, #2
 8003398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fae3 	bl	800397a <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fad5 	bl	8003966 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fae6 	bl	800398e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d122      	bne.n	800341c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d11b      	bne.n	800341c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0204 	mvn.w	r2, #4
 80033ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2202      	movs	r2, #2
 80033f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fab9 	bl	800397a <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 faab 	bl	8003966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fabc 	bl	800398e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b08      	cmp	r3, #8
 8003428:	d122      	bne.n	8003470 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b08      	cmp	r3, #8
 8003436:	d11b      	bne.n	8003470 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0208 	mvn.w	r2, #8
 8003440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2204      	movs	r2, #4
 8003446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa8f 	bl	800397a <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fa81 	bl	8003966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fa92 	bl	800398e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b10      	cmp	r3, #16
 800347c:	d122      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b10      	cmp	r3, #16
 800348a:	d11b      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0210 	mvn.w	r2, #16
 8003494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2208      	movs	r2, #8
 800349a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fa65 	bl	800397a <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fa57 	bl	8003966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fa68 	bl	800398e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d10e      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d107      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0201 	mvn.w	r2, #1
 80034e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fd f99c 	bl	8000828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b80      	cmp	r3, #128	; 0x80
 80034fc:	d10e      	bne.n	800351c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	2b80      	cmp	r3, #128	; 0x80
 800350a:	d107      	bne.n	800351c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 ff0a 	bl	8004330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352a:	d10e      	bne.n	800354a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b80      	cmp	r3, #128	; 0x80
 8003538:	d107      	bne.n	800354a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fefd 	bl	8004344 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	d10e      	bne.n	8003576 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b40      	cmp	r3, #64	; 0x40
 8003564:	d107      	bne.n	8003576 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800356e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 fa16 	bl	80039a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b20      	cmp	r3, #32
 8003582:	d10e      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b20      	cmp	r3, #32
 8003590:	d107      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f06f 0220 	mvn.w	r2, #32
 800359a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 febd 	bl	800431c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e0ff      	b.n	80037ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b14      	cmp	r3, #20
 80035d6:	f200 80f0 	bhi.w	80037ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80035da:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e0:	08003635 	.word	0x08003635
 80035e4:	080037bb 	.word	0x080037bb
 80035e8:	080037bb 	.word	0x080037bb
 80035ec:	080037bb 	.word	0x080037bb
 80035f0:	08003675 	.word	0x08003675
 80035f4:	080037bb 	.word	0x080037bb
 80035f8:	080037bb 	.word	0x080037bb
 80035fc:	080037bb 	.word	0x080037bb
 8003600:	080036b7 	.word	0x080036b7
 8003604:	080037bb 	.word	0x080037bb
 8003608:	080037bb 	.word	0x080037bb
 800360c:	080037bb 	.word	0x080037bb
 8003610:	080036f7 	.word	0x080036f7
 8003614:	080037bb 	.word	0x080037bb
 8003618:	080037bb 	.word	0x080037bb
 800361c:	080037bb 	.word	0x080037bb
 8003620:	08003739 	.word	0x08003739
 8003624:	080037bb 	.word	0x080037bb
 8003628:	080037bb 	.word	0x080037bb
 800362c:	080037bb 	.word	0x080037bb
 8003630:	08003779 	.word	0x08003779
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fa2a 	bl	8003a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0208 	orr.w	r2, r2, #8
 800364e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699a      	ldr	r2, [r3, #24]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0204 	bic.w	r2, r2, #4
 800365e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6999      	ldr	r1, [r3, #24]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	619a      	str	r2, [r3, #24]
      break;
 8003672:	e0a5      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fa90 	bl	8003ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800368e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6999      	ldr	r1, [r3, #24]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	021a      	lsls	r2, r3, #8
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	619a      	str	r2, [r3, #24]
      break;
 80036b4:	e084      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 faef 	bl	8003ca0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0208 	orr.w	r2, r2, #8
 80036d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69da      	ldr	r2, [r3, #28]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0204 	bic.w	r2, r2, #4
 80036e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69d9      	ldr	r1, [r3, #28]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	61da      	str	r2, [r3, #28]
      break;
 80036f4:	e064      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fb4d 	bl	8003d9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69d9      	ldr	r1, [r3, #28]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	021a      	lsls	r2, r3, #8
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	61da      	str	r2, [r3, #28]
      break;
 8003736:	e043      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fb90 	bl	8003e64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0208 	orr.w	r2, r2, #8
 8003752:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0204 	bic.w	r2, r2, #4
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003776:	e023      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fbce 	bl	8003f20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003792:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	021a      	lsls	r2, r3, #8
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037b8:	e002      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	75fb      	strb	r3, [r7, #23]
      break;
 80037be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop

080037d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIM_ConfigClockSource+0x1c>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e0b6      	b.n	800395e <HAL_TIM_ConfigClockSource+0x18a>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800381a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382c:	d03e      	beq.n	80038ac <HAL_TIM_ConfigClockSource+0xd8>
 800382e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003832:	f200 8087 	bhi.w	8003944 <HAL_TIM_ConfigClockSource+0x170>
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383a:	f000 8086 	beq.w	800394a <HAL_TIM_ConfigClockSource+0x176>
 800383e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003842:	d87f      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x170>
 8003844:	2b70      	cmp	r3, #112	; 0x70
 8003846:	d01a      	beq.n	800387e <HAL_TIM_ConfigClockSource+0xaa>
 8003848:	2b70      	cmp	r3, #112	; 0x70
 800384a:	d87b      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x170>
 800384c:	2b60      	cmp	r3, #96	; 0x60
 800384e:	d050      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0x11e>
 8003850:	2b60      	cmp	r3, #96	; 0x60
 8003852:	d877      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x170>
 8003854:	2b50      	cmp	r3, #80	; 0x50
 8003856:	d03c      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0xfe>
 8003858:	2b50      	cmp	r3, #80	; 0x50
 800385a:	d873      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x170>
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d058      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0x13e>
 8003860:	2b40      	cmp	r3, #64	; 0x40
 8003862:	d86f      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x170>
 8003864:	2b30      	cmp	r3, #48	; 0x30
 8003866:	d064      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x15e>
 8003868:	2b30      	cmp	r3, #48	; 0x30
 800386a:	d86b      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x170>
 800386c:	2b20      	cmp	r3, #32
 800386e:	d060      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x15e>
 8003870:	2b20      	cmp	r3, #32
 8003872:	d867      	bhi.n	8003944 <HAL_TIM_ConfigClockSource+0x170>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d05c      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x15e>
 8003878:	2b10      	cmp	r3, #16
 800387a:	d05a      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x15e>
 800387c:	e062      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6899      	ldr	r1, [r3, #8]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f000 fc21 	bl	80040d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	609a      	str	r2, [r3, #8]
      break;
 80038aa:	e04f      	b.n	800394c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	6899      	ldr	r1, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f000 fc0a 	bl	80040d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ce:	609a      	str	r2, [r3, #8]
      break;
 80038d0:	e03c      	b.n	800394c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6859      	ldr	r1, [r3, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	461a      	mov	r2, r3
 80038e0:	f000 fb7e 	bl	8003fe0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2150      	movs	r1, #80	; 0x50
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fbd7 	bl	800409e <TIM_ITRx_SetConfig>
      break;
 80038f0:	e02c      	b.n	800394c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6859      	ldr	r1, [r3, #4]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	461a      	mov	r2, r3
 8003900:	f000 fb9d 	bl	800403e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2160      	movs	r1, #96	; 0x60
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fbc7 	bl	800409e <TIM_ITRx_SetConfig>
      break;
 8003910:	e01c      	b.n	800394c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	461a      	mov	r2, r3
 8003920:	f000 fb5e 	bl	8003fe0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2140      	movs	r1, #64	; 0x40
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fbb7 	bl	800409e <TIM_ITRx_SetConfig>
      break;
 8003930:	e00c      	b.n	800394c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f000 fbae 	bl	800409e <TIM_ITRx_SetConfig>
      break;
 8003942:	e003      	b.n	800394c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      break;
 8003948:	e000      	b.n	800394c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800394a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800395c:	7bfb      	ldrb	r3, [r7, #15]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a2e      	ldr	r2, [pc, #184]	; (8003a84 <TIM_Base_SetConfig+0xcc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_Base_SetConfig+0x20>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d6:	d108      	bne.n	80039ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a25      	ldr	r2, [pc, #148]	; (8003a84 <TIM_Base_SetConfig+0xcc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00f      	beq.n	8003a12 <TIM_Base_SetConfig+0x5a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f8:	d00b      	beq.n	8003a12 <TIM_Base_SetConfig+0x5a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a22      	ldr	r2, [pc, #136]	; (8003a88 <TIM_Base_SetConfig+0xd0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <TIM_Base_SetConfig+0x5a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <TIM_Base_SetConfig+0xd4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_Base_SetConfig+0x5a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a20      	ldr	r2, [pc, #128]	; (8003a90 <TIM_Base_SetConfig+0xd8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d108      	bne.n	8003a24 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a0e      	ldr	r2, [pc, #56]	; (8003a84 <TIM_Base_SetConfig+0xcc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00b      	beq.n	8003a68 <TIM_Base_SetConfig+0xb0>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0d      	ldr	r2, [pc, #52]	; (8003a88 <TIM_Base_SetConfig+0xd0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d007      	beq.n	8003a68 <TIM_Base_SetConfig+0xb0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a0c      	ldr	r2, [pc, #48]	; (8003a8c <TIM_Base_SetConfig+0xd4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d003      	beq.n	8003a68 <TIM_Base_SetConfig+0xb0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <TIM_Base_SetConfig+0xd8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d103      	bne.n	8003a70 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	615a      	str	r2, [r3, #20]
}
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40012c00 	.word	0x40012c00
 8003a88:	40014000 	.word	0x40014000
 8003a8c:	40014400 	.word	0x40014400
 8003a90:	40014800 	.word	0x40014800

08003a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f023 0201 	bic.w	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0303 	bic.w	r3, r3, #3
 8003ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f023 0302 	bic.w	r3, r3, #2
 8003ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a28      	ldr	r2, [pc, #160]	; (8003b90 <TIM_OC1_SetConfig+0xfc>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00b      	beq.n	8003b0c <TIM_OC1_SetConfig+0x78>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a27      	ldr	r2, [pc, #156]	; (8003b94 <TIM_OC1_SetConfig+0x100>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d007      	beq.n	8003b0c <TIM_OC1_SetConfig+0x78>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <TIM_OC1_SetConfig+0x104>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <TIM_OC1_SetConfig+0x78>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a25      	ldr	r2, [pc, #148]	; (8003b9c <TIM_OC1_SetConfig+0x108>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d10c      	bne.n	8003b26 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0308 	bic.w	r3, r3, #8
 8003b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f023 0304 	bic.w	r3, r3, #4
 8003b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a19      	ldr	r2, [pc, #100]	; (8003b90 <TIM_OC1_SetConfig+0xfc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00b      	beq.n	8003b46 <TIM_OC1_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a18      	ldr	r2, [pc, #96]	; (8003b94 <TIM_OC1_SetConfig+0x100>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d007      	beq.n	8003b46 <TIM_OC1_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a17      	ldr	r2, [pc, #92]	; (8003b98 <TIM_OC1_SetConfig+0x104>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d003      	beq.n	8003b46 <TIM_OC1_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <TIM_OC1_SetConfig+0x108>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d111      	bne.n	8003b6a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	621a      	str	r2, [r3, #32]
}
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40014000 	.word	0x40014000
 8003b98:	40014400 	.word	0x40014400
 8003b9c:	40014800 	.word	0x40014800

08003ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	f023 0210 	bic.w	r2, r3, #16
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f023 0320 	bic.w	r3, r3, #32
 8003bee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a24      	ldr	r2, [pc, #144]	; (8003c90 <TIM_OC2_SetConfig+0xf0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10d      	bne.n	8003c20 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <TIM_OC2_SetConfig+0xf0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00b      	beq.n	8003c40 <TIM_OC2_SetConfig+0xa0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a1a      	ldr	r2, [pc, #104]	; (8003c94 <TIM_OC2_SetConfig+0xf4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <TIM_OC2_SetConfig+0xa0>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a19      	ldr	r2, [pc, #100]	; (8003c98 <TIM_OC2_SetConfig+0xf8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_OC2_SetConfig+0xa0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a18      	ldr	r2, [pc, #96]	; (8003c9c <TIM_OC2_SetConfig+0xfc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d113      	bne.n	8003c68 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c46:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c4e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	621a      	str	r2, [r3, #32]
}
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40012c00 	.word	0x40012c00
 8003c94:	40014000 	.word	0x40014000
 8003c98:	40014400 	.word	0x40014400
 8003c9c:	40014800 	.word	0x40014800

08003ca0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0303 	bic.w	r3, r3, #3
 8003cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a23      	ldr	r2, [pc, #140]	; (8003d8c <TIM_OC3_SetConfig+0xec>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d10d      	bne.n	8003d1e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d1c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a1a      	ldr	r2, [pc, #104]	; (8003d8c <TIM_OC3_SetConfig+0xec>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00b      	beq.n	8003d3e <TIM_OC3_SetConfig+0x9e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a19      	ldr	r2, [pc, #100]	; (8003d90 <TIM_OC3_SetConfig+0xf0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d007      	beq.n	8003d3e <TIM_OC3_SetConfig+0x9e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a18      	ldr	r2, [pc, #96]	; (8003d94 <TIM_OC3_SetConfig+0xf4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d003      	beq.n	8003d3e <TIM_OC3_SetConfig+0x9e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a17      	ldr	r2, [pc, #92]	; (8003d98 <TIM_OC3_SetConfig+0xf8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d113      	bne.n	8003d66 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	621a      	str	r2, [r3, #32]
}
 8003d80:	bf00      	nop
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	40012c00 	.word	0x40012c00
 8003d90:	40014000 	.word	0x40014000
 8003d94:	40014400 	.word	0x40014400
 8003d98:	40014800 	.word	0x40014800

08003d9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	021b      	lsls	r3, r3, #8
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	031b      	lsls	r3, r3, #12
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a16      	ldr	r2, [pc, #88]	; (8003e54 <TIM_OC4_SetConfig+0xb8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00b      	beq.n	8003e18 <TIM_OC4_SetConfig+0x7c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a15      	ldr	r2, [pc, #84]	; (8003e58 <TIM_OC4_SetConfig+0xbc>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d007      	beq.n	8003e18 <TIM_OC4_SetConfig+0x7c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a14      	ldr	r2, [pc, #80]	; (8003e5c <TIM_OC4_SetConfig+0xc0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_OC4_SetConfig+0x7c>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <TIM_OC4_SetConfig+0xc4>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d109      	bne.n	8003e2c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	019b      	lsls	r3, r3, #6
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	621a      	str	r2, [r3, #32]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40012c00 	.word	0x40012c00
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40014400 	.word	0x40014400
 8003e60:	40014800 	.word	0x40014800

08003e64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ea8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a15      	ldr	r2, [pc, #84]	; (8003f10 <TIM_OC5_SetConfig+0xac>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00b      	beq.n	8003ed6 <TIM_OC5_SetConfig+0x72>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <TIM_OC5_SetConfig+0xb0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d007      	beq.n	8003ed6 <TIM_OC5_SetConfig+0x72>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a13      	ldr	r2, [pc, #76]	; (8003f18 <TIM_OC5_SetConfig+0xb4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d003      	beq.n	8003ed6 <TIM_OC5_SetConfig+0x72>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <TIM_OC5_SetConfig+0xb8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d109      	bne.n	8003eea <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003edc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	621a      	str	r2, [r3, #32]
}
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	40012c00 	.word	0x40012c00
 8003f14:	40014000 	.word	0x40014000
 8003f18:	40014400 	.word	0x40014400
 8003f1c:	40014800 	.word	0x40014800

08003f20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	051b      	lsls	r3, r3, #20
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a16      	ldr	r2, [pc, #88]	; (8003fd0 <TIM_OC6_SetConfig+0xb0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00b      	beq.n	8003f94 <TIM_OC6_SetConfig+0x74>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <TIM_OC6_SetConfig+0xb4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d007      	beq.n	8003f94 <TIM_OC6_SetConfig+0x74>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a14      	ldr	r2, [pc, #80]	; (8003fd8 <TIM_OC6_SetConfig+0xb8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d003      	beq.n	8003f94 <TIM_OC6_SetConfig+0x74>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a13      	ldr	r2, [pc, #76]	; (8003fdc <TIM_OC6_SetConfig+0xbc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d109      	bne.n	8003fa8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	029b      	lsls	r3, r3, #10
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	621a      	str	r2, [r3, #32]
}
 8003fc2:	bf00      	nop
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40012c00 	.word	0x40012c00
 8003fd4:	40014000 	.word	0x40014000
 8003fd8:	40014400 	.word	0x40014400
 8003fdc:	40014800 	.word	0x40014800

08003fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f023 0201 	bic.w	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800400a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f023 030a 	bic.w	r3, r3, #10
 800401c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800403e:	b480      	push	{r7}
 8004040:	b087      	sub	sp, #28
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f023 0210 	bic.w	r2, r3, #16
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004068:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	031b      	lsls	r3, r3, #12
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800407a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800409e:	b480      	push	{r7}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f043 0307 	orr.w	r3, r3, #7
 80040c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	609a      	str	r2, [r3, #8]
}
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	021a      	lsls	r2, r3, #8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	609a      	str	r2, [r3, #8]
}
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	2201      	movs	r2, #1
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a1a      	ldr	r2, [r3, #32]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	43db      	mvns	r3, r3
 8004136:	401a      	ands	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1a      	ldr	r2, [r3, #32]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 031f 	and.w	r3, r3, #31
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	fa01 f303 	lsl.w	r3, r1, r3
 800414c:	431a      	orrs	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	621a      	str	r2, [r3, #32]
}
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
	...

08004160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004174:	2302      	movs	r3, #2
 8004176:	e04f      	b.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a21      	ldr	r2, [pc, #132]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d108      	bne.n	80041b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a14      	ldr	r2, [pc, #80]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d009      	beq.n	80041ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e0:	d004      	beq.n	80041ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a10      	ldr	r2, [pc, #64]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d10c      	bne.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40014000 	.word	0x40014000

0800422c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004244:	2302      	movs	r3, #2
 8004246:	e060      	b.n	800430a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	041b      	lsls	r3, r3, #16
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a14      	ldr	r2, [pc, #80]	; (8004318 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d115      	bne.n	80042f8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	051b      	lsls	r3, r3, #20
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40012c00 	.word	0x40012c00

0800431c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <__libc_init_array>:
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	4d0d      	ldr	r5, [pc, #52]	; (8004390 <__libc_init_array+0x38>)
 800435c:	4c0d      	ldr	r4, [pc, #52]	; (8004394 <__libc_init_array+0x3c>)
 800435e:	1b64      	subs	r4, r4, r5
 8004360:	10a4      	asrs	r4, r4, #2
 8004362:	2600      	movs	r6, #0
 8004364:	42a6      	cmp	r6, r4
 8004366:	d109      	bne.n	800437c <__libc_init_array+0x24>
 8004368:	4d0b      	ldr	r5, [pc, #44]	; (8004398 <__libc_init_array+0x40>)
 800436a:	4c0c      	ldr	r4, [pc, #48]	; (800439c <__libc_init_array+0x44>)
 800436c:	f000 f820 	bl	80043b0 <_init>
 8004370:	1b64      	subs	r4, r4, r5
 8004372:	10a4      	asrs	r4, r4, #2
 8004374:	2600      	movs	r6, #0
 8004376:	42a6      	cmp	r6, r4
 8004378:	d105      	bne.n	8004386 <__libc_init_array+0x2e>
 800437a:	bd70      	pop	{r4, r5, r6, pc}
 800437c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004380:	4798      	blx	r3
 8004382:	3601      	adds	r6, #1
 8004384:	e7ee      	b.n	8004364 <__libc_init_array+0xc>
 8004386:	f855 3b04 	ldr.w	r3, [r5], #4
 800438a:	4798      	blx	r3
 800438c:	3601      	adds	r6, #1
 800438e:	e7f2      	b.n	8004376 <__libc_init_array+0x1e>
 8004390:	08004400 	.word	0x08004400
 8004394:	08004400 	.word	0x08004400
 8004398:	08004400 	.word	0x08004400
 800439c:	08004404 	.word	0x08004404

080043a0 <memset>:
 80043a0:	4402      	add	r2, r0
 80043a2:	4603      	mov	r3, r0
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d100      	bne.n	80043aa <memset+0xa>
 80043a8:	4770      	bx	lr
 80043aa:	f803 1b01 	strb.w	r1, [r3], #1
 80043ae:	e7f9      	b.n	80043a4 <memset+0x4>

080043b0 <_init>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	bf00      	nop
 80043b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b6:	bc08      	pop	{r3}
 80043b8:	469e      	mov	lr, r3
 80043ba:	4770      	bx	lr

080043bc <_fini>:
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	bf00      	nop
 80043c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c2:	bc08      	pop	{r3}
 80043c4:	469e      	mov	lr, r3
 80043c6:	4770      	bx	lr
