
ESC_Software_F302R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004348  08004348  00014348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004380  08004380  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004380  08004380  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004380  08004380  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004380  08004380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000000c  08004394  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004394  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc0c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e11  00000000  00000000  0002cc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002ea60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002f518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afd8  00000000  00000000  0002fee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2f9  00000000  00000000  0004aec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1428  00000000  00000000  000581b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f95e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b90  00000000  00000000  000f9634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004330 	.word	0x08004330

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004330 	.word	0x08004330

080001c8 <PeripheralsStart>:
#include "TimeTask.h"

const uint8_t Trigger_Control_State[6] = {State_A_B,State_A_C,State_B_C,State_B_A,State_C_A,State_C_B};

void PeripheralsStart()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	  Motor_Control.Duty_Cycle = 20;
 80001cc:	4b1d      	ldr	r3, [pc, #116]	; (8000244 <PeripheralsStart+0x7c>)
 80001ce:	2214      	movs	r2, #20
 80001d0:	709a      	strb	r2, [r3, #2]

	  Start_Up.Duty_Cycle = 50;
 80001d2:	4b1d      	ldr	r3, [pc, #116]	; (8000248 <PeripheralsStart+0x80>)
 80001d4:	2232      	movs	r2, #50	; 0x32
 80001d6:	701a      	strb	r2, [r3, #0]
	  Start_Up.Delay_Seconds = 0.00005f; // 50 mikro saniye (20k task'ta yapılabilecek minimum süre)
 80001d8:	4b1b      	ldr	r3, [pc, #108]	; (8000248 <PeripheralsStart+0x80>)
 80001da:	4a1c      	ldr	r2, [pc, #112]	; (800024c <PeripheralsStart+0x84>)
 80001dc:	605a      	str	r2, [r3, #4]
	  Start_Up.Tour = 7;
 80001de:	4b1a      	ldr	r3, [pc, #104]	; (8000248 <PeripheralsStart+0x80>)
 80001e0:	2207      	movs	r2, #7
 80001e2:	805a      	strh	r2, [r3, #2]

	  Start_Up.Align_Coefficient = 2;
 80001e4:	4b18      	ldr	r3, [pc, #96]	; (8000248 <PeripheralsStart+0x80>)
 80001e6:	2202      	movs	r2, #2
 80001e8:	819a      	strh	r2, [r3, #12]
	  Start_Up.Align_DutyCycle = 50;
 80001ea:	4b17      	ldr	r3, [pc, #92]	; (8000248 <PeripheralsStart+0x80>)
 80001ec:	2232      	movs	r2, #50	; 0x32
 80001ee:	81da      	strh	r2, [r3, #14]

	  Motor_Control.Drive_Stage = START_UP;
 80001f0:	4b14      	ldr	r3, [pc, #80]	; (8000244 <PeripheralsStart+0x7c>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	  Motor_Control.Blinde_Mode_RPM = 20;
 80001f8:	4b12      	ldr	r3, [pc, #72]	; (8000244 <PeripheralsStart+0x7c>)
 80001fa:	2214      	movs	r2, #20
 80001fc:	629a      	str	r2, [r3, #40]	; 0x28

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// Phase A High
 80001fe:	2100      	movs	r1, #0
 8000200:	4813      	ldr	r0, [pc, #76]	; (8000250 <PeripheralsStart+0x88>)
 8000202:	f002 ff8d 	bl	8003120 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	// Phase B High
 8000206:	2104      	movs	r1, #4
 8000208:	4811      	ldr	r0, [pc, #68]	; (8000250 <PeripheralsStart+0x88>)
 800020a:	f002 ff89 	bl	8003120 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	// Phase C High
 800020e:	2108      	movs	r1, #8
 8000210:	480f      	ldr	r0, [pc, #60]	; (8000250 <PeripheralsStart+0x88>)
 8000212:	f002 ff85 	bl	8003120 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// Phase A Low
 8000216:	2100      	movs	r1, #0
 8000218:	480e      	ldr	r0, [pc, #56]	; (8000254 <PeripheralsStart+0x8c>)
 800021a:	f002 ff81 	bl	8003120 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	// Phase B Low
 800021e:	2104      	movs	r1, #4
 8000220:	480c      	ldr	r0, [pc, #48]	; (8000254 <PeripheralsStart+0x8c>)
 8000222:	f002 ff7d 	bl	8003120 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	// Phase C Low
 8000226:	2108      	movs	r1, #8
 8000228:	480a      	ldr	r0, [pc, #40]	; (8000254 <PeripheralsStart+0x8c>)
 800022a:	f002 ff79 	bl	8003120 <HAL_TIM_PWM_Start>

	  HAL_COMP_Start(&hcomp2);	// Phase A Out
 800022e:	480a      	ldr	r0, [pc, #40]	; (8000258 <PeripheralsStart+0x90>)
 8000230:	f001 f8e2 	bl	80013f8 <HAL_COMP_Start>
	  HAL_COMP_Start(&hcomp4);	// Phase B Out
 8000234:	4809      	ldr	r0, [pc, #36]	; (800025c <PeripheralsStart+0x94>)
 8000236:	f001 f8df 	bl	80013f8 <HAL_COMP_Start>
	  HAL_COMP_Start(&hcomp6);	// Phase C Out
 800023a:	4809      	ldr	r0, [pc, #36]	; (8000260 <PeripheralsStart+0x98>)
 800023c:	f001 f8dc 	bl	80013f8 <HAL_COMP_Start>

//	  HAL_TIM_Base_Start_IT(&htim15);	// for Time Tasks
}
 8000240:	bf00      	nop
 8000242:	bd80      	pop	{r7, pc}
 8000244:	200001fc 	.word	0x200001fc
 8000248:	2000016c 	.word	0x2000016c
 800024c:	3851b717 	.word	0x3851b717
 8000250:	20000120 	.word	0x20000120
 8000254:	200001ac 	.word	0x200001ac
 8000258:	2000017c 	.word	0x2000017c
 800025c:	200000ec 	.word	0x200000ec
 8000260:	200000bc 	.word	0x200000bc

08000264 <Stop_Motor>:

void Stop_Motor()
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <Stop_Motor+0x48>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2200      	movs	r2, #0
 800026e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000270:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <Stop_Motor+0x48>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2200      	movs	r2, #0
 8000276:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <Stop_Motor+0x48>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2200      	movs	r2, #0
 800027e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 8000280:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <Stop_Motor+0x4c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2200      	movs	r2, #0
 8000286:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <Stop_Motor+0x4c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2200      	movs	r2, #0
 800028e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <Stop_Motor+0x4c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2200      	movs	r2, #0
 8000296:	63da      	str	r2, [r3, #60]	; 0x3c

	Motor_Control.Drive_Stage = START_UP;
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <Stop_Motor+0x50>)
 800029a:	2200      	movs	r2, #0
 800029c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000120 	.word	0x20000120
 80002b0:	200001ac 	.word	0x200001ac
 80002b4:	200001fc 	.word	0x200001fc

080002b8 <Start_Up_Motor>:

void Start_Up_Motor()
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	static int Tour_Counter = 0;

	if(Motor_Control.Control_Counter++ >= MOTOR_CONTROL_TASK_HZ*Start_Up.Delay_Seconds)
 80002bc:	4b29      	ldr	r3, [pc, #164]	; (8000364 <Start_Up_Motor+0xac>)
 80002be:	69da      	ldr	r2, [r3, #28]
 80002c0:	1c53      	adds	r3, r2, #1
 80002c2:	4928      	ldr	r1, [pc, #160]	; (8000364 <Start_Up_Motor+0xac>)
 80002c4:	61cb      	str	r3, [r1, #28]
 80002c6:	ee07 2a90 	vmov	s15, r2
 80002ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80002ce:	4b26      	ldr	r3, [pc, #152]	; (8000368 <Start_Up_Motor+0xb0>)
 80002d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80002d4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800036c <Start_Up_Motor+0xb4>
 80002d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80002dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002e4:	da00      	bge.n	80002e8 <Start_Up_Motor+0x30>
		else
		{
			Motor_Control.Motor_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
		}
	}
}
 80002e6:	e03a      	b.n	800035e <Start_Up_Motor+0xa6>
		Motor_Control.Control_Counter = 0;
 80002e8:	4b1e      	ldr	r3, [pc, #120]	; (8000364 <Start_Up_Motor+0xac>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	61da      	str	r2, [r3, #28]
		Set_Motor_State(Trigger_Control_State[Motor_Control.Motor_State_Index], Start_Up.Duty_Cycle);
 80002ee:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <Start_Up_Motor+0xac>)
 80002f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80002f4:	461a      	mov	r2, r3
 80002f6:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <Start_Up_Motor+0xb8>)
 80002f8:	5c9b      	ldrb	r3, [r3, r2]
 80002fa:	4a1b      	ldr	r2, [pc, #108]	; (8000368 <Start_Up_Motor+0xb0>)
 80002fc:	7812      	ldrb	r2, [r2, #0]
 80002fe:	b292      	uxth	r2, r2
 8000300:	4611      	mov	r1, r2
 8000302:	4618      	mov	r0, r3
 8000304:	f000 f90a 	bl	800051c <Set_Motor_State>
		if( (Trigger_Control_State[Motor_Control.Motor_State_Index] == State_C_B) && Tour_Counter++ >= Start_Up.Tour)
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <Start_Up_Motor+0xac>)
 800030a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800030e:	461a      	mov	r2, r3
 8000310:	4b17      	ldr	r3, [pc, #92]	; (8000370 <Start_Up_Motor+0xb8>)
 8000312:	5c9b      	ldrb	r3, [r3, r2]
 8000314:	2b04      	cmp	r3, #4
 8000316:	d110      	bne.n	800033a <Start_Up_Motor+0x82>
 8000318:	4b16      	ldr	r3, [pc, #88]	; (8000374 <Start_Up_Motor+0xbc>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	1c5a      	adds	r2, r3, #1
 800031e:	4915      	ldr	r1, [pc, #84]	; (8000374 <Start_Up_Motor+0xbc>)
 8000320:	600a      	str	r2, [r1, #0]
 8000322:	4a11      	ldr	r2, [pc, #68]	; (8000368 <Start_Up_Motor+0xb0>)
 8000324:	8852      	ldrh	r2, [r2, #2]
 8000326:	4293      	cmp	r3, r2
 8000328:	db07      	blt.n	800033a <Start_Up_Motor+0x82>
			Motor_Control.Drive_Stage = ALIGN;
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <Start_Up_Motor+0xac>)
 800032c:	2201      	movs	r2, #1
 800032e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			Tour_Counter = 0;
 8000332:	4b10      	ldr	r3, [pc, #64]	; (8000374 <Start_Up_Motor+0xbc>)
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
}
 8000338:	e011      	b.n	800035e <Start_Up_Motor+0xa6>
			Motor_Control.Motor_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <Start_Up_Motor+0xac>)
 800033c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000340:	1c5a      	adds	r2, r3, #1
 8000342:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <Start_Up_Motor+0xc0>)
 8000344:	fb83 3102 	smull	r3, r1, r3, r2
 8000348:	17d3      	asrs	r3, r2, #31
 800034a:	1ac9      	subs	r1, r1, r3
 800034c:	460b      	mov	r3, r1
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	440b      	add	r3, r1
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	1ad1      	subs	r1, r2, r3
 8000356:	b2ca      	uxtb	r2, r1
 8000358:	4b02      	ldr	r3, [pc, #8]	; (8000364 <Start_Up_Motor+0xac>)
 800035a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	200001fc 	.word	0x200001fc
 8000368:	2000016c 	.word	0x2000016c
 800036c:	469c4000 	.word	0x469c4000
 8000370:	08004348 	.word	0x08004348
 8000374:	20000028 	.word	0x20000028
 8000378:	2aaaaaab 	.word	0x2aaaaaab

0800037c <Align_Motor>:

void Align_Motor()
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	static int Tour_Counter = 0;

	if(Motor_Control.Control_Counter++ >= MOTOR_CONTROL_TASK_HZ*Start_Up.Delay_Seconds)
 8000380:	4b2b      	ldr	r3, [pc, #172]	; (8000430 <Align_Motor+0xb4>)
 8000382:	69da      	ldr	r2, [r3, #28]
 8000384:	1c53      	adds	r3, r2, #1
 8000386:	492a      	ldr	r1, [pc, #168]	; (8000430 <Align_Motor+0xb4>)
 8000388:	61cb      	str	r3, [r1, #28]
 800038a:	ee07 2a90 	vmov	s15, r2
 800038e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000392:	4b28      	ldr	r3, [pc, #160]	; (8000434 <Align_Motor+0xb8>)
 8000394:	edd3 7a01 	vldr	s15, [r3, #4]
 8000398:	eddf 6a27 	vldr	s13, [pc, #156]	; 8000438 <Align_Motor+0xbc>
 800039c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80003a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80003a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003a8:	da00      	bge.n	80003ac <Align_Motor+0x30>
		else
		{
			Motor_Control.Motor_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
		}
	}
}
 80003aa:	e03e      	b.n	800042a <Align_Motor+0xae>
		Motor_Control.Control_Counter = 0;
 80003ac:	4b20      	ldr	r3, [pc, #128]	; (8000430 <Align_Motor+0xb4>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]
		Set_Motor_State(Trigger_Control_State[Motor_Control.Motor_State_Index], Start_Up.Align_DutyCycle);
 80003b2:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <Align_Motor+0xb4>)
 80003b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003b8:	461a      	mov	r2, r3
 80003ba:	4b20      	ldr	r3, [pc, #128]	; (800043c <Align_Motor+0xc0>)
 80003bc:	5c9b      	ldrb	r3, [r3, r2]
 80003be:	4a1d      	ldr	r2, [pc, #116]	; (8000434 <Align_Motor+0xb8>)
 80003c0:	89d2      	ldrh	r2, [r2, #14]
 80003c2:	4611      	mov	r1, r2
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 f8a9 	bl	800051c <Set_Motor_State>
		if( (Trigger_Control_State[Motor_Control.Motor_State_Index] == State_C_B) && Tour_Counter++ >= Start_Up.Tour*Start_Up.Align_Coefficient)
 80003ca:	4b19      	ldr	r3, [pc, #100]	; (8000430 <Align_Motor+0xb4>)
 80003cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003d0:	461a      	mov	r2, r3
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <Align_Motor+0xc0>)
 80003d4:	5c9b      	ldrb	r3, [r3, r2]
 80003d6:	2b04      	cmp	r3, #4
 80003d8:	d115      	bne.n	8000406 <Align_Motor+0x8a>
 80003da:	4b19      	ldr	r3, [pc, #100]	; (8000440 <Align_Motor+0xc4>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	1c5a      	adds	r2, r3, #1
 80003e0:	4917      	ldr	r1, [pc, #92]	; (8000440 <Align_Motor+0xc4>)
 80003e2:	600a      	str	r2, [r1, #0]
 80003e4:	4a13      	ldr	r2, [pc, #76]	; (8000434 <Align_Motor+0xb8>)
 80003e6:	8852      	ldrh	r2, [r2, #2]
 80003e8:	4611      	mov	r1, r2
 80003ea:	4a12      	ldr	r2, [pc, #72]	; (8000434 <Align_Motor+0xb8>)
 80003ec:	8992      	ldrh	r2, [r2, #12]
 80003ee:	fb02 f201 	mul.w	r2, r2, r1
 80003f2:	4293      	cmp	r3, r2
 80003f4:	db07      	blt.n	8000406 <Align_Motor+0x8a>
			Motor_Control.Drive_Stage = RUN;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <Align_Motor+0xb4>)
 80003f8:	2202      	movs	r2, #2
 80003fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			Tour_Counter = 0;
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <Align_Motor+0xc4>)
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
}
 8000404:	e011      	b.n	800042a <Align_Motor+0xae>
			Motor_Control.Motor_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <Align_Motor+0xb4>)
 8000408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <Align_Motor+0xc8>)
 8000410:	fb83 3102 	smull	r3, r1, r3, r2
 8000414:	17d3      	asrs	r3, r2, #31
 8000416:	1ac9      	subs	r1, r1, r3
 8000418:	460b      	mov	r3, r1
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	440b      	add	r3, r1
 800041e:	005b      	lsls	r3, r3, #1
 8000420:	1ad1      	subs	r1, r2, r3
 8000422:	b2ca      	uxtb	r2, r1
 8000424:	4b02      	ldr	r3, [pc, #8]	; (8000430 <Align_Motor+0xb4>)
 8000426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	200001fc 	.word	0x200001fc
 8000434:	2000016c 	.word	0x2000016c
 8000438:	469c4000 	.word	0x469c4000
 800043c:	08004348 	.word	0x08004348
 8000440:	2000002c 	.word	0x2000002c
 8000444:	2aaaaaab 	.word	0x2aaaaaab

08000448 <Run_Motor>:

void Run_Motor()
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0

	  static uint8_t Next_State_Index = 0;

	  Motor_Control.A_Out = HAL_GPIO_ReadPin(COMP_A_OUT_GPIO_Port, COMP_A_OUT_Pin);
 800044c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f001 fb1e 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000458:	4603      	mov	r3, r0
 800045a:	461a      	mov	r2, r3
 800045c:	4b29      	ldr	r3, [pc, #164]	; (8000504 <Run_Motor+0xbc>)
 800045e:	605a      	str	r2, [r3, #4]
	  Motor_Control.B_Out = HAL_GPIO_ReadPin(COMP_B_OUT_GPIO_Port, COMP_B_OUT_Pin);
 8000460:	2102      	movs	r1, #2
 8000462:	4829      	ldr	r0, [pc, #164]	; (8000508 <Run_Motor+0xc0>)
 8000464:	f001 fb16 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000468:	4603      	mov	r3, r0
 800046a:	461a      	mov	r2, r3
 800046c:	4b25      	ldr	r3, [pc, #148]	; (8000504 <Run_Motor+0xbc>)
 800046e:	609a      	str	r2, [r3, #8]
	  Motor_Control.C_Out = HAL_GPIO_ReadPin(COMP_C_OUT_GPIO_Port, COMP_C_OUT_Pin);
 8000470:	2140      	movs	r1, #64	; 0x40
 8000472:	4826      	ldr	r0, [pc, #152]	; (800050c <Run_Motor+0xc4>)
 8000474:	f001 fb0e 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000478:	4603      	mov	r3, r0
 800047a:	461a      	mov	r2, r3
 800047c:	4b21      	ldr	r3, [pc, #132]	; (8000504 <Run_Motor+0xbc>)
 800047e:	60da      	str	r2, [r3, #12]

	  Motor_Control.Rotor_Position = (Motor_Control.C_Out << 2) + (Motor_Control.B_Out << 1) + (Motor_Control.A_Out);
 8000480:	4b20      	ldr	r3, [pc, #128]	; (8000504 <Run_Motor+0xbc>)
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	b2db      	uxtb	r3, r3
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	b2da      	uxtb	r2, r3
 800048a:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <Run_Motor+0xbc>)
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	b2db      	uxtb	r3, r3
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	b2db      	uxtb	r3, r3
 8000494:	4413      	add	r3, r2
 8000496:	b2da      	uxtb	r2, r3
 8000498:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <Run_Motor+0xbc>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4413      	add	r3, r2
 80004a0:	b2da      	uxtb	r2, r3
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <Run_Motor+0xbc>)
 80004a4:	70da      	strb	r2, [r3, #3]

	  Next_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <Run_Motor+0xbc>)
 80004a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80004ac:	1c5a      	adds	r2, r3, #1
 80004ae:	4b18      	ldr	r3, [pc, #96]	; (8000510 <Run_Motor+0xc8>)
 80004b0:	fb83 3102 	smull	r3, r1, r3, r2
 80004b4:	17d3      	asrs	r3, r2, #31
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	460b      	mov	r3, r1
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	440b      	add	r3, r1
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	1ad1      	subs	r1, r2, r3
 80004c2:	b2ca      	uxtb	r2, r1
 80004c4:	4b13      	ldr	r3, [pc, #76]	; (8000514 <Run_Motor+0xcc>)
 80004c6:	701a      	strb	r2, [r3, #0]

	  if(Motor_Control.Rotor_Position == Trigger_Control_State[Next_State_Index])
 80004c8:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <Run_Motor+0xbc>)
 80004ca:	78da      	ldrb	r2, [r3, #3]
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <Run_Motor+0xcc>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4619      	mov	r1, r3
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <Run_Motor+0xd0>)
 80004d4:	5c5b      	ldrb	r3, [r3, r1]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d111      	bne.n	80004fe <Run_Motor+0xb6>
	  {
		  Motor_Control.Motor_State_Index = Next_State_Index;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <Run_Motor+0xcc>)
 80004dc:	781a      	ldrb	r2, [r3, #0]
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <Run_Motor+0xbc>)
 80004e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		  Set_Motor_State(Trigger_Control_State[Motor_Control.Motor_State_Index], Motor_Control.Duty_Cycle);
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <Run_Motor+0xbc>)
 80004e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <Run_Motor+0xd0>)
 80004ee:	5c9b      	ldrb	r3, [r3, r2]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <Run_Motor+0xbc>)
 80004f2:	7892      	ldrb	r2, [r2, #2]
 80004f4:	b292      	uxth	r2, r2
 80004f6:	4611      	mov	r1, r2
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f80f 	bl	800051c <Set_Motor_State>
	  }

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	200001fc 	.word	0x200001fc
 8000508:	48000400 	.word	0x48000400
 800050c:	48000800 	.word	0x48000800
 8000510:	2aaaaaab 	.word	0x2aaaaaab
 8000514:	20000030 	.word	0x20000030
 8000518:	08004348 	.word	0x08004348

0800051c <Set_Motor_State>:

void Set_Motor_State(uint8_t State, uint16_t DutyCycle)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	460a      	mov	r2, r1
 8000526:	71fb      	strb	r3, [r7, #7]
 8000528:	4613      	mov	r3, r2
 800052a:	80bb      	strh	r3, [r7, #4]
	Motor_Control.Signal = (htim1.Init.Period+1)*DutyCycle/100;	// CCR
 800052c:	4b79      	ldr	r3, [pc, #484]	; (8000714 <Set_Motor_State+0x1f8>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	3301      	adds	r3, #1
 8000532:	88ba      	ldrh	r2, [r7, #4]
 8000534:	fb02 f303 	mul.w	r3, r2, r3
 8000538:	4a77      	ldr	r2, [pc, #476]	; (8000718 <Set_Motor_State+0x1fc>)
 800053a:	fba2 2303 	umull	r2, r3, r2, r3
 800053e:	095b      	lsrs	r3, r3, #5
 8000540:	4a76      	ldr	r2, [pc, #472]	; (800071c <Set_Motor_State+0x200>)
 8000542:	6113      	str	r3, [r2, #16]
	Motor_Control.Max_Signal = htim1.Init.Period+1;				// ARR
 8000544:	4b73      	ldr	r3, [pc, #460]	; (8000714 <Set_Motor_State+0x1f8>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	3301      	adds	r3, #1
 800054a:	4a74      	ldr	r2, [pc, #464]	; (800071c <Set_Motor_State+0x200>)
 800054c:	6153      	str	r3, [r2, #20]

	switch(State)
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	3b01      	subs	r3, #1
 8000552:	2b05      	cmp	r3, #5
 8000554:	f200 80d6 	bhi.w	8000704 <Set_Motor_State+0x1e8>
 8000558:	a201      	add	r2, pc, #4	; (adr r2, 8000560 <Set_Motor_State+0x44>)
 800055a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055e:	bf00      	nop
 8000560:	080005bb 	.word	0x080005bb
 8000564:	0800063f 	.word	0x0800063f
 8000568:	080005fd 	.word	0x080005fd
 800056c:	080006c3 	.word	0x080006c3
 8000570:	08000579 	.word	0x08000579
 8000574:	08000681 	.word	0x08000681
	{

		case State_A_B:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 8000578:	4b69      	ldr	r3, [pc, #420]	; (8000720 <Set_Motor_State+0x204>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2200      	movs	r2, #0
 800057e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 8000580:	4b67      	ldr	r3, [pc, #412]	; (8000720 <Set_Motor_State+0x204>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000588:	4b62      	ldr	r3, [pc, #392]	; (8000714 <Set_Motor_State+0x1f8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2200      	movs	r2, #0
 800058e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000590:	4b60      	ldr	r3, [pc, #384]	; (8000714 <Set_Motor_State+0x1f8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2200      	movs	r2, #0
 8000596:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,Motor_Control.Signal);		// A HIGH ACTIVE
 8000598:	4b5e      	ldr	r3, [pc, #376]	; (8000714 <Set_Motor_State+0x1f8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a5f      	ldr	r2, [pc, #380]	; (800071c <Set_Motor_State+0x200>)
 800059e:	6912      	ldr	r2, [r2, #16]
 80005a0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,Motor_Control.Max_Signal);	// B LOW AVTIVE
 80005a2:	4b5f      	ldr	r3, [pc, #380]	; (8000720 <Set_Motor_State+0x204>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a5d      	ldr	r2, [pc, #372]	; (800071c <Set_Motor_State+0x200>)
 80005a8:	6952      	ldr	r2, [r2, #20]
 80005aa:	639a      	str	r2, [r3, #56]	; 0x38

			Motor_Control.Pulse_Center = htim1.Instance->CCR1 / 2;
 80005ac:	4b59      	ldr	r3, [pc, #356]	; (8000714 <Set_Motor_State+0x1f8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b2:	085b      	lsrs	r3, r3, #1
 80005b4:	4a59      	ldr	r2, [pc, #356]	; (800071c <Set_Motor_State+0x200>)
 80005b6:	6193      	str	r3, [r2, #24]

			break;
 80005b8:	e0a5      	b.n	8000706 <Set_Motor_State+0x1ea>

		case State_A_C:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 80005ba:	4b59      	ldr	r3, [pc, #356]	; (8000720 <Set_Motor_State+0x204>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2200      	movs	r2, #0
 80005c0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 80005c2:	4b57      	ldr	r3, [pc, #348]	; (8000720 <Set_Motor_State+0x204>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2200      	movs	r2, #0
 80005c8:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80005ca:	4b52      	ldr	r3, [pc, #328]	; (8000714 <Set_Motor_State+0x1f8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2200      	movs	r2, #0
 80005d0:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80005d2:	4b50      	ldr	r3, [pc, #320]	; (8000714 <Set_Motor_State+0x1f8>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2200      	movs	r2, #0
 80005d8:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,Motor_Control.Signal);		// A HIGH ACTIVE
 80005da:	4b4e      	ldr	r3, [pc, #312]	; (8000714 <Set_Motor_State+0x1f8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a4f      	ldr	r2, [pc, #316]	; (800071c <Set_Motor_State+0x200>)
 80005e0:	6912      	ldr	r2, [r2, #16]
 80005e2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,Motor_Control.Max_Signal);	// C LOW ACTIVE
 80005e4:	4b4e      	ldr	r3, [pc, #312]	; (8000720 <Set_Motor_State+0x204>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a4c      	ldr	r2, [pc, #304]	; (800071c <Set_Motor_State+0x200>)
 80005ea:	6952      	ldr	r2, [r2, #20]
 80005ec:	63da      	str	r2, [r3, #60]	; 0x3c

			Motor_Control.Pulse_Center = htim1.Instance->CCR1 / 2;
 80005ee:	4b49      	ldr	r3, [pc, #292]	; (8000714 <Set_Motor_State+0x1f8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f4:	085b      	lsrs	r3, r3, #1
 80005f6:	4a49      	ldr	r2, [pc, #292]	; (800071c <Set_Motor_State+0x200>)
 80005f8:	6193      	str	r3, [r2, #24]

			break;
 80005fa:	e084      	b.n	8000706 <Set_Motor_State+0x1ea>

		case State_B_C:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 80005fc:	4b48      	ldr	r3, [pc, #288]	; (8000720 <Set_Motor_State+0x204>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2200      	movs	r2, #0
 8000602:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 8000604:	4b46      	ldr	r3, [pc, #280]	; (8000720 <Set_Motor_State+0x204>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2200      	movs	r2, #0
 800060a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 800060c:	4b41      	ldr	r3, [pc, #260]	; (8000714 <Set_Motor_State+0x1f8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2200      	movs	r2, #0
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000614:	4b3f      	ldr	r3, [pc, #252]	; (8000714 <Set_Motor_State+0x1f8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2200      	movs	r2, #0
 800061a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Motor_Control.Signal);		// B HIGH ACTIVE
 800061c:	4b3d      	ldr	r3, [pc, #244]	; (8000714 <Set_Motor_State+0x1f8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a3e      	ldr	r2, [pc, #248]	; (800071c <Set_Motor_State+0x200>)
 8000622:	6912      	ldr	r2, [r2, #16]
 8000624:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,Motor_Control.Max_Signal);	// C LOW ACTIVE
 8000626:	4b3e      	ldr	r3, [pc, #248]	; (8000720 <Set_Motor_State+0x204>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a3c      	ldr	r2, [pc, #240]	; (800071c <Set_Motor_State+0x200>)
 800062c:	6952      	ldr	r2, [r2, #20]
 800062e:	63da      	str	r2, [r3, #60]	; 0x3c

			Motor_Control.Pulse_Center = htim1.Instance->CCR2 / 2;
 8000630:	4b38      	ldr	r3, [pc, #224]	; (8000714 <Set_Motor_State+0x1f8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000636:	085b      	lsrs	r3, r3, #1
 8000638:	4a38      	ldr	r2, [pc, #224]	; (800071c <Set_Motor_State+0x200>)
 800063a:	6193      	str	r3, [r2, #24]

			break;
 800063c:	e063      	b.n	8000706 <Set_Motor_State+0x1ea>

		case State_B_A:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 800063e:	4b38      	ldr	r3, [pc, #224]	; (8000720 <Set_Motor_State+0x204>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2200      	movs	r2, #0
 8000644:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 8000646:	4b36      	ldr	r3, [pc, #216]	; (8000720 <Set_Motor_State+0x204>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2200      	movs	r2, #0
 800064c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 800064e:	4b31      	ldr	r3, [pc, #196]	; (8000714 <Set_Motor_State+0x1f8>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2200      	movs	r2, #0
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000656:	4b2f      	ldr	r3, [pc, #188]	; (8000714 <Set_Motor_State+0x1f8>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2200      	movs	r2, #0
 800065c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Motor_Control.Signal);	// B HIGH ACTIVE
 800065e:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <Set_Motor_State+0x1f8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a2e      	ldr	r2, [pc, #184]	; (800071c <Set_Motor_State+0x200>)
 8000664:	6912      	ldr	r2, [r2, #16]
 8000666:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,Motor_Control.Max_Signal);	// A LOW ACTIVE
 8000668:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <Set_Motor_State+0x204>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a2b      	ldr	r2, [pc, #172]	; (800071c <Set_Motor_State+0x200>)
 800066e:	6952      	ldr	r2, [r2, #20]
 8000670:	635a      	str	r2, [r3, #52]	; 0x34

			Motor_Control.Pulse_Center = htim1.Instance->CCR2 / 2;
 8000672:	4b28      	ldr	r3, [pc, #160]	; (8000714 <Set_Motor_State+0x1f8>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	4a28      	ldr	r2, [pc, #160]	; (800071c <Set_Motor_State+0x200>)
 800067c:	6193      	str	r3, [r2, #24]

			break;
 800067e:	e042      	b.n	8000706 <Set_Motor_State+0x1ea>

		case State_C_A:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <Set_Motor_State+0x204>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2200      	movs	r2, #0
 8000686:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <Set_Motor_State+0x204>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <Set_Motor_State+0x1f8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2200      	movs	r2, #0
 8000696:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <Set_Motor_State+0x1f8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2200      	movs	r2, #0
 800069e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,Motor_Control.Signal);	// C HIGH ACTIVE
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <Set_Motor_State+0x1f8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a1d      	ldr	r2, [pc, #116]	; (800071c <Set_Motor_State+0x200>)
 80006a6:	6912      	ldr	r2, [r2, #16]
 80006a8:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,Motor_Control.Max_Signal);	// A LOW ACTIVE
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <Set_Motor_State+0x204>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a1b      	ldr	r2, [pc, #108]	; (800071c <Set_Motor_State+0x200>)
 80006b0:	6952      	ldr	r2, [r2, #20]
 80006b2:	635a      	str	r2, [r3, #52]	; 0x34

			Motor_Control.Pulse_Center = htim1.Instance->CCR3 / 2;
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <Set_Motor_State+0x1f8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ba:	085b      	lsrs	r3, r3, #1
 80006bc:	4a17      	ldr	r2, [pc, #92]	; (800071c <Set_Motor_State+0x200>)
 80006be:	6193      	str	r3, [r2, #24]

			break;
 80006c0:	e021      	b.n	8000706 <Set_Motor_State+0x1ea>

		case State_C_B:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <Set_Motor_State+0x204>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2200      	movs	r2, #0
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <Set_Motor_State+0x204>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2200      	movs	r2, #0
 80006d0:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <Set_Motor_State+0x1f8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2200      	movs	r2, #0
 80006d8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <Set_Motor_State+0x1f8>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2200      	movs	r2, #0
 80006e0:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,Motor_Control.Signal);	// C HIGH ACTIVE
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <Set_Motor_State+0x1f8>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a0d      	ldr	r2, [pc, #52]	; (800071c <Set_Motor_State+0x200>)
 80006e8:	6912      	ldr	r2, [r2, #16]
 80006ea:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,Motor_Control.Max_Signal);	// B LOW ACTIVE
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <Set_Motor_State+0x204>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a0a      	ldr	r2, [pc, #40]	; (800071c <Set_Motor_State+0x200>)
 80006f2:	6952      	ldr	r2, [r2, #20]
 80006f4:	639a      	str	r2, [r3, #56]	; 0x38

			Motor_Control.Pulse_Center = htim1.Instance->CCR3 / 2;
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <Set_Motor_State+0x1f8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006fc:	085b      	lsrs	r3, r3, #1
 80006fe:	4a07      	ldr	r2, [pc, #28]	; (800071c <Set_Motor_State+0x200>)
 8000700:	6193      	str	r3, [r2, #24]

			break;
 8000702:	e000      	b.n	8000706 <Set_Motor_State+0x1ea>

		default:
			break;
 8000704:	bf00      	nop

	}
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000120 	.word	0x20000120
 8000718:	51eb851f 	.word	0x51eb851f
 800071c:	200001fc 	.word	0x200001fc
 8000720:	200001ac 	.word	0x200001ac

08000724 <HAL_TIM_PeriodElapsedCallback>:
#include "TimeTask.h"
#include "SixStepCommutation.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	if(htim == &htim15)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d115      	bne.n	8000760 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		timerCounter++;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800073c:	6013      	str	r3, [r2, #0]
//		if(timerCounter % 20 == 1 )
//		{
//			Time.Task.Hz_50 = 1;
//		}

		if(timerCounter % 200 == 1 )
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000744:	fba3 1302 	umull	r1, r3, r3, r2
 8000748:	099b      	lsrs	r3, r3, #6
 800074a:	21c8      	movs	r1, #200	; 0xc8
 800074c:	fb01 f303 	mul.w	r3, r1, r3
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	2b01      	cmp	r3, #1
 8000754:	d104      	bne.n	8000760 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			Time.Task.Hz_5 = 1;
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000758:	7813      	ldrb	r3, [r2, #0]
 800075a:	f043 0310 	orr.w	r3, r3, #16
 800075e:	7013      	strb	r3, [r2, #0]
//		{
//			Time.Task.Hz_100 = 1;
//		}

	}
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	20000070 	.word	0x20000070
 8000770:	2000011c 	.word	0x2000011c
 8000774:	51eb851f 	.word	0x51eb851f
 8000778:	200001f8 	.word	0x200001f8

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000780:	f000 fd5a 	bl	8001238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000784:	f000 f8ba 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000788:	f000 faee 	bl	8000d68 <MX_GPIO_Init>
  MX_COMP2_Init();
 800078c:	f000 f914 	bl	80009b8 <MX_COMP2_Init>
  MX_COMP4_Init();
 8000790:	f000 f938 	bl	8000a04 <MX_COMP4_Init>
  MX_COMP6_Init();
 8000794:	f000 f95c 	bl	8000a50 <MX_COMP6_Init>
  MX_TIM1_Init();
 8000798:	f000 f980 	bl	8000a9c <MX_TIM1_Init>
  MX_TIM2_Init();
 800079c:	f000 fa24 	bl	8000be8 <MX_TIM2_Init>
  MX_TIM15_Init();
 80007a0:	f000 fa90 	bl	8000cc4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  PeripheralsStart();
 80007a4:	f7ff fd10 	bl	80001c8 <PeripheralsStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Motor_Control.System_Enable == 1)
 80007a8:	4b4c      	ldr	r3, [pc, #304]	; (80008dc <main+0x160>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	f040 808f 	bne.w	80008d0 <main+0x154>
	  {

		  if(htim1.Instance->CNT == Motor_Control.Pulse_Center)
 80007b2:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <main+0x164>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007b8:	4b48      	ldr	r3, [pc, #288]	; (80008dc <main+0x160>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d1f3      	bne.n	80007a8 <main+0x2c>
		  {

			  if(Motor_Control.Blinde_Mode != 1)
 80007c0:	4b46      	ldr	r3, [pc, #280]	; (80008dc <main+0x160>)
 80007c2:	785b      	ldrb	r3, [r3, #1]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d014      	beq.n	80007f2 <main+0x76>
			  {

				  switch(Motor_Control.Drive_Stage)
 80007c8:	4b44      	ldr	r3, [pc, #272]	; (80008dc <main+0x160>)
 80007ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d00c      	beq.n	80007ec <main+0x70>
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	dc7f      	bgt.n	80008d6 <main+0x15a>
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d002      	beq.n	80007e0 <main+0x64>
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d003      	beq.n	80007e6 <main+0x6a>

						  break;
					  }

					  default:
						  break;
 80007de:	e07a      	b.n	80008d6 <main+0x15a>
						  Start_Up_Motor();
 80007e0:	f7ff fd6a 	bl	80002b8 <Start_Up_Motor>
						  break;
 80007e4:	e078      	b.n	80008d8 <main+0x15c>
						  Align_Motor();
 80007e6:	f7ff fdc9 	bl	800037c <Align_Motor>
						  break;
 80007ea:	e075      	b.n	80008d8 <main+0x15c>
						  Run_Motor();
 80007ec:	f7ff fe2c 	bl	8000448 <Run_Motor>
						  break;
 80007f0:	e072      	b.n	80008d8 <main+0x15c>
				  }
			  }

			  else
			  {
				  if(Motor_Control.Blinde_Mode_Counter++ >= MOTOR_CONTROL_TASK_HZ*(float)(1.0f/(Motor_Control.Blinde_Mode_RPM*6)))
 80007f2:	4b3a      	ldr	r3, [pc, #232]	; (80008dc <main+0x160>)
 80007f4:	6a1a      	ldr	r2, [r3, #32]
 80007f6:	1c53      	adds	r3, r2, #1
 80007f8:	4938      	ldr	r1, [pc, #224]	; (80008dc <main+0x160>)
 80007fa:	620b      	str	r3, [r1, #32]
 80007fc:	ee07 2a90 	vmov	s15, r2
 8000800:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000804:	4b35      	ldr	r3, [pc, #212]	; (80008dc <main+0x160>)
 8000806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000808:	4613      	mov	r3, r2
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	4413      	add	r3, r2
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	ee07 3a90 	vmov	s15, r3
 8000814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000818:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800081c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000820:	eddf 6a30 	vldr	s13, [pc, #192]	; 80008e4 <main+0x168>
 8000824:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800082c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000830:	db52      	blt.n	80008d8 <main+0x15c>
				  {
					  Motor_Control.Blinde_Mode_Counter = 0;
 8000832:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <main+0x160>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]

					  Motor_Control.A_Out = HAL_GPIO_ReadPin(COMP_A_OUT_GPIO_Port, COMP_A_OUT_Pin);
 8000838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800083c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000840:	f001 f928 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	4b24      	ldr	r3, [pc, #144]	; (80008dc <main+0x160>)
 800084a:	605a      	str	r2, [r3, #4]
					  Motor_Control.B_Out = HAL_GPIO_ReadPin(COMP_B_OUT_GPIO_Port, COMP_B_OUT_Pin);
 800084c:	2102      	movs	r1, #2
 800084e:	4826      	ldr	r0, [pc, #152]	; (80008e8 <main+0x16c>)
 8000850:	f001 f920 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	4b20      	ldr	r3, [pc, #128]	; (80008dc <main+0x160>)
 800085a:	609a      	str	r2, [r3, #8]
					  Motor_Control.C_Out = HAL_GPIO_ReadPin(COMP_C_OUT_GPIO_Port, COMP_C_OUT_Pin);
 800085c:	2140      	movs	r1, #64	; 0x40
 800085e:	4823      	ldr	r0, [pc, #140]	; (80008ec <main+0x170>)
 8000860:	f001 f918 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <main+0x160>)
 800086a:	60da      	str	r2, [r3, #12]

					  Motor_Control.Rotor_Position = (Motor_Control.C_Out << 2) + (Motor_Control.B_Out << 1) + (Motor_Control.A_Out);
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <main+0x160>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <main+0x160>)
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4413      	add	r3, r2
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <main+0x160>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4413      	add	r3, r2
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <main+0x160>)
 8000890:	70da      	strb	r2, [r3, #3]

					  static int h = 0;
					  Set_Motor_State(Trigger_Control_State[h], Motor_Control.Duty_Cycle);
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <main+0x174>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <main+0x178>)
 8000898:	5cd3      	ldrb	r3, [r2, r3]
 800089a:	4a10      	ldr	r2, [pc, #64]	; (80008dc <main+0x160>)
 800089c:	7892      	ldrb	r2, [r2, #2]
 800089e:	b292      	uxth	r2, r2
 80008a0:	4611      	mov	r1, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fe3a 	bl	800051c <Set_Motor_State>
					  h = (h+1) % 6;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <main+0x174>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	1c59      	adds	r1, r3, #1
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <main+0x17c>)
 80008b0:	fb83 3201 	smull	r3, r2, r3, r1
 80008b4:	17cb      	asrs	r3, r1, #31
 80008b6:	1ad2      	subs	r2, r2, r3
 80008b8:	4613      	mov	r3, r2
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	4413      	add	r3, r2
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1aca      	subs	r2, r1, r3
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <main+0x174>)
 80008c4:	601a      	str	r2, [r3, #0]

					  Motor_Control.Drive_Stage = START_UP;
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <main+0x160>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80008ce:	e76b      	b.n	80007a8 <main+0x2c>

	  }

	  else
	  {
		  Stop_Motor();
 80008d0:	f7ff fcc8 	bl	8000264 <Stop_Motor>
 80008d4:	e768      	b.n	80007a8 <main+0x2c>
						  break;
 80008d6:	bf00      	nop
	  if(Motor_Control.System_Enable == 1)
 80008d8:	e766      	b.n	80007a8 <main+0x2c>
 80008da:	bf00      	nop
 80008dc:	200001fc 	.word	0x200001fc
 80008e0:	20000120 	.word	0x20000120
 80008e4:	469c4000 	.word	0x469c4000
 80008e8:	48000400 	.word	0x48000400
 80008ec:	48000800 	.word	0x48000800
 80008f0:	20000034 	.word	0x20000034
 80008f4:	08004348 	.word	0x08004348
 80008f8:	2aaaaaab 	.word	0x2aaaaaab

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b09c      	sub	sp, #112	; 0x70
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000906:	2228      	movs	r2, #40	; 0x28
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f003 fd08 	bl	8004320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000920:	463b      	mov	r3, r7
 8000922:	2234      	movs	r2, #52	; 0x34
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f003 fcfa 	bl	8004320 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092c:	2301      	movs	r3, #1
 800092e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000934:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093a:	2301      	movs	r3, #1
 800093c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000946:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000948:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800094c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000952:	4618      	mov	r0, r3
 8000954:	f001 f8b6 	bl	8001ac4 <HAL_RCC_OscConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800095e:	f000 fa3f 	bl	8000de0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	230f      	movs	r3, #15
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000966:	2302      	movs	r3, #2
 8000968:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000972:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000978:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800097c:	2102      	movs	r1, #2
 800097e:	4618      	mov	r0, r3
 8000980:	f001 ffa8 	bl	80028d4 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800098a:	f000 fa29 	bl	8000de0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15;
 800098e:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8000992:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 f97e 	bl	8002ca0 <HAL_RCCEx_PeriphCLKConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80009aa:	f000 fa19 	bl	8000de0 <Error_Handler>
  }
}
 80009ae:	bf00      	nop
 80009b0:	3770      	adds	r7, #112	; 0x70
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_COMP2_Init+0x44>)
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <MX_COMP2_Init+0x48>)
 80009c0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_COMP2_Init+0x44>)
 80009c4:	2260      	movs	r2, #96	; 0x60
 80009c6:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_COMP2_Init+0x44>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_COMP2_Init+0x44>)
 80009d0:	222a      	movs	r2, #42	; 0x2a
 80009d2:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_COMP2_Init+0x44>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_COMP2_Init+0x44>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_COMP2_Init+0x44>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_COMP2_Init+0x44>)
 80009e8:	f000 fc8c 	bl	8001304 <HAL_COMP_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 80009f2:	f000 f9f5 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000017c 	.word	0x2000017c
 8000a00:	40010020 	.word	0x40010020

08000a04 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_COMP4_Init+0x44>)
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <MX_COMP4_Init+0x48>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_COMP4_Init+0x44>)
 8000a10:	2260      	movs	r2, #96	; 0x60
 8000a12:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_COMP4_Init+0x44>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_NONE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_COMP4_Init+0x44>)
 8000a1c:	222a      	movs	r2, #42	; 0x2a
 8000a1e:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_COMP4_Init+0x44>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_COMP4_Init+0x44>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_COMP4_Init+0x44>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_COMP4_Init+0x44>)
 8000a34:	f000 fc66 	bl	8001304 <HAL_COMP_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_COMP4_Init+0x3e>
  {
    Error_Handler();
 8000a3e:	f000 f9cf 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000ec 	.word	0x200000ec
 8000a4c:	40010028 	.word	0x40010028

08000a50 <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_COMP6_Init+0x44>)
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <MX_COMP6_Init+0x48>)
 8000a58:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InvertingInput = COMP_INVERTINGINPUT_IO1;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_COMP6_Init+0x44>)
 8000a5c:	2260      	movs	r2, #96	; 0x60
 8000a5e:	605a      	str	r2, [r3, #4]
  hcomp6.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_COMP6_Init+0x44>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  hcomp6.Init.Output = COMP_OUTPUT_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_COMP6_Init+0x44>)
 8000a68:	222a      	movs	r2, #42	; 0x2a
 8000a6a:	60da      	str	r2, [r3, #12]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_COMP6_Init+0x44>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_COMP6_Init+0x44>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_COMP6_Init+0x44>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_COMP6_Init+0x44>)
 8000a80:	f000 fc40 	bl	8001304 <HAL_COMP_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_COMP6_Init+0x3e>
  {
    Error_Handler();
 8000a8a:	f000 f9a9 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000bc 	.word	0x200000bc
 8000a98:	40010030 	.word	0x40010030

08000a9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b096      	sub	sp, #88	; 0x58
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
 8000abe:	615a      	str	r2, [r3, #20]
 8000ac0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	222c      	movs	r2, #44	; 0x2c
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f003 fc29 	bl	8004320 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ace:	4b44      	ldr	r3, [pc, #272]	; (8000be0 <MX_TIM1_Init+0x144>)
 8000ad0:	4a44      	ldr	r2, [pc, #272]	; (8000be4 <MX_TIM1_Init+0x148>)
 8000ad2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000ad4:	4b42      	ldr	r3, [pc, #264]	; (8000be0 <MX_TIM1_Init+0x144>)
 8000ad6:	2247      	movs	r2, #71	; 0x47
 8000ad8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ada:	4b41      	ldr	r3, [pc, #260]	; (8000be0 <MX_TIM1_Init+0x144>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 8000ae0:	4b3f      	ldr	r3, [pc, #252]	; (8000be0 <MX_TIM1_Init+0x144>)
 8000ae2:	2231      	movs	r2, #49	; 0x31
 8000ae4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae6:	4b3e      	ldr	r3, [pc, #248]	; (8000be0 <MX_TIM1_Init+0x144>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aec:	4b3c      	ldr	r3, [pc, #240]	; (8000be0 <MX_TIM1_Init+0x144>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af2:	4b3b      	ldr	r3, [pc, #236]	; (8000be0 <MX_TIM1_Init+0x144>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000af8:	4839      	ldr	r0, [pc, #228]	; (8000be0 <MX_TIM1_Init+0x144>)
 8000afa:	f002 faba 	bl	8003072 <HAL_TIM_PWM_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000b04:	f000 f96c 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4831      	ldr	r0, [pc, #196]	; (8000be0 <MX_TIM1_Init+0x144>)
 8000b1c:	f003 fae0 	bl	80040e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000b26:	f000 f95b 	bl	8000de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b2a:	2360      	movs	r3, #96	; 0x60
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b32:	2300      	movs	r3, #0
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b36:	2300      	movs	r3, #0
 8000b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4824      	ldr	r0, [pc, #144]	; (8000be0 <MX_TIM1_Init+0x144>)
 8000b50:	f002 fcec 	bl	800352c <HAL_TIM_PWM_ConfigChannel>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b5a:	f000 f941 	bl	8000de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b62:	2204      	movs	r2, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	481e      	ldr	r0, [pc, #120]	; (8000be0 <MX_TIM1_Init+0x144>)
 8000b68:	f002 fce0 	bl	800352c <HAL_TIM_PWM_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000b72:	f000 f935 	bl	8000de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b7a:	2208      	movs	r2, #8
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4818      	ldr	r0, [pc, #96]	; (8000be0 <MX_TIM1_Init+0x144>)
 8000b80:	f002 fcd4 	bl	800352c <HAL_TIM_PWM_ConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000b8a:	f000 f929 	bl	8000de0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ba2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4807      	ldr	r0, [pc, #28]	; (8000be0 <MX_TIM1_Init+0x144>)
 8000bc4:	f003 faf2 	bl	80041ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000bce:	f000 f907 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bd2:	4803      	ldr	r0, [pc, #12]	; (8000be0 <MX_TIM1_Init+0x144>)
 8000bd4:	f000 fa42 	bl	800105c <HAL_TIM_MspPostInit>

}
 8000bd8:	bf00      	nop
 8000bda:	3758      	adds	r7, #88	; 0x58
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000120 	.word	0x20000120
 8000be4:	40012c00 	.word	0x40012c00

08000be8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <MX_TIM2_Init+0xd8>)
 8000c0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000c14:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <MX_TIM2_Init+0xd8>)
 8000c16:	2247      	movs	r2, #71	; 0x47
 8000c18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <MX_TIM2_Init+0xd8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 8000c20:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <MX_TIM2_Init+0xd8>)
 8000c22:	2231      	movs	r2, #49	; 0x31
 8000c24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c26:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <MX_TIM2_Init+0xd8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2c:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <MX_TIM2_Init+0xd8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c32:	4823      	ldr	r0, [pc, #140]	; (8000cc0 <MX_TIM2_Init+0xd8>)
 8000c34:	f002 fa1d 	bl	8003072 <HAL_TIM_PWM_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c3e:	f000 f8cf 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	481b      	ldr	r0, [pc, #108]	; (8000cc0 <MX_TIM2_Init+0xd8>)
 8000c52:	f003 fa45 	bl	80040e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c5c:	f000 f8c0 	bl	8000de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c60:	2360      	movs	r3, #96	; 0x60
 8000c62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	2200      	movs	r2, #0
 8000c74:	4619      	mov	r1, r3
 8000c76:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <MX_TIM2_Init+0xd8>)
 8000c78:	f002 fc58 	bl	800352c <HAL_TIM_PWM_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000c82:	f000 f8ad 	bl	8000de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c86:	463b      	mov	r3, r7
 8000c88:	2204      	movs	r2, #4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <MX_TIM2_Init+0xd8>)
 8000c8e:	f002 fc4d 	bl	800352c <HAL_TIM_PWM_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c98:	f000 f8a2 	bl	8000de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <MX_TIM2_Init+0xd8>)
 8000ca4:	f002 fc42 	bl	800352c <HAL_TIM_PWM_ConfigChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000cae:	f000 f897 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cb2:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <MX_TIM2_Init+0xd8>)
 8000cb4:	f000 f9d2 	bl	800105c <HAL_TIM_MspPostInit>

}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	; 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200001ac 	.word	0x200001ac

08000cc4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <MX_TIM15_Init+0x9c>)
 8000ce4:	4a1f      	ldr	r2, [pc, #124]	; (8000d64 <MX_TIM15_Init+0xa0>)
 8000ce6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 71;
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <MX_TIM15_Init+0x9c>)
 8000cea:	2247      	movs	r2, #71	; 0x47
 8000cec:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <MX_TIM15_Init+0x9c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_TIM15_Init+0x9c>)
 8000cf6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cfa:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_TIM15_Init+0x9c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_TIM15_Init+0x9c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_TIM15_Init+0x9c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <MX_TIM15_Init+0x9c>)
 8000d10:	f002 f958 	bl	8002fc4 <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000d1a:	f000 f861 	bl	8000de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <MX_TIM15_Init+0x9c>)
 8000d2c:	f002 fd12 	bl	8003754 <HAL_TIM_ConfigClockSource>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000d36:	f000 f853 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	4619      	mov	r1, r3
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <MX_TIM15_Init+0x9c>)
 8000d48:	f003 f9ca 	bl	80040e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000d52:	f000 f845 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000070 	.word	0x20000070
 8000d64:	40014000 	.word	0x40014000

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_GPIO_Init+0x74>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <MX_GPIO_Init+0x74>)
 8000d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d78:	6153      	str	r3, [r2, #20]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_GPIO_Init+0x74>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_GPIO_Init+0x74>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <MX_GPIO_Init+0x74>)
 8000d8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d90:	6153      	str	r3, [r2, #20]
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_GPIO_Init+0x74>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_GPIO_Init+0x74>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <MX_GPIO_Init+0x74>)
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	6153      	str	r3, [r2, #20]
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_GPIO_Init+0x74>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_GPIO_Init+0x74>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <MX_GPIO_Init+0x74>)
 8000dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc0:	6153      	str	r3, [r2, #20]
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_GPIO_Init+0x74>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

}
 8000dce:	bf00      	nop
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_MspInit+0x44>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <HAL_MspInit+0x44>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6193      	str	r3, [r2, #24]
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HAL_MspInit+0x44>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_MspInit+0x44>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <HAL_MspInit+0x44>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	61d3      	str	r3, [r2, #28]
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_MspInit+0x44>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e22:	2007      	movs	r0, #7
 8000e24:	f000 fc82 	bl	800172c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a4d      	ldr	r2, [pc, #308]	; (8000f88 <HAL_COMP_MspInit+0x154>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d12b      	bne.n	8000eae <HAL_COMP_MspInit+0x7a>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b4d      	ldr	r3, [pc, #308]	; (8000f8c <HAL_COMP_MspInit+0x158>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	4a4c      	ldr	r2, [pc, #304]	; (8000f8c <HAL_COMP_MspInit+0x158>)
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	6153      	str	r3, [r2, #20]
 8000e62:	4b4a      	ldr	r3, [pc, #296]	; (8000f8c <HAL_COMP_MspInit+0x158>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	61bb      	str	r3, [r7, #24]
 8000e6c:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA2     ------> COMP2_INM
    PA7     ------> COMP2_INP
    PA12     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = COMP_A_INM_Pin|COMP_A_INP_Pin;
 8000e6e:	2384      	movs	r3, #132	; 0x84
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e72:	2303      	movs	r3, #3
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e84:	f000 fc94 	bl	80017b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = COMP_A_OUT_Pin;
 8000e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_GPCOMP2;
 8000e9a:	2308      	movs	r3, #8
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COMP_A_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea8:	f000 fc82 	bl	80017b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 8000eac:	e067      	b.n	8000f7e <HAL_COMP_MspInit+0x14a>
  else if(hcomp->Instance==COMP4)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a37      	ldr	r2, [pc, #220]	; (8000f90 <HAL_COMP_MspInit+0x15c>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d128      	bne.n	8000f0a <HAL_COMP_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	4b34      	ldr	r3, [pc, #208]	; (8000f8c <HAL_COMP_MspInit+0x158>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	4a33      	ldr	r2, [pc, #204]	; (8000f8c <HAL_COMP_MspInit+0x158>)
 8000ebe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec2:	6153      	str	r3, [r2, #20]
 8000ec4:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <HAL_COMP_MspInit+0x158>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = COMP_B_INP_Pin|COMP_B_INM_Pin;
 8000ed0:	2305      	movs	r3, #5
 8000ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	482c      	ldr	r0, [pc, #176]	; (8000f94 <HAL_COMP_MspInit+0x160>)
 8000ee4:	f000 fc64 	bl	80017b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = COMP_B_OUT_Pin;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_GPCOMP4;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COMP_B_OUT_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	4824      	ldr	r0, [pc, #144]	; (8000f94 <HAL_COMP_MspInit+0x160>)
 8000f04:	f000 fc54 	bl	80017b0 <HAL_GPIO_Init>
}
 8000f08:	e039      	b.n	8000f7e <HAL_COMP_MspInit+0x14a>
  else if(hcomp->Instance==COMP6)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a22      	ldr	r2, [pc, #136]	; (8000f98 <HAL_COMP_MspInit+0x164>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d134      	bne.n	8000f7e <HAL_COMP_MspInit+0x14a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <HAL_COMP_MspInit+0x158>)
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <HAL_COMP_MspInit+0x158>)
 8000f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1e:	6153      	str	r3, [r2, #20]
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <HAL_COMP_MspInit+0x158>)
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <HAL_COMP_MspInit+0x158>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	4a16      	ldr	r2, [pc, #88]	; (8000f8c <HAL_COMP_MspInit+0x158>)
 8000f32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f36:	6153      	str	r3, [r2, #20]
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <HAL_COMP_MspInit+0x158>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COMP_C_INP_Pin|COMP_C_INM_Pin;
 8000f44:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	480e      	ldr	r0, [pc, #56]	; (8000f94 <HAL_COMP_MspInit+0x160>)
 8000f5a:	f000 fc29 	bl	80017b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = COMP_C_OUT_Pin;
 8000f5e:	2340      	movs	r3, #64	; 0x40
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_GPCOMP6;
 8000f6e:	2307      	movs	r3, #7
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COMP_C_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	4808      	ldr	r0, [pc, #32]	; (8000f9c <HAL_COMP_MspInit+0x168>)
 8000f7a:	f000 fc19 	bl	80017b0 <HAL_GPIO_Init>
}
 8000f7e:	bf00      	nop
 8000f80:	3730      	adds	r7, #48	; 0x30
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40010020 	.word	0x40010020
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010028 	.word	0x40010028
 8000f94:	48000400 	.word	0x48000400
 8000f98:	40010030 	.word	0x40010030
 8000f9c:	48000800 	.word	0x48000800

08000fa0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a16      	ldr	r2, [pc, #88]	; (8001008 <HAL_TIM_PWM_MspInit+0x68>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d114      	bne.n	8000fdc <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_TIM_PWM_MspInit+0x6c>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	4a15      	ldr	r2, [pc, #84]	; (800100c <HAL_TIM_PWM_MspInit+0x6c>)
 8000fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fbc:	6193      	str	r3, [r2, #24]
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <HAL_TIM_PWM_MspInit+0x6c>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2018      	movs	r0, #24
 8000fd0:	f000 fbb7 	bl	8001742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000fd4:	2018      	movs	r0, #24
 8000fd6:	f000 fbd0 	bl	800177a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fda:	e010      	b.n	8000ffe <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe4:	d10b      	bne.n	8000ffe <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_TIM_PWM_MspInit+0x6c>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <HAL_TIM_PWM_MspInit+0x6c>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	61d3      	str	r3, [r2, #28]
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_TIM_PWM_MspInit+0x6c>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40012c00 	.word	0x40012c00
 800100c:	40021000 	.word	0x40021000

08001010 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <HAL_TIM_Base_MspInit+0x44>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d113      	bne.n	800104a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_TIM_Base_MspInit+0x48>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	4a0c      	ldr	r2, [pc, #48]	; (8001058 <HAL_TIM_Base_MspInit+0x48>)
 8001028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800102c:	6193      	str	r3, [r2, #24]
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_TIM_Base_MspInit+0x48>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2018      	movs	r0, #24
 8001040:	f000 fb7f 	bl	8001742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001044:	2018      	movs	r0, #24
 8001046:	f000 fb98 	bl	800177a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40014000 	.word	0x40014000
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a31      	ldr	r2, [pc, #196]	; (8001140 <HAL_TIM_MspPostInit+0xe4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d11c      	bne.n	80010b8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4b31      	ldr	r3, [pc, #196]	; (8001144 <HAL_TIM_MspPostInit+0xe8>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4a30      	ldr	r2, [pc, #192]	; (8001144 <HAL_TIM_MspPostInit+0xe8>)
 8001084:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001088:	6153      	str	r3, [r2, #20]
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <HAL_TIM_MspPostInit+0xe8>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = A_HIGH_Pin|B_HIGH_Pin|C_HIGH_Pin;
 8001096:	2307      	movs	r3, #7
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80010a6:	2302      	movs	r3, #2
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	4825      	ldr	r0, [pc, #148]	; (8001148 <HAL_TIM_MspPostInit+0xec>)
 80010b2:	f000 fb7d 	bl	80017b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010b6:	e03e      	b.n	8001136 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010c0:	d139      	bne.n	8001136 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b20      	ldr	r3, [pc, #128]	; (8001144 <HAL_TIM_MspPostInit+0xe8>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <HAL_TIM_MspPostInit+0xe8>)
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	6153      	str	r3, [r2, #20]
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <HAL_TIM_MspPostInit+0xe8>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <HAL_TIM_MspPostInit+0xe8>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4a19      	ldr	r2, [pc, #100]	; (8001144 <HAL_TIM_MspPostInit+0xe8>)
 80010e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e4:	6153      	str	r3, [r2, #20]
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_TIM_MspPostInit+0xe8>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_LOW_Pin|B_LOW_Pin;
 80010f2:	2303      	movs	r3, #3
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001102:	2301      	movs	r3, #1
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001110:	f000 fb4e 	bl	80017b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = C_LOW_Pin;
 8001114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001126:	2301      	movs	r3, #1
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(C_LOW_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4806      	ldr	r0, [pc, #24]	; (800114c <HAL_TIM_MspPostInit+0xf0>)
 8001132:	f000 fb3d 	bl	80017b0 <HAL_GPIO_Init>
}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40012c00 	.word	0x40012c00
 8001144:	40021000 	.word	0x40021000
 8001148:	48000800 	.word	0x48000800
 800114c:	48000400 	.word	0x48000400

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <NMI_Handler+0x4>

08001156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <MemManage_Handler+0x4>

08001162 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <UsageFault_Handler+0x4>

0800116e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119c:	f000 f892 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011a8:	4803      	ldr	r0, [pc, #12]	; (80011b8 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80011aa:	f002 f89f 	bl	80032ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80011b0:	f002 f89c 	bl	80032ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000120 	.word	0x20000120
 80011bc:	20000070 	.word	0x20000070

080011c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <SystemInit+0x20>)
 80011c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <SystemInit+0x20>)
 80011cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <Reset_Handler>:
 80011e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800121c <LoopForever+0x2>
 80011e8:	480d      	ldr	r0, [pc, #52]	; (8001220 <LoopForever+0x6>)
 80011ea:	490e      	ldr	r1, [pc, #56]	; (8001224 <LoopForever+0xa>)
 80011ec:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <LoopForever+0xe>)
 80011ee:	2300      	movs	r3, #0
 80011f0:	e002      	b.n	80011f8 <LoopCopyDataInit>

080011f2 <CopyDataInit>:
 80011f2:	58d4      	ldr	r4, [r2, r3]
 80011f4:	50c4      	str	r4, [r0, r3]
 80011f6:	3304      	adds	r3, #4

080011f8 <LoopCopyDataInit>:
 80011f8:	18c4      	adds	r4, r0, r3
 80011fa:	428c      	cmp	r4, r1
 80011fc:	d3f9      	bcc.n	80011f2 <CopyDataInit>
 80011fe:	4a0b      	ldr	r2, [pc, #44]	; (800122c <LoopForever+0x12>)
 8001200:	4c0b      	ldr	r4, [pc, #44]	; (8001230 <LoopForever+0x16>)
 8001202:	2300      	movs	r3, #0
 8001204:	e001      	b.n	800120a <LoopFillZerobss>

08001206 <FillZerobss>:
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	3204      	adds	r2, #4

0800120a <LoopFillZerobss>:
 800120a:	42a2      	cmp	r2, r4
 800120c:	d3fb      	bcc.n	8001206 <FillZerobss>
 800120e:	f7ff ffd7 	bl	80011c0 <SystemInit>
 8001212:	f003 f861 	bl	80042d8 <__libc_init_array>
 8001216:	f7ff fab1 	bl	800077c <main>

0800121a <LoopForever>:
 800121a:	e7fe      	b.n	800121a <LoopForever>
 800121c:	20004000 	.word	0x20004000
 8001220:	20000000 	.word	0x20000000
 8001224:	2000000c 	.word	0x2000000c
 8001228:	08004388 	.word	0x08004388
 800122c:	2000000c 	.word	0x2000000c
 8001230:	20000230 	.word	0x20000230

08001234 <ADC1_IRQHandler>:
 8001234:	e7fe      	b.n	8001234 <ADC1_IRQHandler>
	...

08001238 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_Init+0x28>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_Init+0x28>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 fa6f 	bl	800172c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f808 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fdca 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40022000 	.word	0x40022000

08001264 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fa87 	bl	8001796 <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 fa4f 	bl	8001742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008
 80012e8:	2000022c 	.word	0x2000022c

080012ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2000022c 	.word	0x2000022c

08001304 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <HAL_COMP_Init+0x22>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800131c:	b2db      	uxtb	r3, r3
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	75fb      	strb	r3, [r7, #23]
 800132a:	e05e      	b.n	80013ea <HAL_COMP_Init+0xe6>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132c:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <HAL_COMP_Init+0xf0>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <HAL_COMP_Init+0xf0>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <HAL_COMP_Init+0xf0>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fd75 	bl	8000e34 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d103      	bne.n	800135e <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4313      	orrs	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f023 0202 	bic.w	r2, r3, #2
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	4313      	orrs	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695a      	ldr	r2, [r3, #20]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69da      	ldr	r2, [r3, #28]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1a      	ldr	r2, [r3, #32]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d007      	beq.n	800141e <HAL_COMP_Start+0x26>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <HAL_COMP_Start+0x2c>
  {
    status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	73fb      	strb	r3, [r7, #15]
 8001422:	e0a5      	b.n	8001570 <HAL_COMP_Start+0x178>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b01      	cmp	r3, #1
 800142e:	f040 809d 	bne.w	800156c <HAL_COMP_Start+0x174>
    {
      /* Get the EXTI Line output configuration */
      extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a52      	ldr	r2, [pc, #328]	; (8001580 <HAL_COMP_Start+0x188>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d009      	beq.n	8001450 <HAL_COMP_Start+0x58>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a50      	ldr	r2, [pc, #320]	; (8001584 <HAL_COMP_Start+0x18c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d102      	bne.n	800144c <HAL_COMP_Start+0x54>
 8001446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800144a:	e003      	b.n	8001454 <HAL_COMP_Start+0x5c>
 800144c:	2301      	movs	r3, #1
 800144e:	e001      	b.n	8001454 <HAL_COMP_Start+0x5c>
 8001450:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001454:	60bb      	str	r3, [r7, #8]

      /* Configure the event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_EVENT_RISING | COMP_TRIGGERMODE_EVENT_FALLING)) != RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800145e:	2b00      	cmp	r3, #0
 8001460:	d077      	beq.n	8001552 <HAL_COMP_Start+0x15a>
      {
        /* Configure the event trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_RISING) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	2b00      	cmp	r3, #0
 800146c:	d012      	beq.n	8001494 <HAL_COMP_Start+0x9c>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <HAL_COMP_Start+0x8e>
 8001478:	4b43      	ldr	r3, [pc, #268]	; (8001588 <HAL_COMP_Start+0x190>)
 800147a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800147c:	4942      	ldr	r1, [pc, #264]	; (8001588 <HAL_COMP_Start+0x190>)
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	4313      	orrs	r3, r2
 8001482:	628b      	str	r3, [r1, #40]	; 0x28
 8001484:	e01a      	b.n	80014bc <HAL_COMP_Start+0xc4>
 8001486:	4b40      	ldr	r3, [pc, #256]	; (8001588 <HAL_COMP_Start+0x190>)
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	493f      	ldr	r1, [pc, #252]	; (8001588 <HAL_COMP_Start+0x190>)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
 8001490:	608b      	str	r3, [r1, #8]
 8001492:	e013      	b.n	80014bc <HAL_COMP_Start+0xc4>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d007      	beq.n	80014ae <HAL_COMP_Start+0xb6>
 800149e:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <HAL_COMP_Start+0x190>)
 80014a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	4938      	ldr	r1, [pc, #224]	; (8001588 <HAL_COMP_Start+0x190>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	628b      	str	r3, [r1, #40]	; 0x28
 80014ac:	e006      	b.n	80014bc <HAL_COMP_Start+0xc4>
 80014ae:	4b36      	ldr	r3, [pc, #216]	; (8001588 <HAL_COMP_Start+0x190>)
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	4934      	ldr	r1, [pc, #208]	; (8001588 <HAL_COMP_Start+0x190>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	608b      	str	r3, [r1, #8]
        }

        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_FALLING) != RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d012      	beq.n	80014ee <HAL_COMP_Start+0xf6>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d006      	beq.n	80014e0 <HAL_COMP_Start+0xe8>
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <HAL_COMP_Start+0x190>)
 80014d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d6:	492c      	ldr	r1, [pc, #176]	; (8001588 <HAL_COMP_Start+0x190>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
 80014dc:	62cb      	str	r3, [r1, #44]	; 0x2c
 80014de:	e01a      	b.n	8001516 <HAL_COMP_Start+0x11e>
 80014e0:	4b29      	ldr	r3, [pc, #164]	; (8001588 <HAL_COMP_Start+0x190>)
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	4928      	ldr	r1, [pc, #160]	; (8001588 <HAL_COMP_Start+0x190>)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	60cb      	str	r3, [r1, #12]
 80014ec:	e013      	b.n	8001516 <HAL_COMP_Start+0x11e>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d007      	beq.n	8001508 <HAL_COMP_Start+0x110>
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <HAL_COMP_Start+0x190>)
 80014fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	43db      	mvns	r3, r3
 8001500:	4921      	ldr	r1, [pc, #132]	; (8001588 <HAL_COMP_Start+0x190>)
 8001502:	4013      	ands	r3, r2
 8001504:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001506:	e006      	b.n	8001516 <HAL_COMP_Start+0x11e>
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_COMP_Start+0x190>)
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	43db      	mvns	r3, r3
 8001510:	491d      	ldr	r1, [pc, #116]	; (8001588 <HAL_COMP_Start+0x190>)
 8001512:	4013      	ands	r3, r2
 8001514:	60cb      	str	r3, [r1, #12]
        }

        /* Enable EXTI event generation */
        COMP_EXTI_ENABLE_EVENT(extiline);
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <HAL_COMP_Start+0x136>
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <HAL_COMP_Start+0x190>)
 8001522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001524:	4918      	ldr	r1, [pc, #96]	; (8001588 <HAL_COMP_Start+0x190>)
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	4313      	orrs	r3, r2
 800152a:	624b      	str	r3, [r1, #36]	; 0x24
 800152c:	e005      	b.n	800153a <HAL_COMP_Start+0x142>
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_COMP_Start+0x190>)
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	4915      	ldr	r1, [pc, #84]	; (8001588 <HAL_COMP_Start+0x190>)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	4313      	orrs	r3, r2
 8001538:	604b      	str	r3, [r1, #4]

        /* Clear COMP EXTI pending bit */
        COMP_EXTI_CLEAR_FLAG(extiline);
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_COMP_Start+0x154>
 8001544:	4a10      	ldr	r2, [pc, #64]	; (8001588 <HAL_COMP_Start+0x190>)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	6353      	str	r3, [r2, #52]	; 0x34
 800154a:	e002      	b.n	8001552 <HAL_COMP_Start+0x15a>
 800154c:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <HAL_COMP_Start+0x190>)
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	6153      	str	r3, [r2, #20]
      }

      /* Enable the selected comparator */
      __HAL_COMP_ENABLE(hcomp);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0201 	orr.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_BUSY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2202      	movs	r2, #2
 8001566:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800156a:	e001      	b.n	8001570 <HAL_COMP_Start+0x178>
    }
    else
    {
      status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40010020 	.word	0x40010020
 8001584:	40010028 	.word	0x40010028
 8001588:	40010400 	.word	0x40010400

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	db0b      	blt.n	800161a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	f003 021f 	and.w	r2, r3, #31
 8001608:	4907      	ldr	r1, [pc, #28]	; (8001628 <__NVIC_EnableIRQ+0x38>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	2001      	movs	r0, #1
 8001612:	fa00 f202 	lsl.w	r2, r0, r2
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000e100 	.word	0xe000e100

0800162c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0a      	blt.n	8001656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	490c      	ldr	r1, [pc, #48]	; (8001678 <__NVIC_SetPriority+0x4c>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	440b      	add	r3, r1
 8001650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001654:	e00a      	b.n	800166c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <__NVIC_SetPriority+0x50>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	3b04      	subs	r3, #4
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	440b      	add	r3, r1
 800166a:	761a      	strb	r2, [r3, #24]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f1c3 0307 	rsb	r3, r3, #7
 800169a:	2b04      	cmp	r3, #4
 800169c:	bf28      	it	cs
 800169e:	2304      	movcs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d902      	bls.n	80016b0 <NVIC_EncodePriority+0x30>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b03      	subs	r3, #3
 80016ae:	e000      	b.n	80016b2 <NVIC_EncodePriority+0x32>
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	4313      	orrs	r3, r2
         );
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f8:	d301      	bcc.n	80016fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00f      	b.n	800171e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <SysTick_Config+0x40>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001706:	210f      	movs	r1, #15
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f7ff ff8e 	bl	800162c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <SysTick_Config+0x40>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <SysTick_Config+0x40>)
 8001718:	2207      	movs	r2, #7
 800171a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	e000e010 	.word	0xe000e010

0800172c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ff29 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001754:	f7ff ff3e 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 8001758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	6978      	ldr	r0, [r7, #20]
 8001760:	f7ff ff8e 	bl	8001680 <NVIC_EncodePriority>
 8001764:	4602      	mov	r2, r0
 8001766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff5d 	bl	800162c <__NVIC_SetPriority>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff31 	bl	80015f0 <__NVIC_EnableIRQ>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffa2 	bl	80016e8 <SysTick_Config>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017be:	e14e      	b.n	8001a5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2101      	movs	r1, #1
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	4013      	ands	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 8140 	beq.w	8001a58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d005      	beq.n	80017f0 <HAL_GPIO_Init+0x40>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d130      	bne.n	8001852 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001826:	2201      	movs	r2, #1
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	f003 0201 	and.w	r2, r3, #1
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b03      	cmp	r3, #3
 800185c:	d017      	beq.n	800188e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d123      	bne.n	80018e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	08da      	lsrs	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3208      	adds	r2, #8
 80018a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	220f      	movs	r2, #15
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	08da      	lsrs	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3208      	adds	r2, #8
 80018dc:	6939      	ldr	r1, [r7, #16]
 80018de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	2203      	movs	r2, #3
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0203 	and.w	r2, r3, #3
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 809a 	beq.w	8001a58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001924:	4b55      	ldr	r3, [pc, #340]	; (8001a7c <HAL_GPIO_Init+0x2cc>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a54      	ldr	r2, [pc, #336]	; (8001a7c <HAL_GPIO_Init+0x2cc>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b52      	ldr	r3, [pc, #328]	; (8001a7c <HAL_GPIO_Init+0x2cc>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800193c:	4a50      	ldr	r2, [pc, #320]	; (8001a80 <HAL_GPIO_Init+0x2d0>)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	089b      	lsrs	r3, r3, #2
 8001942:	3302      	adds	r3, #2
 8001944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001948:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	220f      	movs	r2, #15
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001966:	d013      	beq.n	8001990 <HAL_GPIO_Init+0x1e0>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a46      	ldr	r2, [pc, #280]	; (8001a84 <HAL_GPIO_Init+0x2d4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d00d      	beq.n	800198c <HAL_GPIO_Init+0x1dc>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a45      	ldr	r2, [pc, #276]	; (8001a88 <HAL_GPIO_Init+0x2d8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d007      	beq.n	8001988 <HAL_GPIO_Init+0x1d8>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a44      	ldr	r2, [pc, #272]	; (8001a8c <HAL_GPIO_Init+0x2dc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_GPIO_Init+0x1d4>
 8001980:	2303      	movs	r3, #3
 8001982:	e006      	b.n	8001992 <HAL_GPIO_Init+0x1e2>
 8001984:	2305      	movs	r3, #5
 8001986:	e004      	b.n	8001992 <HAL_GPIO_Init+0x1e2>
 8001988:	2302      	movs	r3, #2
 800198a:	e002      	b.n	8001992 <HAL_GPIO_Init+0x1e2>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_GPIO_Init+0x1e2>
 8001990:	2300      	movs	r3, #0
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	f002 0203 	and.w	r2, r2, #3
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	4093      	lsls	r3, r2
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019a2:	4937      	ldr	r1, [pc, #220]	; (8001a80 <HAL_GPIO_Init+0x2d0>)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	3302      	adds	r3, #2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b0:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019d4:	4a2e      	ldr	r2, [pc, #184]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019fe:	4a24      	ldr	r2, [pc, #144]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a52:	4a0f      	ldr	r2, [pc, #60]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f47f aea9 	bne.w	80017c0 <HAL_GPIO_Init+0x10>
  }
}
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
 8001a72:	371c      	adds	r7, #28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010000 	.word	0x40010000
 8001a84:	48000400 	.word	0x48000400
 8001a88:	48000800 	.word	0x48000800
 8001a8c:	48000c00 	.word	0x48000c00
 8001a90:	40010400 	.word	0x40010400

08001a94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	e001      	b.n	8001ab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f000 bef4 	b.w	80028c6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 816a 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001aee:	4bb3      	ldr	r3, [pc, #716]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d00c      	beq.n	8001b14 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001afa:	4bb0      	ldr	r3, [pc, #704]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d159      	bne.n	8001bba <HAL_RCC_OscConfig+0xf6>
 8001b06:	4bad      	ldr	r3, [pc, #692]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b12:	d152      	bne.n	8001bba <HAL_RCC_OscConfig+0xf6>
 8001b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b18:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b20:	fa93 f3a3 	rbit	r3, r3
 8001b24:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b28:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d102      	bne.n	8001b46 <HAL_RCC_OscConfig+0x82>
 8001b40:	4b9e      	ldr	r3, [pc, #632]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	e015      	b.n	8001b72 <HAL_RCC_OscConfig+0xae>
 8001b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b4a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b62:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001b6e:	4b93      	ldr	r3, [pc, #588]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b76:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b7a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b7e:	fa92 f2a2 	rbit	r2, r2
 8001b82:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b86:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b8a:	fab2 f282 	clz	r2, r2
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	f042 0220 	orr.w	r2, r2, #32
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	f002 021f 	and.w	r2, r2, #31
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 810c 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x2fc>
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 8106 	bne.w	8001dc0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	f000 be86 	b.w	80028c6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc4:	d106      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x110>
 8001bc6:	4b7d      	ldr	r3, [pc, #500]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a7c      	ldr	r2, [pc, #496]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e030      	b.n	8001c36 <HAL_RCC_OscConfig+0x172>
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x134>
 8001bde:	4b77      	ldr	r3, [pc, #476]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a76      	ldr	r2, [pc, #472]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b74      	ldr	r3, [pc, #464]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a73      	ldr	r2, [pc, #460]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e01e      	b.n	8001c36 <HAL_RCC_OscConfig+0x172>
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c02:	d10c      	bne.n	8001c1e <HAL_RCC_OscConfig+0x15a>
 8001c04:	4b6d      	ldr	r3, [pc, #436]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a6c      	ldr	r2, [pc, #432]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a69      	ldr	r2, [pc, #420]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	e00b      	b.n	8001c36 <HAL_RCC_OscConfig+0x172>
 8001c1e:	4b67      	ldr	r3, [pc, #412]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a66      	ldr	r2, [pc, #408]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b64      	ldr	r3, [pc, #400]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a63      	ldr	r2, [pc, #396]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c34:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c36:	4b61      	ldr	r3, [pc, #388]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	f023 020f 	bic.w	r2, r3, #15
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	495d      	ldr	r1, [pc, #372]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d059      	beq.n	8001d08 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fb4a 	bl	80012ec <HAL_GetTick>
 8001c58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c5e:	f7ff fb45 	bl	80012ec <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d902      	bls.n	8001c74 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	f000 be29 	b.w	80028c6 <HAL_RCC_OscConfig+0xe02>
 8001c74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c78:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c88:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d102      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x1e2>
 8001ca0:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	e015      	b.n	8001cd2 <HAL_RCC_OscConfig+0x20e>
 8001ca6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001caa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001cba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cbe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001cc2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001cce:	4b3b      	ldr	r3, [pc, #236]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cd6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001cda:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001cde:	fa92 f2a2 	rbit	r2, r2
 8001ce2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001ce6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001cea:	fab2 f282 	clz	r2, r2
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	f042 0220 	orr.w	r2, r2, #32
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f002 021f 	and.w	r2, r2, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0ab      	beq.n	8001c5e <HAL_RCC_OscConfig+0x19a>
 8001d06:	e05c      	b.n	8001dc2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff faf0 	bl	80012ec <HAL_GetTick>
 8001d0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d12:	f7ff faeb 	bl	80012ec <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d902      	bls.n	8001d28 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	f000 bdcf 	b.w	80028c6 <HAL_RCC_OscConfig+0xe02>
 8001d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d2c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001d3c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d102      	bne.n	8001d5a <HAL_RCC_OscConfig+0x296>
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	e015      	b.n	8001d86 <HAL_RCC_OscConfig+0x2c2>
 8001d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d72:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d76:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d8a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001d8e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d92:	fa92 f2a2 	rbit	r2, r2
 8001d96:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d9a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d9e:	fab2 f282 	clz	r2, r2
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f042 0220 	orr.w	r2, r2, #32
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f002 021f 	and.w	r2, r2, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f202 	lsl.w	r2, r1, r2
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ab      	bne.n	8001d12 <HAL_RCC_OscConfig+0x24e>
 8001dba:	e002      	b.n	8001dc2 <HAL_RCC_OscConfig+0x2fe>
 8001dbc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 816f 	beq.w	80020b0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dd2:	4bd0      	ldr	r3, [pc, #832]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dde:	4bcd      	ldr	r3, [pc, #820]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d16c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x400>
 8001dea:	4bca      	ldr	r3, [pc, #808]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d166      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x400>
 8001df6:	2302      	movs	r3, #2
 8001df8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001e08:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d102      	bne.n	8001e26 <HAL_RCC_OscConfig+0x362>
 8001e20:	4bbc      	ldr	r3, [pc, #752]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	e013      	b.n	8001e4e <HAL_RCC_OscConfig+0x38a>
 8001e26:	2302      	movs	r3, #2
 8001e28:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e3e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e4a:	4bb2      	ldr	r3, [pc, #712]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001e54:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e58:	fa92 f2a2 	rbit	r2, r2
 8001e5c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001e60:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e64:	fab2 f282 	clz	r2, r2
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	f042 0220 	orr.w	r2, r2, #32
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	f002 021f 	and.w	r2, r2, #31
 8001e74:	2101      	movs	r1, #1
 8001e76:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d007      	beq.n	8001e90 <HAL_RCC_OscConfig+0x3cc>
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d002      	beq.n	8001e90 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f000 bd1b 	b.w	80028c6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	4ba0      	ldr	r3, [pc, #640]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	21f8      	movs	r1, #248	; 0xf8
 8001ea0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ea8:	fa91 f1a1 	rbit	r1, r1
 8001eac:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001eb0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001eb4:	fab1 f181 	clz	r1, r1
 8001eb8:	b2c9      	uxtb	r1, r1
 8001eba:	408b      	lsls	r3, r1
 8001ebc:	4995      	ldr	r1, [pc, #596]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec2:	e0f5      	b.n	80020b0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8085 	beq.w	8001fda <HAL_RCC_OscConfig+0x516>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ee2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ef0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2301      	movs	r3, #1
 8001efa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff f9f6 	bl	80012ec <HAL_GetTick>
 8001f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f06:	f7ff f9f1 	bl	80012ec <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d902      	bls.n	8001f1c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	f000 bcd5 	b.w	80028c6 <HAL_RCC_OscConfig+0xe02>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001f2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d102      	bne.n	8001f4c <HAL_RCC_OscConfig+0x488>
 8001f46:	4b73      	ldr	r3, [pc, #460]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	e013      	b.n	8001f74 <HAL_RCC_OscConfig+0x4b0>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f5e:	2302      	movs	r3, #2
 8001f60:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f64:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f70:	4b68      	ldr	r3, [pc, #416]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	2202      	movs	r2, #2
 8001f76:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f7e:	fa92 f2a2 	rbit	r2, r2
 8001f82:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f86:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f8a:	fab2 f282 	clz	r2, r2
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	f042 0220 	orr.w	r2, r2, #32
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f002 021f 	and.w	r2, r2, #31
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0af      	beq.n	8001f06 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	4b5b      	ldr	r3, [pc, #364]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	21f8      	movs	r1, #248	; 0xf8
 8001fb6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001fbe:	fa91 f1a1 	rbit	r1, r1
 8001fc2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001fc6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001fca:	fab1 f181 	clz	r1, r1
 8001fce:	b2c9      	uxtb	r1, r1
 8001fd0:	408b      	lsls	r3, r1
 8001fd2:	4950      	ldr	r1, [pc, #320]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
 8001fd8:	e06a      	b.n	80020b0 <HAL_RCC_OscConfig+0x5ec>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001fec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ffa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	461a      	mov	r2, r3
 8002002:	2300      	movs	r3, #0
 8002004:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff f971 	bl	80012ec <HAL_GetTick>
 800200a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	e00a      	b.n	8002026 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002010:	f7ff f96c 	bl	80012ec <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d902      	bls.n	8002026 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	f000 bc50 	b.w	80028c6 <HAL_RCC_OscConfig+0xe02>
 8002026:	2302      	movs	r3, #2
 8002028:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d102      	bne.n	8002056 <HAL_RCC_OscConfig+0x592>
 8002050:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	e013      	b.n	800207e <HAL_RCC_OscConfig+0x5ba>
 8002056:	2302      	movs	r3, #2
 8002058:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002068:	2302      	movs	r3, #2
 800206a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800206e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800207a:	4b26      	ldr	r3, [pc, #152]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	2202      	movs	r2, #2
 8002080:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002084:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002088:	fa92 f2a2 	rbit	r2, r2
 800208c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002090:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002094:	fab2 f282 	clz	r2, r2
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	f042 0220 	orr.w	r2, r2, #32
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	f002 021f 	and.w	r2, r2, #31
 80020a4:	2101      	movs	r1, #1
 80020a6:	fa01 f202 	lsl.w	r2, r1, r2
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1af      	bne.n	8002010 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80da 	beq.w	8002274 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d069      	beq.n	800219e <HAL_RCC_OscConfig+0x6da>
 80020ca:	2301      	movs	r3, #1
 80020cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80020dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_OscConfig+0x654>)
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	461a      	mov	r2, r3
 80020f0:	2301      	movs	r3, #1
 80020f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f4:	f7ff f8fa 	bl	80012ec <HAL_GetTick>
 80020f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fc:	e00e      	b.n	800211c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fe:	f7ff f8f5 	bl	80012ec <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d906      	bls.n	800211c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e3d9      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	10908120 	.word	0x10908120
 800211c:	2302      	movs	r3, #2
 800211e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800212e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002132:	2202      	movs	r2, #2
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	fa93 f2a3 	rbit	r2, r3
 8002140:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800214a:	2202      	movs	r2, #2
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	fa93 f2a3 	rbit	r2, r3
 8002158:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800215c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	4ba5      	ldr	r3, [pc, #660]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002162:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002166:	2102      	movs	r1, #2
 8002168:	6019      	str	r1, [r3, #0]
 800216a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	fa93 f1a3 	rbit	r1, r3
 8002174:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002178:	6019      	str	r1, [r3, #0]
  return result;
 800217a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0b0      	beq.n	80020fe <HAL_RCC_OscConfig+0x63a>
 800219c:	e06a      	b.n	8002274 <HAL_RCC_OscConfig+0x7b0>
 800219e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	fa93 f2a3 	rbit	r2, r3
 80021b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021b4:	601a      	str	r2, [r3, #0]
  return result;
 80021b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021ba:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b8c      	ldr	r3, [pc, #560]	; (80023f8 <HAL_RCC_OscConfig+0x934>)
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	461a      	mov	r2, r3
 80021cc:	2300      	movs	r3, #0
 80021ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d0:	f7ff f88c 	bl	80012ec <HAL_GetTick>
 80021d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d8:	e009      	b.n	80021ee <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021da:	f7ff f887 	bl	80012ec <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e36b      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
 80021ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80021f2:	2202      	movs	r2, #2
 80021f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	fa93 f2a3 	rbit	r2, r3
 8002200:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800220a:	2202      	movs	r2, #2
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	fa93 f2a3 	rbit	r2, r3
 8002218:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002222:	2202      	movs	r2, #2
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002234:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002236:	4b6f      	ldr	r3, [pc, #444]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800223a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800223e:	2102      	movs	r1, #2
 8002240:	6019      	str	r1, [r3, #0]
 8002242:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	fa93 f1a3 	rbit	r1, r3
 800224c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002250:	6019      	str	r1, [r3, #0]
  return result;
 8002252:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	2101      	movs	r1, #1
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1b2      	bne.n	80021da <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8158 	beq.w	8002534 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228a:	4b5a      	ldr	r3, [pc, #360]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d112      	bne.n	80022bc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4a56      	ldr	r2, [pc, #344]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a0:	61d3      	str	r3, [r2, #28]
 80022a2:	4b54      	ldr	r3, [pc, #336]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022aa:	f107 0308 	add.w	r3, r7, #8
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	f107 0308 	add.w	r3, r7, #8
 80022b4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022b6:	2301      	movs	r3, #1
 80022b8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022bc:	4b4f      	ldr	r3, [pc, #316]	; (80023fc <HAL_RCC_OscConfig+0x938>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d11a      	bne.n	80022fe <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c8:	4b4c      	ldr	r3, [pc, #304]	; (80023fc <HAL_RCC_OscConfig+0x938>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a4b      	ldr	r2, [pc, #300]	; (80023fc <HAL_RCC_OscConfig+0x938>)
 80022ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d4:	f7ff f80a 	bl	80012ec <HAL_GetTick>
 80022d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	e009      	b.n	80022f2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022de:	f7ff f805 	bl	80012ec <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e2e9      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f2:	4b42      	ldr	r3, [pc, #264]	; (80023fc <HAL_RCC_OscConfig+0x938>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0ef      	beq.n	80022de <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d106      	bne.n	8002316 <HAL_RCC_OscConfig+0x852>
 8002308:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a39      	ldr	r2, [pc, #228]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6213      	str	r3, [r2, #32]
 8002314:	e02f      	b.n	8002376 <HAL_RCC_OscConfig+0x8b2>
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10c      	bne.n	800233a <HAL_RCC_OscConfig+0x876>
 8002320:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4a33      	ldr	r2, [pc, #204]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6213      	str	r3, [r2, #32]
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4a30      	ldr	r2, [pc, #192]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002332:	f023 0304 	bic.w	r3, r3, #4
 8002336:	6213      	str	r3, [r2, #32]
 8002338:	e01d      	b.n	8002376 <HAL_RCC_OscConfig+0x8b2>
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d10c      	bne.n	800235e <HAL_RCC_OscConfig+0x89a>
 8002344:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a2a      	ldr	r2, [pc, #168]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a27      	ldr	r2, [pc, #156]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	e00b      	b.n	8002376 <HAL_RCC_OscConfig+0x8b2>
 800235e:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a24      	ldr	r2, [pc, #144]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6213      	str	r3, [r2, #32]
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d06b      	beq.n	8002458 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7fe ffb4 	bl	80012ec <HAL_GetTick>
 8002384:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002388:	e00b      	b.n	80023a2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7fe ffaf 	bl	80012ec <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e291      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
 80023a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80023a6:	2202      	movs	r2, #2
 80023a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	fa93 f2a3 	rbit	r2, r3
 80023b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023be:	2202      	movs	r2, #2
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	fa93 f2a3 	rbit	r2, r3
 80023cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023d0:	601a      	str	r2, [r3, #0]
  return result;
 80023d2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f043 0302 	orr.w	r3, r3, #2
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d109      	bne.n	8002400 <HAL_RCC_OscConfig+0x93c>
 80023ec:	4b01      	ldr	r3, [pc, #4]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	e014      	b.n	800241c <HAL_RCC_OscConfig+0x958>
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	10908120 	.word	0x10908120
 80023fc:	40007000 	.word	0x40007000
 8002400:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002404:	2202      	movs	r2, #2
 8002406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	fa93 f2a3 	rbit	r2, r3
 8002412:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	4bbb      	ldr	r3, [pc, #748]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002420:	2102      	movs	r1, #2
 8002422:	6011      	str	r1, [r2, #0]
 8002424:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	fa92 f1a2 	rbit	r1, r2
 800242e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002432:	6011      	str	r1, [r2, #0]
  return result;
 8002434:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	fab2 f282 	clz	r2, r2
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	f002 021f 	and.w	r2, r2, #31
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f202 	lsl.w	r2, r1, r2
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d099      	beq.n	800238a <HAL_RCC_OscConfig+0x8c6>
 8002456:	e063      	b.n	8002520 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7fe ff48 	bl	80012ec <HAL_GetTick>
 800245c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	e00b      	b.n	800247a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe ff43 	bl	80012ec <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e225      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
 800247a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800247e:	2202      	movs	r2, #2
 8002480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	fa93 f2a3 	rbit	r2, r3
 800248c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002496:	2202      	movs	r2, #2
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fa93 f2a3 	rbit	r2, r3
 80024a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024a8:	601a      	str	r2, [r3, #0]
  return result;
 80024aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f043 0302 	orr.w	r3, r3, #2
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d102      	bne.n	80024ca <HAL_RCC_OscConfig+0xa06>
 80024c4:	4b90      	ldr	r3, [pc, #576]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	e00d      	b.n	80024e6 <HAL_RCC_OscConfig+0xa22>
 80024ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024ce:	2202      	movs	r2, #2
 80024d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	fa93 f2a3 	rbit	r2, r3
 80024dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	4b89      	ldr	r3, [pc, #548]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024ea:	2102      	movs	r1, #2
 80024ec:	6011      	str	r1, [r2, #0]
 80024ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	fa92 f1a2 	rbit	r1, r2
 80024f8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80024fc:	6011      	str	r1, [r2, #0]
  return result;
 80024fe:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	fab2 f282 	clz	r2, r2
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	f002 021f 	and.w	r2, r2, #31
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f202 	lsl.w	r2, r1, r2
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1a0      	bne.n	8002462 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002520:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4b77      	ldr	r3, [pc, #476]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	4a76      	ldr	r2, [pc, #472]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 800252e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002532:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 81c2 	beq.w	80028c4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002540:	4b71      	ldr	r3, [pc, #452]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b08      	cmp	r3, #8
 800254a:	f000 819c 	beq.w	8002886 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	2b02      	cmp	r3, #2
 8002556:	f040 8114 	bne.w	8002782 <HAL_RCC_OscConfig+0xcbe>
 800255a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800255e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	fa93 f2a3 	rbit	r2, r3
 800256e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002572:	601a      	str	r2, [r3, #0]
  return result;
 8002574:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002578:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002584:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	461a      	mov	r2, r3
 800258c:	2300      	movs	r3, #0
 800258e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe feac 	bl	80012ec <HAL_GetTick>
 8002594:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002598:	e009      	b.n	80025ae <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe fea7 	bl	80012ec <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e18b      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
 80025ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	fa93 f2a3 	rbit	r2, r3
 80025c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025c6:	601a      	str	r2, [r3, #0]
  return result;
 80025c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d102      	bne.n	80025e8 <HAL_RCC_OscConfig+0xb24>
 80025e2:	4b49      	ldr	r3, [pc, #292]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	e01b      	b.n	8002620 <HAL_RCC_OscConfig+0xb5c>
 80025e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	fa93 f2a3 	rbit	r2, r3
 80025fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002606:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	fa93 f2a3 	rbit	r2, r3
 8002616:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	4b3a      	ldr	r3, [pc, #232]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002624:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002628:	6011      	str	r1, [r2, #0]
 800262a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	fa92 f1a2 	rbit	r1, r2
 8002634:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002638:	6011      	str	r1, [r2, #0]
  return result;
 800263a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	fab2 f282 	clz	r2, r2
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	f042 0220 	orr.w	r2, r2, #32
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	f002 021f 	and.w	r2, r2, #31
 8002650:	2101      	movs	r1, #1
 8002652:	fa01 f202 	lsl.w	r2, r1, r2
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d19e      	bne.n	800259a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800265c:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	430b      	orrs	r3, r1
 8002672:	4925      	ldr	r1, [pc, #148]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
 8002678:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800267c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	fa93 f2a3 	rbit	r2, r3
 800268c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002690:	601a      	str	r2, [r3, #0]
  return result;
 8002692:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002696:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	461a      	mov	r2, r3
 80026aa:	2301      	movs	r3, #1
 80026ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7fe fe1d 	bl	80012ec <HAL_GetTick>
 80026b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b6:	e009      	b.n	80026cc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe fe18 	bl	80012ec <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e0fc      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
 80026cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	fa93 f2a3 	rbit	r2, r3
 80026e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026e4:	601a      	str	r2, [r3, #0]
  return result;
 80026e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d105      	bne.n	800270c <HAL_RCC_OscConfig+0xc48>
 8002700:	4b01      	ldr	r3, [pc, #4]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	e01e      	b.n	8002744 <HAL_RCC_OscConfig+0xc80>
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	fa93 f2a3 	rbit	r2, r3
 8002720:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800272a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	fa93 f2a3 	rbit	r2, r3
 800273a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	4b63      	ldr	r3, [pc, #396]	; (80028d0 <HAL_RCC_OscConfig+0xe0c>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002748:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800274c:	6011      	str	r1, [r2, #0]
 800274e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	fa92 f1a2 	rbit	r1, r2
 8002758:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800275c:	6011      	str	r1, [r2, #0]
  return result;
 800275e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	fab2 f282 	clz	r2, r2
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f042 0220 	orr.w	r2, r2, #32
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	f002 021f 	and.w	r2, r2, #31
 8002774:	2101      	movs	r1, #1
 8002776:	fa01 f202 	lsl.w	r2, r1, r2
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d09b      	beq.n	80026b8 <HAL_RCC_OscConfig+0xbf4>
 8002780:	e0a0      	b.n	80028c4 <HAL_RCC_OscConfig+0xe00>
 8002782:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002786:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800278a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fa93 f2a3 	rbit	r2, r3
 8002796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800279a:	601a      	str	r2, [r3, #0]
  return result;
 800279c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	461a      	mov	r2, r3
 80027b4:	2300      	movs	r3, #0
 80027b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe fd98 	bl	80012ec <HAL_GetTick>
 80027bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c0:	e009      	b.n	80027d6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c2:	f7fe fd93 	bl	80012ec <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e077      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
 80027d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f2a3 	rbit	r2, r3
 80027ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ee:	601a      	str	r2, [r3, #0]
  return result;
 80027f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d102      	bne.n	8002810 <HAL_RCC_OscConfig+0xd4c>
 800280a:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <HAL_RCC_OscConfig+0xe0c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	e01b      	b.n	8002848 <HAL_RCC_OscConfig+0xd84>
 8002810:	f107 0320 	add.w	r3, r7, #32
 8002814:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002818:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f107 0320 	add.w	r3, r7, #32
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	fa93 f2a3 	rbit	r2, r3
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	f107 0318 	add.w	r3, r7, #24
 800282e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	f107 0318 	add.w	r3, r7, #24
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	fa93 f2a3 	rbit	r2, r3
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <HAL_RCC_OscConfig+0xe0c>)
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	f107 0210 	add.w	r2, r7, #16
 800284c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002850:	6011      	str	r1, [r2, #0]
 8002852:	f107 0210 	add.w	r2, r7, #16
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	fa92 f1a2 	rbit	r1, r2
 800285c:	f107 020c 	add.w	r2, r7, #12
 8002860:	6011      	str	r1, [r2, #0]
  return result;
 8002862:	f107 020c 	add.w	r2, r7, #12
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	fab2 f282 	clz	r2, r2
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	f042 0220 	orr.w	r2, r2, #32
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	f002 021f 	and.w	r2, r2, #31
 8002878:	2101      	movs	r1, #1
 800287a:	fa01 f202 	lsl.w	r2, r1, r2
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d19e      	bne.n	80027c2 <HAL_RCC_OscConfig+0xcfe>
 8002884:	e01e      	b.n	80028c4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e018      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002894:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <HAL_RCC_OscConfig+0xe0c>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800289c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d108      	bne.n	80028c0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80028ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000

080028d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b09e      	sub	sp, #120	; 0x78
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e162      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028ec:	4b90      	ldr	r3, [pc, #576]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d910      	bls.n	800291c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b8d      	ldr	r3, [pc, #564]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 0207 	bic.w	r2, r3, #7
 8002902:	498b      	ldr	r1, [pc, #556]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b89      	ldr	r3, [pc, #548]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e14a      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002928:	4b82      	ldr	r3, [pc, #520]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	497f      	ldr	r1, [pc, #508]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002936:	4313      	orrs	r3, r2
 8002938:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80dc 	beq.w	8002b00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d13c      	bne.n	80029ca <HAL_RCC_ClockConfig+0xf6>
 8002950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002954:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800295e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	d102      	bne.n	800297a <HAL_RCC_ClockConfig+0xa6>
 8002974:	4b6f      	ldr	r3, [pc, #444]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	e00f      	b.n	800299a <HAL_RCC_ClockConfig+0xc6>
 800297a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800297e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	667b      	str	r3, [r7, #100]	; 0x64
 8002988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800298c:	663b      	str	r3, [r7, #96]	; 0x60
 800298e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002996:	4b67      	ldr	r3, [pc, #412]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800299e:	65ba      	str	r2, [r7, #88]	; 0x58
 80029a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029a2:	fa92 f2a2 	rbit	r2, r2
 80029a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80029a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029aa:	fab2 f282 	clz	r2, r2
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	f042 0220 	orr.w	r2, r2, #32
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	f002 021f 	and.w	r2, r2, #31
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f202 	lsl.w	r2, r1, r2
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d17b      	bne.n	8002abe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0f3      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d13c      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x178>
 80029d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d102      	bne.n	80029fc <HAL_RCC_ClockConfig+0x128>
 80029f6:	4b4f      	ldr	r3, [pc, #316]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	e00f      	b.n	8002a1c <HAL_RCC_ClockConfig+0x148>
 80029fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	647b      	str	r3, [r7, #68]	; 0x44
 8002a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a18:	4b46      	ldr	r3, [pc, #280]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a20:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a24:	fa92 f2a2 	rbit	r2, r2
 8002a28:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a2c:	fab2 f282 	clz	r2, r2
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	f042 0220 	orr.w	r2, r2, #32
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	f002 021f 	and.w	r2, r2, #31
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d13a      	bne.n	8002abe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0b2      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d102      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x1a0>
 8002a6e:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	e00d      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1bc>
 8002a74:	2302      	movs	r3, #2
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a80:	2302      	movs	r3, #2
 8002a82:	623b      	str	r3, [r7, #32]
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	4b29      	ldr	r3, [pc, #164]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	2202      	movs	r2, #2
 8002a92:	61ba      	str	r2, [r7, #24]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	fa92 f2a2 	rbit	r2, r2
 8002a9a:	617a      	str	r2, [r7, #20]
  return result;
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	fab2 f282 	clz	r2, r2
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	f042 0220 	orr.w	r2, r2, #32
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	f002 021f 	and.w	r2, r2, #31
 8002aae:	2101      	movs	r1, #1
 8002ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e079      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002abe:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	491a      	ldr	r1, [pc, #104]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad0:	f7fe fc0c 	bl	80012ec <HAL_GetTick>
 8002ad4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad8:	f7fe fc08 	bl	80012ec <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e061      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 020c 	and.w	r2, r3, #12
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1eb      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d214      	bcs.n	8002b38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 0207 	bic.w	r2, r3, #7
 8002b16:	4906      	ldr	r1, [pc, #24]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e040      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
 8002b30:	40022000 	.word	0x40022000
 8002b34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_RCC_ClockConfig+0x2e8>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	491a      	ldr	r1, [pc, #104]	; (8002bbc <HAL_RCC_ClockConfig+0x2e8>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b62:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <HAL_RCC_ClockConfig+0x2e8>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4912      	ldr	r1, [pc, #72]	; (8002bbc <HAL_RCC_ClockConfig+0x2e8>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b76:	f000 f829 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b7a:	4601      	mov	r1, r0
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <HAL_RCC_ClockConfig+0x2e8>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b84:	22f0      	movs	r2, #240	; 0xf0
 8002b86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	fa92 f2a2 	rbit	r2, r2
 8002b8e:	60fa      	str	r2, [r7, #12]
  return result;
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	fab2 f282 	clz	r2, r2
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	40d3      	lsrs	r3, r2
 8002b9a:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <HAL_RCC_ClockConfig+0x2ec>)
 8002b9c:	5cd3      	ldrb	r3, [r2, r3]
 8002b9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002ba2:	4a08      	ldr	r2, [pc, #32]	; (8002bc4 <HAL_RCC_ClockConfig+0x2f0>)
 8002ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_RCC_ClockConfig+0x2f4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fb5a 	bl	8001264 <HAL_InitTick>
  
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3778      	adds	r7, #120	; 0x78
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	08004350 	.word	0x08004350
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	20000004 	.word	0x20000004

08002bcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b08b      	sub	sp, #44	; 0x2c
 8002bd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002be6:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d002      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x30>
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d003      	beq.n	8002c02 <HAL_RCC_GetSysClockFreq+0x36>
 8002bfa:	e03c      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bfc:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bfe:	623b      	str	r3, [r7, #32]
      break;
 8002c00:	e03c      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c08:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c0c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	fa92 f2a2 	rbit	r2, r2
 8002c14:	607a      	str	r2, [r7, #4]
  return result;
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	fab2 f282 	clz	r2, r2
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	40d3      	lsrs	r3, r2
 8002c20:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c22:	5cd3      	ldrb	r3, [r2, r3]
 8002c24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	220f      	movs	r2, #15
 8002c30:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	fa92 f2a2 	rbit	r2, r2
 8002c38:	60fa      	str	r2, [r7, #12]
  return result;
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	fab2 f282 	clz	r2, r2
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	40d3      	lsrs	r3, r2
 8002c44:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c46:	5cd3      	ldrb	r3, [r2, r3]
 8002c48:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c54:	4a0e      	ldr	r2, [pc, #56]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fb02 f303 	mul.w	r3, r2, r3
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
 8002c64:	e004      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	4a0c      	ldr	r2, [pc, #48]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	623b      	str	r3, [r7, #32]
      break;
 8002c74:	e002      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c78:	623b      	str	r3, [r7, #32]
      break;
 8002c7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	372c      	adds	r7, #44	; 0x2c
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	007a1200 	.word	0x007a1200
 8002c94:	08004360 	.word	0x08004360
 8002c98:	08004370 	.word	0x08004370
 8002c9c:	003d0900 	.word	0x003d0900

08002ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b092      	sub	sp, #72	; 0x48
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80d4 	beq.w	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc4:	4b4e      	ldr	r3, [pc, #312]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10e      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd0:	4b4b      	ldr	r3, [pc, #300]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	4a4a      	ldr	r2, [pc, #296]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cda:	61d3      	str	r3, [r2, #28]
 8002cdc:	4b48      	ldr	r3, [pc, #288]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cee:	4b45      	ldr	r3, [pc, #276]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d118      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cfa:	4b42      	ldr	r3, [pc, #264]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a41      	ldr	r2, [pc, #260]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d06:	f7fe faf1 	bl	80012ec <HAL_GetTick>
 8002d0a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0c:	e008      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0e:	f7fe faed 	bl	80012ec <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b64      	cmp	r3, #100	; 0x64
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e14b      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d20:	4b38      	ldr	r3, [pc, #224]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d2c:	4b34      	ldr	r3, [pc, #208]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d34:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8084 	beq.w	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d07c      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d4c:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	461a      	mov	r2, r3
 8002d76:	2301      	movs	r3, #1
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d9e:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d04b      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dae:	f7fe fa9d 	bl	80012ec <HAL_GetTick>
 8002db2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7fe fa99 	bl	80012ec <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0f5      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd8:	2302      	movs	r3, #2
 8002dda:	623b      	str	r3, [r7, #32]
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	61fb      	str	r3, [r7, #28]
  return result;
 8002de4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d108      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002dfa:	4b01      	ldr	r3, [pc, #4]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	e00d      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40007000 	.word	0x40007000
 8002e08:	10908100 	.word	0x10908100
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	fa93 f3a3 	rbit	r3, r3
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	4b69      	ldr	r3, [pc, #420]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	613a      	str	r2, [r7, #16]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	fa92 f2a2 	rbit	r2, r2
 8002e26:	60fa      	str	r2, [r7, #12]
  return result;
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	fab2 f282 	clz	r2, r2
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	f002 021f 	and.w	r2, r2, #31
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0b7      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e46:	4b5e      	ldr	r3, [pc, #376]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	495b      	ldr	r1, [pc, #364]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e60:	4b57      	ldr	r3, [pc, #348]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	4a56      	ldr	r2, [pc, #344]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e78:	4b51      	ldr	r3, [pc, #324]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	f023 0203 	bic.w	r2, r3, #3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	494e      	ldr	r1, [pc, #312]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d008      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e96:	4b4a      	ldr	r3, [pc, #296]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f023 0210 	bic.w	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	4947      	ldr	r1, [pc, #284]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002eb4:	4b42      	ldr	r3, [pc, #264]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	493f      	ldr	r1, [pc, #252]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f023 0220 	bic.w	r2, r3, #32
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	4938      	ldr	r1, [pc, #224]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ef0:	4b33      	ldr	r3, [pc, #204]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	4930      	ldr	r1, [pc, #192]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f0e:	4b2c      	ldr	r3, [pc, #176]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	4929      	ldr	r1, [pc, #164]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002f2c:	4b24      	ldr	r3, [pc, #144]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	4921      	ldr	r1, [pc, #132]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f4a:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	491a      	ldr	r1, [pc, #104]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f68:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	4912      	ldr	r1, [pc, #72]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	490b      	ldr	r1, [pc, #44]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	4903      	ldr	r1, [pc, #12]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3748      	adds	r7, #72	; 0x48
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e049      	b.n	800306a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fe f810 	bl	8001010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3304      	adds	r3, #4
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f000 fc98 	bl	8003938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e049      	b.n	8003118 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d106      	bne.n	800309e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7fd ff81 	bl	8000fa0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2202      	movs	r2, #2
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3304      	adds	r3, #4
 80030ae:	4619      	mov	r1, r3
 80030b0:	4610      	mov	r0, r2
 80030b2:	f000 fc41 	bl	8003938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d109      	bne.n	8003144 <HAL_TIM_PWM_Start+0x24>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	bf14      	ite	ne
 800313c:	2301      	movne	r3, #1
 800313e:	2300      	moveq	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	e03c      	b.n	80031be <HAL_TIM_PWM_Start+0x9e>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b04      	cmp	r3, #4
 8003148:	d109      	bne.n	800315e <HAL_TIM_PWM_Start+0x3e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	bf14      	ite	ne
 8003156:	2301      	movne	r3, #1
 8003158:	2300      	moveq	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	e02f      	b.n	80031be <HAL_TIM_PWM_Start+0x9e>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b08      	cmp	r3, #8
 8003162:	d109      	bne.n	8003178 <HAL_TIM_PWM_Start+0x58>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b01      	cmp	r3, #1
 800316e:	bf14      	ite	ne
 8003170:	2301      	movne	r3, #1
 8003172:	2300      	moveq	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	e022      	b.n	80031be <HAL_TIM_PWM_Start+0x9e>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b0c      	cmp	r3, #12
 800317c:	d109      	bne.n	8003192 <HAL_TIM_PWM_Start+0x72>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	bf14      	ite	ne
 800318a:	2301      	movne	r3, #1
 800318c:	2300      	moveq	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	e015      	b.n	80031be <HAL_TIM_PWM_Start+0x9e>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b10      	cmp	r3, #16
 8003196:	d109      	bne.n	80031ac <HAL_TIM_PWM_Start+0x8c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	e008      	b.n	80031be <HAL_TIM_PWM_Start+0x9e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	bf14      	ite	ne
 80031b8:	2301      	movne	r3, #1
 80031ba:	2300      	moveq	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e083      	b.n	80032ce <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_PWM_Start+0xb6>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d4:	e023      	b.n	800321e <HAL_TIM_PWM_Start+0xfe>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_PWM_Start+0xc6>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e4:	e01b      	b.n	800321e <HAL_TIM_PWM_Start+0xfe>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d104      	bne.n	80031f6 <HAL_TIM_PWM_Start+0xd6>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f4:	e013      	b.n	800321e <HAL_TIM_PWM_Start+0xfe>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b0c      	cmp	r3, #12
 80031fa:	d104      	bne.n	8003206 <HAL_TIM_PWM_Start+0xe6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003204:	e00b      	b.n	800321e <HAL_TIM_PWM_Start+0xfe>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b10      	cmp	r3, #16
 800320a:	d104      	bne.n	8003216 <HAL_TIM_PWM_Start+0xf6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003214:	e003      	b.n	800321e <HAL_TIM_PWM_Start+0xfe>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2201      	movs	r2, #1
 8003224:	6839      	ldr	r1, [r7, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 ff34 	bl	8004094 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a29      	ldr	r2, [pc, #164]	; (80032d8 <HAL_TIM_PWM_Start+0x1b8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00e      	beq.n	8003254 <HAL_TIM_PWM_Start+0x134>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a28      	ldr	r2, [pc, #160]	; (80032dc <HAL_TIM_PWM_Start+0x1bc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d009      	beq.n	8003254 <HAL_TIM_PWM_Start+0x134>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a26      	ldr	r2, [pc, #152]	; (80032e0 <HAL_TIM_PWM_Start+0x1c0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d004      	beq.n	8003254 <HAL_TIM_PWM_Start+0x134>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a25      	ldr	r2, [pc, #148]	; (80032e4 <HAL_TIM_PWM_Start+0x1c4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d101      	bne.n	8003258 <HAL_TIM_PWM_Start+0x138>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_TIM_PWM_Start+0x13a>
 8003258:	2300      	movs	r3, #0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800326c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a19      	ldr	r2, [pc, #100]	; (80032d8 <HAL_TIM_PWM_Start+0x1b8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d009      	beq.n	800328c <HAL_TIM_PWM_Start+0x16c>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003280:	d004      	beq.n	800328c <HAL_TIM_PWM_Start+0x16c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a15      	ldr	r2, [pc, #84]	; (80032dc <HAL_TIM_PWM_Start+0x1bc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d115      	bne.n	80032b8 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_TIM_PWM_Start+0x1c8>)
 8003294:	4013      	ands	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b06      	cmp	r3, #6
 800329c:	d015      	beq.n	80032ca <HAL_TIM_PWM_Start+0x1aa>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a4:	d011      	beq.n	80032ca <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0201 	orr.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b6:	e008      	b.n	80032ca <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e000      	b.n	80032cc <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40014000 	.word	0x40014000
 80032e0:	40014400 	.word	0x40014400
 80032e4:	40014800 	.word	0x40014800
 80032e8:	00010007 	.word	0x00010007

080032ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d122      	bne.n	8003348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b02      	cmp	r3, #2
 800330e:	d11b      	bne.n	8003348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0202 	mvn.w	r2, #2
 8003318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fae3 	bl	80038fa <HAL_TIM_IC_CaptureCallback>
 8003334:	e005      	b.n	8003342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fad5 	bl	80038e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fae6 	bl	800390e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b04      	cmp	r3, #4
 8003354:	d122      	bne.n	800339c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b04      	cmp	r3, #4
 8003362:	d11b      	bne.n	800339c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0204 	mvn.w	r2, #4
 800336c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fab9 	bl	80038fa <HAL_TIM_IC_CaptureCallback>
 8003388:	e005      	b.n	8003396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 faab 	bl	80038e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fabc 	bl	800390e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d122      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d11b      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0208 	mvn.w	r2, #8
 80033c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2204      	movs	r2, #4
 80033c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fa8f 	bl	80038fa <HAL_TIM_IC_CaptureCallback>
 80033dc:	e005      	b.n	80033ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa81 	bl	80038e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fa92 	bl	800390e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	2b10      	cmp	r3, #16
 80033fc:	d122      	bne.n	8003444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b10      	cmp	r3, #16
 800340a:	d11b      	bne.n	8003444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0210 	mvn.w	r2, #16
 8003414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2208      	movs	r2, #8
 800341a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fa65 	bl	80038fa <HAL_TIM_IC_CaptureCallback>
 8003430:	e005      	b.n	800343e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fa57 	bl	80038e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fa68 	bl	800390e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d10e      	bne.n	8003470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b01      	cmp	r3, #1
 800345e:	d107      	bne.n	8003470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0201 	mvn.w	r2, #1
 8003468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd f95a 	bl	8000724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347a:	2b80      	cmp	r3, #128	; 0x80
 800347c:	d10e      	bne.n	800349c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003488:	2b80      	cmp	r3, #128	; 0x80
 800348a:	d107      	bne.n	800349c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 ff0a 	bl	80042b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034aa:	d10e      	bne.n	80034ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b80      	cmp	r3, #128	; 0x80
 80034b8:	d107      	bne.n	80034ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fefd 	bl	80042c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d10e      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e2:	2b40      	cmp	r3, #64	; 0x40
 80034e4:	d107      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fa16 	bl	8003922 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b20      	cmp	r3, #32
 8003502:	d10e      	bne.n	8003522 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b20      	cmp	r3, #32
 8003510:	d107      	bne.n	8003522 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f06f 0220 	mvn.w	r2, #32
 800351a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 febd 	bl	800429c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003546:	2302      	movs	r3, #2
 8003548:	e0ff      	b.n	800374a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b14      	cmp	r3, #20
 8003556:	f200 80f0 	bhi.w	800373a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800355a:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003560:	080035b5 	.word	0x080035b5
 8003564:	0800373b 	.word	0x0800373b
 8003568:	0800373b 	.word	0x0800373b
 800356c:	0800373b 	.word	0x0800373b
 8003570:	080035f5 	.word	0x080035f5
 8003574:	0800373b 	.word	0x0800373b
 8003578:	0800373b 	.word	0x0800373b
 800357c:	0800373b 	.word	0x0800373b
 8003580:	08003637 	.word	0x08003637
 8003584:	0800373b 	.word	0x0800373b
 8003588:	0800373b 	.word	0x0800373b
 800358c:	0800373b 	.word	0x0800373b
 8003590:	08003677 	.word	0x08003677
 8003594:	0800373b 	.word	0x0800373b
 8003598:	0800373b 	.word	0x0800373b
 800359c:	0800373b 	.word	0x0800373b
 80035a0:	080036b9 	.word	0x080036b9
 80035a4:	0800373b 	.word	0x0800373b
 80035a8:	0800373b 	.word	0x0800373b
 80035ac:	0800373b 	.word	0x0800373b
 80035b0:	080036f9 	.word	0x080036f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fa2a 	bl	8003a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0208 	orr.w	r2, r2, #8
 80035ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0204 	bic.w	r2, r2, #4
 80035de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6999      	ldr	r1, [r3, #24]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	619a      	str	r2, [r3, #24]
      break;
 80035f2:	e0a5      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fa90 	bl	8003b20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800360e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6999      	ldr	r1, [r3, #24]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	021a      	lsls	r2, r3, #8
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	619a      	str	r2, [r3, #24]
      break;
 8003634:	e084      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 faef 	bl	8003c20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0208 	orr.w	r2, r2, #8
 8003650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0204 	bic.w	r2, r2, #4
 8003660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69d9      	ldr	r1, [r3, #28]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	61da      	str	r2, [r3, #28]
      break;
 8003674:	e064      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fb4d 	bl	8003d1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69d9      	ldr	r1, [r3, #28]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	021a      	lsls	r2, r3, #8
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	61da      	str	r2, [r3, #28]
      break;
 80036b6:	e043      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fb90 	bl	8003de4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0208 	orr.w	r2, r2, #8
 80036d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0204 	bic.w	r2, r2, #4
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036f6:	e023      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fbce 	bl	8003ea0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003712:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003722:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	021a      	lsls	r2, r3, #8
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003738:	e002      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
      break;
 800373e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003748:	7dfb      	ldrb	r3, [r7, #23]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop

08003754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_TIM_ConfigClockSource+0x1c>
 800376c:	2302      	movs	r3, #2
 800376e:	e0b6      	b.n	80038de <HAL_TIM_ConfigClockSource+0x18a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800379a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ac:	d03e      	beq.n	800382c <HAL_TIM_ConfigClockSource+0xd8>
 80037ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b2:	f200 8087 	bhi.w	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ba:	f000 8086 	beq.w	80038ca <HAL_TIM_ConfigClockSource+0x176>
 80037be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c2:	d87f      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037c4:	2b70      	cmp	r3, #112	; 0x70
 80037c6:	d01a      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0xaa>
 80037c8:	2b70      	cmp	r3, #112	; 0x70
 80037ca:	d87b      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037cc:	2b60      	cmp	r3, #96	; 0x60
 80037ce:	d050      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x11e>
 80037d0:	2b60      	cmp	r3, #96	; 0x60
 80037d2:	d877      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037d4:	2b50      	cmp	r3, #80	; 0x50
 80037d6:	d03c      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0xfe>
 80037d8:	2b50      	cmp	r3, #80	; 0x50
 80037da:	d873      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	d058      	beq.n	8003892 <HAL_TIM_ConfigClockSource+0x13e>
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d86f      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037e4:	2b30      	cmp	r3, #48	; 0x30
 80037e6:	d064      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x15e>
 80037e8:	2b30      	cmp	r3, #48	; 0x30
 80037ea:	d86b      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d060      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x15e>
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d867      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05c      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x15e>
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d05a      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x15e>
 80037fc:	e062      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6899      	ldr	r1, [r3, #8]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f000 fc21 	bl	8004054 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	609a      	str	r2, [r3, #8]
      break;
 800382a:	e04f      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	6899      	ldr	r1, [r3, #8]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f000 fc0a 	bl	8004054 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800384e:	609a      	str	r2, [r3, #8]
      break;
 8003850:	e03c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	461a      	mov	r2, r3
 8003860:	f000 fb7e 	bl	8003f60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2150      	movs	r1, #80	; 0x50
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fbd7 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 8003870:	e02c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6859      	ldr	r1, [r3, #4]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	461a      	mov	r2, r3
 8003880:	f000 fb9d 	bl	8003fbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2160      	movs	r1, #96	; 0x60
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fbc7 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 8003890:	e01c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	461a      	mov	r2, r3
 80038a0:	f000 fb5e 	bl	8003f60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2140      	movs	r1, #64	; 0x40
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fbb7 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 80038b0:	e00c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f000 fbae 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 80038c2:	e003      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
      break;
 80038c8:	e000      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80038ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
	...

08003938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a2e      	ldr	r2, [pc, #184]	; (8003a04 <TIM_Base_SetConfig+0xcc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_Base_SetConfig+0x20>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003956:	d108      	bne.n	800396a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a25      	ldr	r2, [pc, #148]	; (8003a04 <TIM_Base_SetConfig+0xcc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00f      	beq.n	8003992 <TIM_Base_SetConfig+0x5a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003978:	d00b      	beq.n	8003992 <TIM_Base_SetConfig+0x5a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a22      	ldr	r2, [pc, #136]	; (8003a08 <TIM_Base_SetConfig+0xd0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d007      	beq.n	8003992 <TIM_Base_SetConfig+0x5a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a21      	ldr	r2, [pc, #132]	; (8003a0c <TIM_Base_SetConfig+0xd4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d003      	beq.n	8003992 <TIM_Base_SetConfig+0x5a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a20      	ldr	r2, [pc, #128]	; (8003a10 <TIM_Base_SetConfig+0xd8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d108      	bne.n	80039a4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a0e      	ldr	r2, [pc, #56]	; (8003a04 <TIM_Base_SetConfig+0xcc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00b      	beq.n	80039e8 <TIM_Base_SetConfig+0xb0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a0d      	ldr	r2, [pc, #52]	; (8003a08 <TIM_Base_SetConfig+0xd0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d007      	beq.n	80039e8 <TIM_Base_SetConfig+0xb0>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a0c      	ldr	r2, [pc, #48]	; (8003a0c <TIM_Base_SetConfig+0xd4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d003      	beq.n	80039e8 <TIM_Base_SetConfig+0xb0>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a0b      	ldr	r2, [pc, #44]	; (8003a10 <TIM_Base_SetConfig+0xd8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d103      	bne.n	80039f0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	615a      	str	r2, [r3, #20]
}
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40012c00 	.word	0x40012c00
 8003a08:	40014000 	.word	0x40014000
 8003a0c:	40014400 	.word	0x40014400
 8003a10:	40014800 	.word	0x40014800

08003a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	f023 0201 	bic.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f023 0302 	bic.w	r3, r3, #2
 8003a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a28      	ldr	r2, [pc, #160]	; (8003b10 <TIM_OC1_SetConfig+0xfc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00b      	beq.n	8003a8c <TIM_OC1_SetConfig+0x78>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <TIM_OC1_SetConfig+0x100>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d007      	beq.n	8003a8c <TIM_OC1_SetConfig+0x78>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a26      	ldr	r2, [pc, #152]	; (8003b18 <TIM_OC1_SetConfig+0x104>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d003      	beq.n	8003a8c <TIM_OC1_SetConfig+0x78>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a25      	ldr	r2, [pc, #148]	; (8003b1c <TIM_OC1_SetConfig+0x108>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d10c      	bne.n	8003aa6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f023 0308 	bic.w	r3, r3, #8
 8003a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f023 0304 	bic.w	r3, r3, #4
 8003aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a19      	ldr	r2, [pc, #100]	; (8003b10 <TIM_OC1_SetConfig+0xfc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00b      	beq.n	8003ac6 <TIM_OC1_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a18      	ldr	r2, [pc, #96]	; (8003b14 <TIM_OC1_SetConfig+0x100>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <TIM_OC1_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a17      	ldr	r2, [pc, #92]	; (8003b18 <TIM_OC1_SetConfig+0x104>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d003      	beq.n	8003ac6 <TIM_OC1_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a16      	ldr	r2, [pc, #88]	; (8003b1c <TIM_OC1_SetConfig+0x108>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d111      	bne.n	8003aea <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	621a      	str	r2, [r3, #32]
}
 8003b04:	bf00      	nop
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	40012c00 	.word	0x40012c00
 8003b14:	40014000 	.word	0x40014000
 8003b18:	40014400 	.word	0x40014400
 8003b1c:	40014800 	.word	0x40014800

08003b20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f023 0210 	bic.w	r2, r3, #16
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f023 0320 	bic.w	r3, r3, #32
 8003b6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a24      	ldr	r2, [pc, #144]	; (8003c10 <TIM_OC2_SetConfig+0xf0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d10d      	bne.n	8003ba0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a1b      	ldr	r2, [pc, #108]	; (8003c10 <TIM_OC2_SetConfig+0xf0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00b      	beq.n	8003bc0 <TIM_OC2_SetConfig+0xa0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a1a      	ldr	r2, [pc, #104]	; (8003c14 <TIM_OC2_SetConfig+0xf4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d007      	beq.n	8003bc0 <TIM_OC2_SetConfig+0xa0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <TIM_OC2_SetConfig+0xf8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d003      	beq.n	8003bc0 <TIM_OC2_SetConfig+0xa0>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a18      	ldr	r2, [pc, #96]	; (8003c1c <TIM_OC2_SetConfig+0xfc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d113      	bne.n	8003be8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bc6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bce:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	621a      	str	r2, [r3, #32]
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40012c00 	.word	0x40012c00
 8003c14:	40014000 	.word	0x40014000
 8003c18:	40014400 	.word	0x40014400
 8003c1c:	40014800 	.word	0x40014800

08003c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0303 	bic.w	r3, r3, #3
 8003c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a23      	ldr	r2, [pc, #140]	; (8003d0c <TIM_OC3_SetConfig+0xec>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d10d      	bne.n	8003c9e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c9c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a1a      	ldr	r2, [pc, #104]	; (8003d0c <TIM_OC3_SetConfig+0xec>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00b      	beq.n	8003cbe <TIM_OC3_SetConfig+0x9e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <TIM_OC3_SetConfig+0xf0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <TIM_OC3_SetConfig+0x9e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a18      	ldr	r2, [pc, #96]	; (8003d14 <TIM_OC3_SetConfig+0xf4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d003      	beq.n	8003cbe <TIM_OC3_SetConfig+0x9e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a17      	ldr	r2, [pc, #92]	; (8003d18 <TIM_OC3_SetConfig+0xf8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d113      	bne.n	8003ce6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	621a      	str	r2, [r3, #32]
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40012c00 	.word	0x40012c00
 8003d10:	40014000 	.word	0x40014000
 8003d14:	40014400 	.word	0x40014400
 8003d18:	40014800 	.word	0x40014800

08003d1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	021b      	lsls	r3, r3, #8
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	031b      	lsls	r3, r3, #12
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a16      	ldr	r2, [pc, #88]	; (8003dd4 <TIM_OC4_SetConfig+0xb8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00b      	beq.n	8003d98 <TIM_OC4_SetConfig+0x7c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a15      	ldr	r2, [pc, #84]	; (8003dd8 <TIM_OC4_SetConfig+0xbc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d007      	beq.n	8003d98 <TIM_OC4_SetConfig+0x7c>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a14      	ldr	r2, [pc, #80]	; (8003ddc <TIM_OC4_SetConfig+0xc0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d003      	beq.n	8003d98 <TIM_OC4_SetConfig+0x7c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a13      	ldr	r2, [pc, #76]	; (8003de0 <TIM_OC4_SetConfig+0xc4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d109      	bne.n	8003dac <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	019b      	lsls	r3, r3, #6
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	621a      	str	r2, [r3, #32]
}
 8003dc6:	bf00      	nop
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40012c00 	.word	0x40012c00
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	40014400 	.word	0x40014400
 8003de0:	40014800 	.word	0x40014800

08003de4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a15      	ldr	r2, [pc, #84]	; (8003e90 <TIM_OC5_SetConfig+0xac>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00b      	beq.n	8003e56 <TIM_OC5_SetConfig+0x72>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <TIM_OC5_SetConfig+0xb0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d007      	beq.n	8003e56 <TIM_OC5_SetConfig+0x72>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <TIM_OC5_SetConfig+0xb4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d003      	beq.n	8003e56 <TIM_OC5_SetConfig+0x72>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <TIM_OC5_SetConfig+0xb8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d109      	bne.n	8003e6a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	621a      	str	r2, [r3, #32]
}
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	40014000 	.word	0x40014000
 8003e98:	40014400 	.word	0x40014400
 8003e9c:	40014800 	.word	0x40014800

08003ea0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	051b      	lsls	r3, r3, #20
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <TIM_OC6_SetConfig+0xb0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00b      	beq.n	8003f14 <TIM_OC6_SetConfig+0x74>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <TIM_OC6_SetConfig+0xb4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d007      	beq.n	8003f14 <TIM_OC6_SetConfig+0x74>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <TIM_OC6_SetConfig+0xb8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_OC6_SetConfig+0x74>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a13      	ldr	r2, [pc, #76]	; (8003f5c <TIM_OC6_SetConfig+0xbc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d109      	bne.n	8003f28 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	029b      	lsls	r3, r3, #10
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	621a      	str	r2, [r3, #32]
}
 8003f42:	bf00      	nop
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40014400 	.word	0x40014400
 8003f5c:	40014800 	.word	0x40014800

08003f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f023 0201 	bic.w	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f023 030a 	bic.w	r3, r3, #10
 8003f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b087      	sub	sp, #28
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	f023 0210 	bic.w	r2, r3, #16
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	031b      	lsls	r3, r3, #12
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ffa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	621a      	str	r2, [r3, #32]
}
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004034:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	f043 0307 	orr.w	r3, r3, #7
 8004040:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	609a      	str	r2, [r3, #8]
}
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800406e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	021a      	lsls	r2, r3, #8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	431a      	orrs	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4313      	orrs	r3, r2
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	609a      	str	r2, [r3, #8]
}
 8004088:	bf00      	nop
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	2201      	movs	r2, #1
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a1a      	ldr	r2, [r3, #32]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	401a      	ands	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a1a      	ldr	r2, [r3, #32]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 031f 	and.w	r3, r3, #31
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	fa01 f303 	lsl.w	r3, r1, r3
 80040cc:	431a      	orrs	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e04f      	b.n	8004198 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a21      	ldr	r2, [pc, #132]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d108      	bne.n	8004134 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004128:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a14      	ldr	r2, [pc, #80]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d009      	beq.n	800416c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004160:	d004      	beq.n	800416c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d10c      	bne.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004172:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	4313      	orrs	r3, r2
 800417c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	40014000 	.word	0x40014000

080041ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e060      	b.n	800428a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	041b      	lsls	r3, r3, #16
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a14      	ldr	r2, [pc, #80]	; (8004298 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d115      	bne.n	8004278 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	051b      	lsls	r3, r3, #20
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40012c00 	.word	0x40012c00

0800429c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <__libc_init_array>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	4d0d      	ldr	r5, [pc, #52]	; (8004310 <__libc_init_array+0x38>)
 80042dc:	4c0d      	ldr	r4, [pc, #52]	; (8004314 <__libc_init_array+0x3c>)
 80042de:	1b64      	subs	r4, r4, r5
 80042e0:	10a4      	asrs	r4, r4, #2
 80042e2:	2600      	movs	r6, #0
 80042e4:	42a6      	cmp	r6, r4
 80042e6:	d109      	bne.n	80042fc <__libc_init_array+0x24>
 80042e8:	4d0b      	ldr	r5, [pc, #44]	; (8004318 <__libc_init_array+0x40>)
 80042ea:	4c0c      	ldr	r4, [pc, #48]	; (800431c <__libc_init_array+0x44>)
 80042ec:	f000 f820 	bl	8004330 <_init>
 80042f0:	1b64      	subs	r4, r4, r5
 80042f2:	10a4      	asrs	r4, r4, #2
 80042f4:	2600      	movs	r6, #0
 80042f6:	42a6      	cmp	r6, r4
 80042f8:	d105      	bne.n	8004306 <__libc_init_array+0x2e>
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004300:	4798      	blx	r3
 8004302:	3601      	adds	r6, #1
 8004304:	e7ee      	b.n	80042e4 <__libc_init_array+0xc>
 8004306:	f855 3b04 	ldr.w	r3, [r5], #4
 800430a:	4798      	blx	r3
 800430c:	3601      	adds	r6, #1
 800430e:	e7f2      	b.n	80042f6 <__libc_init_array+0x1e>
 8004310:	08004380 	.word	0x08004380
 8004314:	08004380 	.word	0x08004380
 8004318:	08004380 	.word	0x08004380
 800431c:	08004384 	.word	0x08004384

08004320 <memset>:
 8004320:	4402      	add	r2, r0
 8004322:	4603      	mov	r3, r0
 8004324:	4293      	cmp	r3, r2
 8004326:	d100      	bne.n	800432a <memset+0xa>
 8004328:	4770      	bx	lr
 800432a:	f803 1b01 	strb.w	r1, [r3], #1
 800432e:	e7f9      	b.n	8004324 <memset+0x4>

08004330 <_init>:
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	bf00      	nop
 8004334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004336:	bc08      	pop	{r3}
 8004338:	469e      	mov	lr, r3
 800433a:	4770      	bx	lr

0800433c <_fini>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	bf00      	nop
 8004340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004342:	bc08      	pop	{r3}
 8004344:	469e      	mov	lr, r3
 8004346:	4770      	bx	lr
