
ESC_Software_F302R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004370  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004530  08004530  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004530  08004530  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004530  08004530  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004534  08004534  00014534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000001c  08004554  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08004554  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d918  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f5e  00000000  00000000  0002d964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002f8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  000303a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbac  00000000  00000000  00030d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d61a  00000000  00000000  0004c93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5476  00000000  00000000  00059f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff3cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c18  00000000  00000000  000ff420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044e0 	.word	0x080044e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	080044e0 	.word	0x080044e0

080001c8 <PeripheralsStart>:
  for(i=0 ; i<len ; i++)
    ITM_SendChar((*ptr++));
  return len;
}
void PeripheralsStart()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	  Motor_Control.Duty_Cycle = 25;
 80001cc:	4b1f      	ldr	r3, [pc, #124]	; (800024c <PeripheralsStart+0x84>)
 80001ce:	2219      	movs	r2, #25
 80001d0:	709a      	strb	r2, [r3, #2]

	  Start_Up.Duty_Cycle = 50;
 80001d2:	4b1f      	ldr	r3, [pc, #124]	; (8000250 <PeripheralsStart+0x88>)
 80001d4:	2232      	movs	r2, #50	; 0x32
 80001d6:	701a      	strb	r2, [r3, #0]
	  Start_Up.Delay_Seconds = 0.00005f; // 50 mikro saniye (20k task'ta yapılabilecek minimum süre)
 80001d8:	4b1d      	ldr	r3, [pc, #116]	; (8000250 <PeripheralsStart+0x88>)
 80001da:	4a1e      	ldr	r2, [pc, #120]	; (8000254 <PeripheralsStart+0x8c>)
 80001dc:	605a      	str	r2, [r3, #4]
	  Start_Up.Tour = 5;
 80001de:	4b1c      	ldr	r3, [pc, #112]	; (8000250 <PeripheralsStart+0x88>)
 80001e0:	2205      	movs	r2, #5
 80001e2:	805a      	strh	r2, [r3, #2]

	  Start_Up.Align_Coefficient = 2;
 80001e4:	4b1a      	ldr	r3, [pc, #104]	; (8000250 <PeripheralsStart+0x88>)
 80001e6:	2202      	movs	r2, #2
 80001e8:	819a      	strh	r2, [r3, #12]
	  Start_Up.Align_DutyCycle = 50;
 80001ea:	4b19      	ldr	r3, [pc, #100]	; (8000250 <PeripheralsStart+0x88>)
 80001ec:	2232      	movs	r2, #50	; 0x32
 80001ee:	81da      	strh	r2, [r3, #14]

	  Motor_Control.Drive_Stage = START_UP;
 80001f0:	4b16      	ldr	r3, [pc, #88]	; (800024c <PeripheralsStart+0x84>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	  Motor_Control.Blinde_Mode_RPM = 20;
 80001f8:	4b14      	ldr	r3, [pc, #80]	; (800024c <PeripheralsStart+0x84>)
 80001fa:	2214      	movs	r2, #20
 80001fc:	629a      	str	r2, [r3, #40]	; 0x28

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	// Phase A High
 80001fe:	2100      	movs	r1, #0
 8000200:	4815      	ldr	r0, [pc, #84]	; (8000258 <PeripheralsStart+0x90>)
 8000202:	f003 f865 	bl	80032d0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	// Phase B High
 8000206:	2104      	movs	r1, #4
 8000208:	4813      	ldr	r0, [pc, #76]	; (8000258 <PeripheralsStart+0x90>)
 800020a:	f003 f861 	bl	80032d0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	// Phase C High
 800020e:	2108      	movs	r1, #8
 8000210:	4811      	ldr	r0, [pc, #68]	; (8000258 <PeripheralsStart+0x90>)
 8000212:	f003 f85d 	bl	80032d0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// Phase A Low
 8000216:	2100      	movs	r1, #0
 8000218:	4810      	ldr	r0, [pc, #64]	; (800025c <PeripheralsStart+0x94>)
 800021a:	f003 f859 	bl	80032d0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	// Phase B Low
 800021e:	2104      	movs	r1, #4
 8000220:	480e      	ldr	r0, [pc, #56]	; (800025c <PeripheralsStart+0x94>)
 8000222:	f003 f855 	bl	80032d0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	// Phase C Low
 8000226:	2108      	movs	r1, #8
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <PeripheralsStart+0x94>)
 800022a:	f003 f851 	bl	80032d0 <HAL_TIM_PWM_Start>

	  HAL_COMP_Start(&hcomp2);	// Phase A Out
 800022e:	480c      	ldr	r0, [pc, #48]	; (8000260 <PeripheralsStart+0x98>)
 8000230:	f001 f964 	bl	80014fc <HAL_COMP_Start>
	  HAL_COMP_Start(&hcomp4);	// Phase B Out
 8000234:	480b      	ldr	r0, [pc, #44]	; (8000264 <PeripheralsStart+0x9c>)
 8000236:	f001 f961 	bl	80014fc <HAL_COMP_Start>
	  HAL_COMP_Start(&hcomp6);	// Phase C Out
 800023a:	480b      	ldr	r0, [pc, #44]	; (8000268 <PeripheralsStart+0xa0>)
 800023c:	f001 f95e 	bl	80014fc <HAL_COMP_Start>

	  HAL_TIM_Base_Start_IT(&htim15);	// for Time Tasks
 8000240:	480a      	ldr	r0, [pc, #40]	; (800026c <PeripheralsStart+0xa4>)
 8000242:	f002 ff99 	bl	8003178 <HAL_TIM_Base_Start_IT>
}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	20000224 	.word	0x20000224
 8000250:	20000194 	.word	0x20000194
 8000254:	3851b717 	.word	0x3851b717
 8000258:	20000148 	.word	0x20000148
 800025c:	200001d4 	.word	0x200001d4
 8000260:	200001a4 	.word	0x200001a4
 8000264:	20000110 	.word	0x20000110
 8000268:	200000d8 	.word	0x200000d8
 800026c:	20000088 	.word	0x20000088

08000270 <Stop_Motor>:

void Stop_Motor()
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000274:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <Stop_Motor+0x48>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2200      	movs	r2, #0
 800027a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800027c:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <Stop_Motor+0x48>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2200      	movs	r2, #0
 8000282:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <Stop_Motor+0x48>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2200      	movs	r2, #0
 800028a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 800028c:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <Stop_Motor+0x4c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2200      	movs	r2, #0
 8000292:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <Stop_Motor+0x4c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2200      	movs	r2, #0
 800029a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <Stop_Motor+0x4c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2200      	movs	r2, #0
 80002a2:	63da      	str	r2, [r3, #60]	; 0x3c

	Motor_Control.Drive_Stage = START_UP;
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <Stop_Motor+0x50>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	20000148 	.word	0x20000148
 80002bc:	200001d4 	.word	0x200001d4
 80002c0:	20000224 	.word	0x20000224

080002c4 <Start_Up_Motor>:

void Start_Up_Motor()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	static int Tour_Counter = 0;

	if(Motor_Control.Control_Counter++ >= MOTOR_CONTROL_TASK_HZ*Start_Up.Delay_Seconds)
 80002c8:	4b29      	ldr	r3, [pc, #164]	; (8000370 <Start_Up_Motor+0xac>)
 80002ca:	69da      	ldr	r2, [r3, #28]
 80002cc:	1c53      	adds	r3, r2, #1
 80002ce:	4928      	ldr	r1, [pc, #160]	; (8000370 <Start_Up_Motor+0xac>)
 80002d0:	61cb      	str	r3, [r1, #28]
 80002d2:	ee07 2a90 	vmov	s15, r2
 80002d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80002da:	4b26      	ldr	r3, [pc, #152]	; (8000374 <Start_Up_Motor+0xb0>)
 80002dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80002e0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8000378 <Start_Up_Motor+0xb4>
 80002e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80002e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002f0:	da00      	bge.n	80002f4 <Start_Up_Motor+0x30>
		else
		{
			Motor_Control.Motor_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
		}
	}
}
 80002f2:	e03a      	b.n	800036a <Start_Up_Motor+0xa6>
		Motor_Control.Control_Counter = 0;
 80002f4:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <Start_Up_Motor+0xac>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	61da      	str	r2, [r3, #28]
		Set_Motor_State(Trigger_Control_State[Motor_Control.Motor_State_Index], Start_Up.Duty_Cycle);
 80002fa:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <Start_Up_Motor+0xac>)
 80002fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000300:	461a      	mov	r2, r3
 8000302:	4b1e      	ldr	r3, [pc, #120]	; (800037c <Start_Up_Motor+0xb8>)
 8000304:	5c9b      	ldrb	r3, [r3, r2]
 8000306:	4a1b      	ldr	r2, [pc, #108]	; (8000374 <Start_Up_Motor+0xb0>)
 8000308:	7812      	ldrb	r2, [r2, #0]
 800030a:	b292      	uxth	r2, r2
 800030c:	4611      	mov	r1, r2
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f98c 	bl	800062c <Set_Motor_State>
		if( (Trigger_Control_State[Motor_Control.Motor_State_Index] == State_C_B) && Tour_Counter++ >= Start_Up.Tour)
 8000314:	4b16      	ldr	r3, [pc, #88]	; (8000370 <Start_Up_Motor+0xac>)
 8000316:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800031a:	461a      	mov	r2, r3
 800031c:	4b17      	ldr	r3, [pc, #92]	; (800037c <Start_Up_Motor+0xb8>)
 800031e:	5c9b      	ldrb	r3, [r3, r2]
 8000320:	2b04      	cmp	r3, #4
 8000322:	d110      	bne.n	8000346 <Start_Up_Motor+0x82>
 8000324:	4b16      	ldr	r3, [pc, #88]	; (8000380 <Start_Up_Motor+0xbc>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	1c5a      	adds	r2, r3, #1
 800032a:	4915      	ldr	r1, [pc, #84]	; (8000380 <Start_Up_Motor+0xbc>)
 800032c:	600a      	str	r2, [r1, #0]
 800032e:	4a11      	ldr	r2, [pc, #68]	; (8000374 <Start_Up_Motor+0xb0>)
 8000330:	8852      	ldrh	r2, [r2, #2]
 8000332:	4293      	cmp	r3, r2
 8000334:	db07      	blt.n	8000346 <Start_Up_Motor+0x82>
			Motor_Control.Drive_Stage = ALIGN;
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <Start_Up_Motor+0xac>)
 8000338:	2201      	movs	r2, #1
 800033a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			Tour_Counter = 0;
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <Start_Up_Motor+0xbc>)
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
}
 8000344:	e011      	b.n	800036a <Start_Up_Motor+0xa6>
			Motor_Control.Motor_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
 8000346:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <Start_Up_Motor+0xac>)
 8000348:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800034c:	1c5a      	adds	r2, r3, #1
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <Start_Up_Motor+0xc0>)
 8000350:	fb83 3102 	smull	r3, r1, r3, r2
 8000354:	17d3      	asrs	r3, r2, #31
 8000356:	1ac9      	subs	r1, r1, r3
 8000358:	460b      	mov	r3, r1
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	440b      	add	r3, r1
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	1ad1      	subs	r1, r2, r3
 8000362:	b2ca      	uxtb	r2, r1
 8000364:	4b02      	ldr	r3, [pc, #8]	; (8000370 <Start_Up_Motor+0xac>)
 8000366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000224 	.word	0x20000224
 8000374:	20000194 	.word	0x20000194
 8000378:	469c4000 	.word	0x469c4000
 800037c:	080044f8 	.word	0x080044f8
 8000380:	20000038 	.word	0x20000038
 8000384:	2aaaaaab 	.word	0x2aaaaaab

08000388 <Align_Motor>:

void Align_Motor()
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	static int Tour_Counter = 0;

	if(Motor_Control.Control_Counter++ >= MOTOR_CONTROL_TASK_HZ*Start_Up.Delay_Seconds)
 800038c:	4b2b      	ldr	r3, [pc, #172]	; (800043c <Align_Motor+0xb4>)
 800038e:	69da      	ldr	r2, [r3, #28]
 8000390:	1c53      	adds	r3, r2, #1
 8000392:	492a      	ldr	r1, [pc, #168]	; (800043c <Align_Motor+0xb4>)
 8000394:	61cb      	str	r3, [r1, #28]
 8000396:	ee07 2a90 	vmov	s15, r2
 800039a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800039e:	4b28      	ldr	r3, [pc, #160]	; (8000440 <Align_Motor+0xb8>)
 80003a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80003a4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8000444 <Align_Motor+0xbc>
 80003a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80003ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80003b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003b4:	da00      	bge.n	80003b8 <Align_Motor+0x30>
		else
		{
			Motor_Control.Motor_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
		}
	}
}
 80003b6:	e03e      	b.n	8000436 <Align_Motor+0xae>
		Motor_Control.Control_Counter = 0;
 80003b8:	4b20      	ldr	r3, [pc, #128]	; (800043c <Align_Motor+0xb4>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	61da      	str	r2, [r3, #28]
		Set_Motor_State(Trigger_Control_State[Motor_Control.Motor_State_Index], Start_Up.Align_DutyCycle);
 80003be:	4b1f      	ldr	r3, [pc, #124]	; (800043c <Align_Motor+0xb4>)
 80003c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b20      	ldr	r3, [pc, #128]	; (8000448 <Align_Motor+0xc0>)
 80003c8:	5c9b      	ldrb	r3, [r3, r2]
 80003ca:	4a1d      	ldr	r2, [pc, #116]	; (8000440 <Align_Motor+0xb8>)
 80003cc:	89d2      	ldrh	r2, [r2, #14]
 80003ce:	4611      	mov	r1, r2
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 f92b 	bl	800062c <Set_Motor_State>
		if( (Trigger_Control_State[Motor_Control.Motor_State_Index] == State_C_B) && Tour_Counter++ >= Start_Up.Tour*Start_Up.Align_Coefficient)
 80003d6:	4b19      	ldr	r3, [pc, #100]	; (800043c <Align_Motor+0xb4>)
 80003d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003dc:	461a      	mov	r2, r3
 80003de:	4b1a      	ldr	r3, [pc, #104]	; (8000448 <Align_Motor+0xc0>)
 80003e0:	5c9b      	ldrb	r3, [r3, r2]
 80003e2:	2b04      	cmp	r3, #4
 80003e4:	d115      	bne.n	8000412 <Align_Motor+0x8a>
 80003e6:	4b19      	ldr	r3, [pc, #100]	; (800044c <Align_Motor+0xc4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	1c5a      	adds	r2, r3, #1
 80003ec:	4917      	ldr	r1, [pc, #92]	; (800044c <Align_Motor+0xc4>)
 80003ee:	600a      	str	r2, [r1, #0]
 80003f0:	4a13      	ldr	r2, [pc, #76]	; (8000440 <Align_Motor+0xb8>)
 80003f2:	8852      	ldrh	r2, [r2, #2]
 80003f4:	4611      	mov	r1, r2
 80003f6:	4a12      	ldr	r2, [pc, #72]	; (8000440 <Align_Motor+0xb8>)
 80003f8:	8992      	ldrh	r2, [r2, #12]
 80003fa:	fb02 f201 	mul.w	r2, r2, r1
 80003fe:	4293      	cmp	r3, r2
 8000400:	db07      	blt.n	8000412 <Align_Motor+0x8a>
			Motor_Control.Drive_Stage = RUN;
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <Align_Motor+0xb4>)
 8000404:	2202      	movs	r2, #2
 8000406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			Tour_Counter = 0;
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <Align_Motor+0xc4>)
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
}
 8000410:	e011      	b.n	8000436 <Align_Motor+0xae>
			Motor_Control.Motor_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
 8000412:	4b0a      	ldr	r3, [pc, #40]	; (800043c <Align_Motor+0xb4>)
 8000414:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000418:	1c5a      	adds	r2, r3, #1
 800041a:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <Align_Motor+0xc8>)
 800041c:	fb83 3102 	smull	r3, r1, r3, r2
 8000420:	17d3      	asrs	r3, r2, #31
 8000422:	1ac9      	subs	r1, r1, r3
 8000424:	460b      	mov	r3, r1
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	440b      	add	r3, r1
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	1ad1      	subs	r1, r2, r3
 800042e:	b2ca      	uxtb	r2, r1
 8000430:	4b02      	ldr	r3, [pc, #8]	; (800043c <Align_Motor+0xb4>)
 8000432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000224 	.word	0x20000224
 8000440:	20000194 	.word	0x20000194
 8000444:	469c4000 	.word	0x469c4000
 8000448:	080044f8 	.word	0x080044f8
 800044c:	2000003c 	.word	0x2000003c
 8000450:	2aaaaaab 	.word	0x2aaaaaab

08000454 <Run_Motor>:

void Run_Motor()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0

	  static uint8_t Next_State_Index = 0;

	  Motor_Control.A_Out = HAL_GPIO_ReadPin(COMP_A_OUT_GPIO_Port, COMP_A_OUT_Pin);
 8000458:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800045c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000460:	f001 fb9a 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000464:	4603      	mov	r3, r0
 8000466:	461a      	mov	r2, r3
 8000468:	4b29      	ldr	r3, [pc, #164]	; (8000510 <Run_Motor+0xbc>)
 800046a:	605a      	str	r2, [r3, #4]
	  Motor_Control.B_Out = HAL_GPIO_ReadPin(COMP_B_OUT_GPIO_Port, COMP_B_OUT_Pin);
 800046c:	2102      	movs	r1, #2
 800046e:	4829      	ldr	r0, [pc, #164]	; (8000514 <Run_Motor+0xc0>)
 8000470:	f001 fb92 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000474:	4603      	mov	r3, r0
 8000476:	461a      	mov	r2, r3
 8000478:	4b25      	ldr	r3, [pc, #148]	; (8000510 <Run_Motor+0xbc>)
 800047a:	609a      	str	r2, [r3, #8]
	  Motor_Control.C_Out = HAL_GPIO_ReadPin(COMP_C_OUT_GPIO_Port, COMP_C_OUT_Pin);
 800047c:	2140      	movs	r1, #64	; 0x40
 800047e:	4826      	ldr	r0, [pc, #152]	; (8000518 <Run_Motor+0xc4>)
 8000480:	f001 fb8a 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	4b21      	ldr	r3, [pc, #132]	; (8000510 <Run_Motor+0xbc>)
 800048a:	60da      	str	r2, [r3, #12]

	  Motor_Control.Rotor_Position = (Motor_Control.C_Out << 2) + (Motor_Control.B_Out << 1) + (Motor_Control.A_Out);
 800048c:	4b20      	ldr	r3, [pc, #128]	; (8000510 <Run_Motor+0xbc>)
 800048e:	68db      	ldr	r3, [r3, #12]
 8000490:	b2db      	uxtb	r3, r3
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	b2da      	uxtb	r2, r3
 8000496:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <Run_Motor+0xbc>)
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	b2db      	uxtb	r3, r3
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	4413      	add	r3, r2
 80004a2:	b2da      	uxtb	r2, r3
 80004a4:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <Run_Motor+0xbc>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	4413      	add	r3, r2
 80004ac:	b2da      	uxtb	r2, r3
 80004ae:	4b18      	ldr	r3, [pc, #96]	; (8000510 <Run_Motor+0xbc>)
 80004b0:	70da      	strb	r2, [r3, #3]

	  Next_State_Index = (Motor_Control.Motor_State_Index + 1) % 6;
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <Run_Motor+0xbc>)
 80004b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80004b8:	1c5a      	adds	r2, r3, #1
 80004ba:	4b18      	ldr	r3, [pc, #96]	; (800051c <Run_Motor+0xc8>)
 80004bc:	fb83 3102 	smull	r3, r1, r3, r2
 80004c0:	17d3      	asrs	r3, r2, #31
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	460b      	mov	r3, r1
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	440b      	add	r3, r1
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	1ad1      	subs	r1, r2, r3
 80004ce:	b2ca      	uxtb	r2, r1
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <Run_Motor+0xcc>)
 80004d2:	701a      	strb	r2, [r3, #0]

	  if(Motor_Control.Rotor_Position == Trigger_Control_State[Next_State_Index])
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <Run_Motor+0xbc>)
 80004d6:	78da      	ldrb	r2, [r3, #3]
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <Run_Motor+0xcc>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <Run_Motor+0xd0>)
 80004e0:	5c5b      	ldrb	r3, [r3, r1]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d111      	bne.n	800050a <Run_Motor+0xb6>
	  {
		  Motor_Control.Motor_State_Index = Next_State_Index;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <Run_Motor+0xcc>)
 80004e8:	781a      	ldrb	r2, [r3, #0]
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <Run_Motor+0xbc>)
 80004ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		  Set_Motor_State(Trigger_Control_State[Motor_Control.Motor_State_Index], Motor_Control.Duty_Cycle);
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <Run_Motor+0xbc>)
 80004f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80004f6:	461a      	mov	r2, r3
 80004f8:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <Run_Motor+0xd0>)
 80004fa:	5c9b      	ldrb	r3, [r3, r2]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <Run_Motor+0xbc>)
 80004fe:	7892      	ldrb	r2, [r2, #2]
 8000500:	b292      	uxth	r2, r2
 8000502:	4611      	mov	r1, r2
 8000504:	4618      	mov	r0, r3
 8000506:	f000 f891 	bl	800062c <Set_Motor_State>
//			  *DWT_CYCCNT = 0;
//		  }

	  }

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000224 	.word	0x20000224
 8000514:	48000400 	.word	0x48000400
 8000518:	48000800 	.word	0x48000800
 800051c:	2aaaaaab 	.word	0x2aaaaaab
 8000520:	20000040 	.word	0x20000040
 8000524:	080044f8 	.word	0x080044f8

08000528 <Blinde_Mode>:
// 			  wait a minute 0,008 saniye 7200 rpm yapıyo yani normal. o zaman sıkıntı başka bir yerde, burda değil
	  }
}

void Blinde_Mode()
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	  if(Motor_Control.Blinde_Mode_Counter++ >= MOTOR_CONTROL_TASK_HZ*(float)(1.0f/(Motor_Control.Blinde_Mode_RPM*6)))
 800052c:	4b38      	ldr	r3, [pc, #224]	; (8000610 <Blinde_Mode+0xe8>)
 800052e:	6a1a      	ldr	r2, [r3, #32]
 8000530:	1c53      	adds	r3, r2, #1
 8000532:	4937      	ldr	r1, [pc, #220]	; (8000610 <Blinde_Mode+0xe8>)
 8000534:	620b      	str	r3, [r1, #32]
 8000536:	ee07 2a90 	vmov	s15, r2
 800053a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800053e:	4b34      	ldr	r3, [pc, #208]	; (8000610 <Blinde_Mode+0xe8>)
 8000540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000542:	4613      	mov	r3, r2
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	4413      	add	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	ee07 3a90 	vmov	s15, r3
 800054e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000552:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000556:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800055a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8000614 <Blinde_Mode+0xec>
 800055e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000562:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800056a:	da00      	bge.n	800056e <Blinde_Mode+0x46>
		  Set_Motor_State(Trigger_Control_State[h], Motor_Control.Duty_Cycle);
		  h = (h+1) % 6;

		  Motor_Control.Drive_Stage = START_UP;
	  }
}
 800056c:	e04d      	b.n	800060a <Blinde_Mode+0xe2>
		  Motor_Control.Blinde_Mode_Counter = 0;
 800056e:	4b28      	ldr	r3, [pc, #160]	; (8000610 <Blinde_Mode+0xe8>)
 8000570:	2200      	movs	r2, #0
 8000572:	621a      	str	r2, [r3, #32]
		  Motor_Control.A_Out = HAL_GPIO_ReadPin(COMP_A_OUT_GPIO_Port, COMP_A_OUT_Pin);
 8000574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057c:	f001 fb0c 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000580:	4603      	mov	r3, r0
 8000582:	461a      	mov	r2, r3
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <Blinde_Mode+0xe8>)
 8000586:	605a      	str	r2, [r3, #4]
		  Motor_Control.B_Out = HAL_GPIO_ReadPin(COMP_B_OUT_GPIO_Port, COMP_B_OUT_Pin);
 8000588:	2102      	movs	r1, #2
 800058a:	4823      	ldr	r0, [pc, #140]	; (8000618 <Blinde_Mode+0xf0>)
 800058c:	f001 fb04 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <Blinde_Mode+0xe8>)
 8000596:	609a      	str	r2, [r3, #8]
		  Motor_Control.C_Out = HAL_GPIO_ReadPin(COMP_C_OUT_GPIO_Port, COMP_C_OUT_Pin);
 8000598:	2140      	movs	r1, #64	; 0x40
 800059a:	4820      	ldr	r0, [pc, #128]	; (800061c <Blinde_Mode+0xf4>)
 800059c:	f001 fafc 	bl	8001b98 <HAL_GPIO_ReadPin>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <Blinde_Mode+0xe8>)
 80005a6:	60da      	str	r2, [r3, #12]
		  Motor_Control.Rotor_Position = (Motor_Control.C_Out << 2) + (Motor_Control.B_Out << 1) + (Motor_Control.A_Out);
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <Blinde_Mode+0xe8>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <Blinde_Mode+0xe8>)
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4413      	add	r3, r2
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <Blinde_Mode+0xe8>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4413      	add	r3, r2
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <Blinde_Mode+0xe8>)
 80005cc:	70da      	strb	r2, [r3, #3]
		  Set_Motor_State(Trigger_Control_State[h], Motor_Control.Duty_Cycle);
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <Blinde_Mode+0xf8>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a14      	ldr	r2, [pc, #80]	; (8000624 <Blinde_Mode+0xfc>)
 80005d4:	5cd3      	ldrb	r3, [r2, r3]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <Blinde_Mode+0xe8>)
 80005d8:	7892      	ldrb	r2, [r2, #2]
 80005da:	b292      	uxth	r2, r2
 80005dc:	4611      	mov	r1, r2
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f824 	bl	800062c <Set_Motor_State>
		  h = (h+1) % 6;
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <Blinde_Mode+0xf8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	1c59      	adds	r1, r3, #1
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <Blinde_Mode+0x100>)
 80005ec:	fb83 3201 	smull	r3, r2, r3, r1
 80005f0:	17cb      	asrs	r3, r1, #31
 80005f2:	1ad2      	subs	r2, r2, r3
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	1aca      	subs	r2, r1, r3
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <Blinde_Mode+0xf8>)
 8000600:	601a      	str	r2, [r3, #0]
		  Motor_Control.Drive_Stage = START_UP;
 8000602:	4b03      	ldr	r3, [pc, #12]	; (8000610 <Blinde_Mode+0xe8>)
 8000604:	2200      	movs	r2, #0
 8000606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000224 	.word	0x20000224
 8000614:	469c4000 	.word	0x469c4000
 8000618:	48000400 	.word	0x48000400
 800061c:	48000800 	.word	0x48000800
 8000620:	20000044 	.word	0x20000044
 8000624:	080044f8 	.word	0x080044f8
 8000628:	2aaaaaab 	.word	0x2aaaaaab

0800062c <Set_Motor_State>:

void Set_Motor_State(uint8_t State, uint16_t DutyCycle)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	460a      	mov	r2, r1
 8000636:	71fb      	strb	r3, [r7, #7]
 8000638:	4613      	mov	r3, r2
 800063a:	80bb      	strh	r3, [r7, #4]
	Motor_Control.Signal = (htim1.Init.Period+1)*DutyCycle/100;	// CCR
 800063c:	4b79      	ldr	r3, [pc, #484]	; (8000824 <Set_Motor_State+0x1f8>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	3301      	adds	r3, #1
 8000642:	88ba      	ldrh	r2, [r7, #4]
 8000644:	fb02 f303 	mul.w	r3, r2, r3
 8000648:	4a77      	ldr	r2, [pc, #476]	; (8000828 <Set_Motor_State+0x1fc>)
 800064a:	fba2 2303 	umull	r2, r3, r2, r3
 800064e:	095b      	lsrs	r3, r3, #5
 8000650:	4a76      	ldr	r2, [pc, #472]	; (800082c <Set_Motor_State+0x200>)
 8000652:	6113      	str	r3, [r2, #16]
	Motor_Control.Max_Signal = htim1.Init.Period+1;				// ARR
 8000654:	4b73      	ldr	r3, [pc, #460]	; (8000824 <Set_Motor_State+0x1f8>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	3301      	adds	r3, #1
 800065a:	4a74      	ldr	r2, [pc, #464]	; (800082c <Set_Motor_State+0x200>)
 800065c:	6153      	str	r3, [r2, #20]

	switch(State)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	3b01      	subs	r3, #1
 8000662:	2b05      	cmp	r3, #5
 8000664:	f200 80d6 	bhi.w	8000814 <Set_Motor_State+0x1e8>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <Set_Motor_State+0x44>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	080006cb 	.word	0x080006cb
 8000674:	0800074f 	.word	0x0800074f
 8000678:	0800070d 	.word	0x0800070d
 800067c:	080007d3 	.word	0x080007d3
 8000680:	08000689 	.word	0x08000689
 8000684:	08000791 	.word	0x08000791
	{

		case State_A_B:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 8000688:	4b69      	ldr	r3, [pc, #420]	; (8000830 <Set_Motor_State+0x204>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 8000690:	4b67      	ldr	r3, [pc, #412]	; (8000830 <Set_Motor_State+0x204>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2200      	movs	r2, #0
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8000698:	4b62      	ldr	r3, [pc, #392]	; (8000824 <Set_Motor_State+0x1f8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2200      	movs	r2, #0
 800069e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80006a0:	4b60      	ldr	r3, [pc, #384]	; (8000824 <Set_Motor_State+0x1f8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2200      	movs	r2, #0
 80006a6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,Motor_Control.Signal);		// A HIGH ACTIVE
 80006a8:	4b5e      	ldr	r3, [pc, #376]	; (8000824 <Set_Motor_State+0x1f8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a5f      	ldr	r2, [pc, #380]	; (800082c <Set_Motor_State+0x200>)
 80006ae:	6912      	ldr	r2, [r2, #16]
 80006b0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,Motor_Control.Max_Signal);	// B LOW AVTIVE
 80006b2:	4b5f      	ldr	r3, [pc, #380]	; (8000830 <Set_Motor_State+0x204>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a5d      	ldr	r2, [pc, #372]	; (800082c <Set_Motor_State+0x200>)
 80006b8:	6952      	ldr	r2, [r2, #20]
 80006ba:	639a      	str	r2, [r3, #56]	; 0x38

			Motor_Control.Pulse_Center = htim1.Instance->CCR1 / 2;
 80006bc:	4b59      	ldr	r3, [pc, #356]	; (8000824 <Set_Motor_State+0x1f8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c2:	085b      	lsrs	r3, r3, #1
 80006c4:	4a59      	ldr	r2, [pc, #356]	; (800082c <Set_Motor_State+0x200>)
 80006c6:	6193      	str	r3, [r2, #24]

			break;
 80006c8:	e0a5      	b.n	8000816 <Set_Motor_State+0x1ea>

		case State_A_C:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 80006ca:	4b59      	ldr	r3, [pc, #356]	; (8000830 <Set_Motor_State+0x204>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2200      	movs	r2, #0
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 80006d2:	4b57      	ldr	r3, [pc, #348]	; (8000830 <Set_Motor_State+0x204>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2200      	movs	r2, #0
 80006d8:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80006da:	4b52      	ldr	r3, [pc, #328]	; (8000824 <Set_Motor_State+0x1f8>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2200      	movs	r2, #0
 80006e0:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80006e2:	4b50      	ldr	r3, [pc, #320]	; (8000824 <Set_Motor_State+0x1f8>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2200      	movs	r2, #0
 80006e8:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,Motor_Control.Signal);		// A HIGH ACTIVE
 80006ea:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <Set_Motor_State+0x1f8>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a4f      	ldr	r2, [pc, #316]	; (800082c <Set_Motor_State+0x200>)
 80006f0:	6912      	ldr	r2, [r2, #16]
 80006f2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,Motor_Control.Max_Signal);	// C LOW ACTIVE
 80006f4:	4b4e      	ldr	r3, [pc, #312]	; (8000830 <Set_Motor_State+0x204>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a4c      	ldr	r2, [pc, #304]	; (800082c <Set_Motor_State+0x200>)
 80006fa:	6952      	ldr	r2, [r2, #20]
 80006fc:	63da      	str	r2, [r3, #60]	; 0x3c

			Motor_Control.Pulse_Center = htim1.Instance->CCR1 / 2;
 80006fe:	4b49      	ldr	r3, [pc, #292]	; (8000824 <Set_Motor_State+0x1f8>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000704:	085b      	lsrs	r3, r3, #1
 8000706:	4a49      	ldr	r2, [pc, #292]	; (800082c <Set_Motor_State+0x200>)
 8000708:	6193      	str	r3, [r2, #24]

			break;
 800070a:	e084      	b.n	8000816 <Set_Motor_State+0x1ea>

		case State_B_C:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 800070c:	4b48      	ldr	r3, [pc, #288]	; (8000830 <Set_Motor_State+0x204>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2200      	movs	r2, #0
 8000712:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 8000714:	4b46      	ldr	r3, [pc, #280]	; (8000830 <Set_Motor_State+0x204>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2200      	movs	r2, #0
 800071a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 800071c:	4b41      	ldr	r3, [pc, #260]	; (8000824 <Set_Motor_State+0x1f8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000724:	4b3f      	ldr	r3, [pc, #252]	; (8000824 <Set_Motor_State+0x1f8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Motor_Control.Signal);		// B HIGH ACTIVE
 800072c:	4b3d      	ldr	r3, [pc, #244]	; (8000824 <Set_Motor_State+0x1f8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a3e      	ldr	r2, [pc, #248]	; (800082c <Set_Motor_State+0x200>)
 8000732:	6912      	ldr	r2, [r2, #16]
 8000734:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,Motor_Control.Max_Signal);	// C LOW ACTIVE
 8000736:	4b3e      	ldr	r3, [pc, #248]	; (8000830 <Set_Motor_State+0x204>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a3c      	ldr	r2, [pc, #240]	; (800082c <Set_Motor_State+0x200>)
 800073c:	6952      	ldr	r2, [r2, #20]
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c

			Motor_Control.Pulse_Center = htim1.Instance->CCR2 / 2;
 8000740:	4b38      	ldr	r3, [pc, #224]	; (8000824 <Set_Motor_State+0x1f8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000746:	085b      	lsrs	r3, r3, #1
 8000748:	4a38      	ldr	r2, [pc, #224]	; (800082c <Set_Motor_State+0x200>)
 800074a:	6193      	str	r3, [r2, #24]

			break;
 800074c:	e063      	b.n	8000816 <Set_Motor_State+0x1ea>

		case State_B_A:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 800074e:	4b38      	ldr	r3, [pc, #224]	; (8000830 <Set_Motor_State+0x204>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2200      	movs	r2, #0
 8000754:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 8000756:	4b36      	ldr	r3, [pc, #216]	; (8000830 <Set_Motor_State+0x204>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2200      	movs	r2, #0
 800075c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 800075e:	4b31      	ldr	r3, [pc, #196]	; (8000824 <Set_Motor_State+0x1f8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8000766:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <Set_Motor_State+0x1f8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2200      	movs	r2, #0
 800076c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,Motor_Control.Signal);	// B HIGH ACTIVE
 800076e:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <Set_Motor_State+0x1f8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a2e      	ldr	r2, [pc, #184]	; (800082c <Set_Motor_State+0x200>)
 8000774:	6912      	ldr	r2, [r2, #16]
 8000776:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,Motor_Control.Max_Signal);	// A LOW ACTIVE
 8000778:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <Set_Motor_State+0x204>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a2b      	ldr	r2, [pc, #172]	; (800082c <Set_Motor_State+0x200>)
 800077e:	6952      	ldr	r2, [r2, #20]
 8000780:	635a      	str	r2, [r3, #52]	; 0x34

			Motor_Control.Pulse_Center = htim1.Instance->CCR2 / 2;
 8000782:	4b28      	ldr	r3, [pc, #160]	; (8000824 <Set_Motor_State+0x1f8>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	4a28      	ldr	r2, [pc, #160]	; (800082c <Set_Motor_State+0x200>)
 800078c:	6193      	str	r3, [r2, #24]

			break;
 800078e:	e042      	b.n	8000816 <Set_Motor_State+0x1ea>

		case State_C_A:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <Set_Motor_State+0x204>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2200      	movs	r2, #0
 8000796:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <Set_Motor_State+0x204>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2200      	movs	r2, #0
 800079e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <Set_Motor_State+0x1f8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2200      	movs	r2, #0
 80007a6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <Set_Motor_State+0x1f8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2200      	movs	r2, #0
 80007ae:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,Motor_Control.Signal);	// C HIGH ACTIVE
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <Set_Motor_State+0x1f8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a1d      	ldr	r2, [pc, #116]	; (800082c <Set_Motor_State+0x200>)
 80007b6:	6912      	ldr	r2, [r2, #16]
 80007b8:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,Motor_Control.Max_Signal);	// A LOW ACTIVE
 80007ba:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <Set_Motor_State+0x204>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a1b      	ldr	r2, [pc, #108]	; (800082c <Set_Motor_State+0x200>)
 80007c0:	6952      	ldr	r2, [r2, #20]
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34

			Motor_Control.Pulse_Center = htim1.Instance->CCR3 / 2;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <Set_Motor_State+0x1f8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007ca:	085b      	lsrs	r3, r3, #1
 80007cc:	4a17      	ldr	r2, [pc, #92]	; (800082c <Set_Motor_State+0x200>)
 80007ce:	6193      	str	r3, [r2, #24]

			break;
 80007d0:	e021      	b.n	8000816 <Set_Motor_State+0x1ea>

		case State_C_B:

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <Set_Motor_State+0x204>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2200      	movs	r2, #0
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <Set_Motor_State+0x204>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2200      	movs	r2, #0
 80007e0:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <Set_Motor_State+0x1f8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2200      	movs	r2, #0
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <Set_Motor_State+0x1f8>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2200      	movs	r2, #0
 80007f0:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,Motor_Control.Signal);	// C HIGH ACTIVE
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <Set_Motor_State+0x1f8>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a0d      	ldr	r2, [pc, #52]	; (800082c <Set_Motor_State+0x200>)
 80007f8:	6912      	ldr	r2, [r2, #16]
 80007fa:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,Motor_Control.Max_Signal);	// B LOW ACTIVE
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <Set_Motor_State+0x204>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0a      	ldr	r2, [pc, #40]	; (800082c <Set_Motor_State+0x200>)
 8000802:	6952      	ldr	r2, [r2, #20]
 8000804:	639a      	str	r2, [r3, #56]	; 0x38

			Motor_Control.Pulse_Center = htim1.Instance->CCR3 / 2;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <Set_Motor_State+0x1f8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <Set_Motor_State+0x200>)
 8000810:	6193      	str	r3, [r2, #24]

			break;
 8000812:	e000      	b.n	8000816 <Set_Motor_State+0x1ea>

		default:
			break;
 8000814:	bf00      	nop

	}
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000148 	.word	0x20000148
 8000828:	51eb851f 	.word	0x51eb851f
 800082c:	20000224 	.word	0x20000224
 8000830:	200001d4 	.word	0x200001d4

08000834 <HAL_TIM_PeriodElapsedCallback>:

#include "TimeTask.h"
#include "SixStepCommutation.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	if(htim == &htim15)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d128      	bne.n	8000896 <HAL_TIM_PeriodElapsedCallback+0x62>
	{
		elapsedtime++;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	3301      	adds	r3, #1
 800084a:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800084c:	6013      	str	r3, [r2, #0]
		if(elapsedtime % 1000 == 0)
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000854:	fb83 1302 	smull	r1, r3, r3, r2
 8000858:	1199      	asrs	r1, r3, #6
 800085a:	17d3      	asrs	r3, r2, #31
 800085c:	1acb      	subs	r3, r1, r3
 800085e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000862:	fb01 f303 	mul.w	r3, r1, r3
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d114      	bne.n	8000896 <HAL_TIM_PeriodElapsedCallback+0x62>
		{
			saniye2++;
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000874:	6013      	str	r3, [r2, #0]
			rpmvalue=(RpmFlag-RpmFlagOld)*6;
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	1ad2      	subs	r2, r2, r3
 8000880:	4613      	mov	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	4413      	add	r3, r2
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	461a      	mov	r2, r3
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x88>)
 800088c:	601a      	str	r2, [r3, #0]
			RpmFlagOld=RpmFlag;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000894:	6013      	str	r3, [r2, #0]
//		{
//			Time.Task.Hz_100 = 1;
//		}

	}
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000088 	.word	0x20000088
 80008a8:	20000084 	.word	0x20000084
 80008ac:	10624dd3 	.word	0x10624dd3
 80008b0:	20000048 	.word	0x20000048
 80008b4:	20000108 	.word	0x20000108
 80008b8:	20000144 	.word	0x20000144
 80008bc:	2000010c 	.word	0x2000010c

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c4:	f000 fd3a 	bl	800133c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c8:	f000 f868 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008cc:	f000 fa9c 	bl	8000e08 <MX_GPIO_Init>
  MX_COMP2_Init();
 80008d0:	f000 f8c2 	bl	8000a58 <MX_COMP2_Init>
  MX_COMP4_Init();
 80008d4:	f000 f8e6 	bl	8000aa4 <MX_COMP4_Init>
  MX_COMP6_Init();
 80008d8:	f000 f90a 	bl	8000af0 <MX_COMP6_Init>
  MX_TIM1_Init();
 80008dc:	f000 f92e 	bl	8000b3c <MX_TIM1_Init>
  MX_TIM2_Init();
 80008e0:	f000 f9d2 	bl	8000c88 <MX_TIM2_Init>
  MX_TIM15_Init();
 80008e4:	f000 fa3e 	bl	8000d64 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  *DEMCR = *DEMCR | 0x01000000;     // enable trace
 80008e8:	4b25      	ldr	r3, [pc, #148]	; (8000980 <main+0xc0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <main+0xc0>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80008f6:	601a      	str	r2, [r3, #0]
  *LAR = 0xC5ACCE55;                // <-- added unlock access to DWT (ITM, etc.)registers
 80008f8:	4b22      	ldr	r3, [pc, #136]	; (8000984 <main+0xc4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a22      	ldr	r2, [pc, #136]	; (8000988 <main+0xc8>)
 80008fe:	601a      	str	r2, [r3, #0]
  *DWT_CYCCNT = 0;                  // clear DWT cycle counter
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <main+0xcc>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
  *DWT_CONTROL = *DWT_CONTROL | 1;  // enable DWT cycle counter
 8000908:	4b21      	ldr	r3, [pc, #132]	; (8000990 <main+0xd0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <main+0xd0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f042 0201 	orr.w	r2, r2, #1
 8000916:	601a      	str	r2, [r3, #0]

  PeripheralsStart();
 8000918:	f7ff fc56 	bl	80001c8 <PeripheralsStart>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(Motor_Control.System_Enable == 1)
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <main+0xd4>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d127      	bne.n	8000974 <main+0xb4>
	  {

		  if(htim1.Instance->CNT == Motor_Control.Pulse_Center)
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <main+0xd8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <main+0xd4>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	429a      	cmp	r2, r3
 8000930:	d1f4      	bne.n	800091c <main+0x5c>
		  {

			  if(Motor_Control.Blinde_Mode != 1)
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <main+0xd4>)
 8000934:	785b      	ldrb	r3, [r3, #1]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d019      	beq.n	800096e <main+0xae>
			  {

				  Motor_Control.RPM++;
 800093a:	4b16      	ldr	r3, [pc, #88]	; (8000994 <main+0xd4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	3301      	adds	r3, #1
 8000940:	4a14      	ldr	r2, [pc, #80]	; (8000994 <main+0xd4>)
 8000942:	6313      	str	r3, [r2, #48]	; 0x30

				  switch(Motor_Control.Drive_Stage)
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <main+0xd4>)
 8000946:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800094a:	2b02      	cmp	r3, #2
 800094c:	d00c      	beq.n	8000968 <main+0xa8>
 800094e:	2b02      	cmp	r3, #2
 8000950:	dc13      	bgt.n	800097a <main+0xba>
 8000952:	2b00      	cmp	r3, #0
 8000954:	d002      	beq.n	800095c <main+0x9c>
 8000956:	2b01      	cmp	r3, #1
 8000958:	d003      	beq.n	8000962 <main+0xa2>

						  break;
					  }

					  default:
						  break;
 800095a:	e00e      	b.n	800097a <main+0xba>
						  Start_Up_Motor();
 800095c:	f7ff fcb2 	bl	80002c4 <Start_Up_Motor>
						  break;
 8000960:	e00c      	b.n	800097c <main+0xbc>
						  Align_Motor();
 8000962:	f7ff fd11 	bl	8000388 <Align_Motor>
						  break;
 8000966:	e009      	b.n	800097c <main+0xbc>
						  Run_Motor();
 8000968:	f7ff fd74 	bl	8000454 <Run_Motor>
						  break;
 800096c:	e006      	b.n	800097c <main+0xbc>
				  }
			  }

			  else
			  {
				  Blinde_Mode();
 800096e:	f7ff fddb 	bl	8000528 <Blinde_Mode>
 8000972:	e7d3      	b.n	800091c <main+0x5c>

	  }

	  else
	  {
		  Stop_Motor();
 8000974:	f7ff fc7c 	bl	8000270 <Stop_Motor>
 8000978:	e7d0      	b.n	800091c <main+0x5c>
						  break;
 800097a:	bf00      	nop
	  if(Motor_Control.System_Enable == 1)
 800097c:	e7ce      	b.n	800091c <main+0x5c>
 800097e:	bf00      	nop
 8000980:	20000008 	.word	0x20000008
 8000984:	2000000c 	.word	0x2000000c
 8000988:	c5acce55 	.word	0xc5acce55
 800098c:	20000004 	.word	0x20000004
 8000990:	20000000 	.word	0x20000000
 8000994:	20000224 	.word	0x20000224
 8000998:	20000148 	.word	0x20000148

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b09c      	sub	sp, #112	; 0x70
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009a6:	2228      	movs	r2, #40	; 0x28
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f003 fd90 	bl	80044d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c0:	463b      	mov	r3, r7
 80009c2:	2234      	movs	r2, #52	; 0x34
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 fd82 	bl	80044d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009da:	2301      	movs	r3, #1
 80009dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009de:	2302      	movs	r3, #2
 80009e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 f8e8 	bl	8001bc8 <HAL_RCC_OscConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009fe:	f000 fa3f 	bl	8000e80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a02:	230f      	movs	r3, #15
 8000a04:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a06:	2302      	movs	r3, #2
 8000a08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 ffda 	bl	80029d8 <HAL_RCC_ClockConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a2a:	f000 fa29 	bl	8000e80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15;
 8000a2e:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8000a32:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f002 f9b0 	bl	8002da4 <HAL_RCCEx_PeriphCLKConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a4a:	f000 fa19 	bl	8000e80 <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3770      	adds	r7, #112	; 0x70
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_COMP2_Init+0x44>)
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <MX_COMP2_Init+0x48>)
 8000a60:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_COMP2_Init+0x44>)
 8000a64:	2240      	movs	r2, #64	; 0x40
 8000a66:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_COMP2_Init+0x44>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_COMP2_Init+0x44>)
 8000a70:	222a      	movs	r2, #42	; 0x2a
 8000a72:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_COMP2_Init+0x44>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_COMP2_Init+0x44>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_COMP2_Init+0x44>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_COMP2_Init+0x44>)
 8000a88:	f000 fcbe 	bl	8001408 <HAL_COMP_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8000a92:	f000 f9f5 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200001a4 	.word	0x200001a4
 8000aa0:	40010020 	.word	0x40010020

08000aa4 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_COMP4_Init+0x44>)
 8000aaa:	4a10      	ldr	r2, [pc, #64]	; (8000aec <MX_COMP4_Init+0x48>)
 8000aac:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_COMP4_Init+0x44>)
 8000ab0:	2240      	movs	r2, #64	; 0x40
 8000ab2:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_COMP4_Init+0x44>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_COMP4_Init+0x44>)
 8000abc:	222a      	movs	r2, #42	; 0x2a
 8000abe:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_COMP4_Init+0x44>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_COMP4_Init+0x44>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_COMP4_Init+0x44>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_COMP4_Init+0x44>)
 8000ad4:	f000 fc98 	bl	8001408 <HAL_COMP_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_COMP4_Init+0x3e>
  {
    Error_Handler();
 8000ade:	f000 f9cf 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000110 	.word	0x20000110
 8000aec:	40010028 	.word	0x40010028

08000af0 <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_COMP6_Init+0x44>)
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <MX_COMP6_Init+0x48>)
 8000af8:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_COMP6_Init+0x44>)
 8000afc:	2240      	movs	r2, #64	; 0x40
 8000afe:	605a      	str	r2, [r3, #4]
  hcomp6.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_COMP6_Init+0x44>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hcomp6.Init.Output = COMP_OUTPUT_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_COMP6_Init+0x44>)
 8000b08:	222a      	movs	r2, #42	; 0x2a
 8000b0a:	60da      	str	r2, [r3, #12]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_COMP6_Init+0x44>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_COMP6_Init+0x44>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_COMP6_Init+0x44>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_COMP6_Init+0x44>)
 8000b20:	f000 fc72 	bl	8001408 <HAL_COMP_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_COMP6_Init+0x3e>
  {
    Error_Handler();
 8000b2a:	f000 f9a9 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000d8 	.word	0x200000d8
 8000b38:	40010030 	.word	0x40010030

08000b3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b096      	sub	sp, #88	; 0x58
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
 8000b5e:	615a      	str	r2, [r3, #20]
 8000b60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	222c      	movs	r2, #44	; 0x2c
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f003 fcb1 	bl	80044d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b6e:	4b44      	ldr	r3, [pc, #272]	; (8000c80 <MX_TIM1_Init+0x144>)
 8000b70:	4a44      	ldr	r2, [pc, #272]	; (8000c84 <MX_TIM1_Init+0x148>)
 8000b72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000b74:	4b42      	ldr	r3, [pc, #264]	; (8000c80 <MX_TIM1_Init+0x144>)
 8000b76:	2247      	movs	r2, #71	; 0x47
 8000b78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b41      	ldr	r3, [pc, #260]	; (8000c80 <MX_TIM1_Init+0x144>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 8000b80:	4b3f      	ldr	r3, [pc, #252]	; (8000c80 <MX_TIM1_Init+0x144>)
 8000b82:	2231      	movs	r2, #49	; 0x31
 8000b84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b86:	4b3e      	ldr	r3, [pc, #248]	; (8000c80 <MX_TIM1_Init+0x144>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b8c:	4b3c      	ldr	r3, [pc, #240]	; (8000c80 <MX_TIM1_Init+0x144>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b3b      	ldr	r3, [pc, #236]	; (8000c80 <MX_TIM1_Init+0x144>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b98:	4839      	ldr	r0, [pc, #228]	; (8000c80 <MX_TIM1_Init+0x144>)
 8000b9a:	f002 fb41 	bl	8003220 <HAL_TIM_PWM_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000ba4:	f000 f96c 	bl	8000e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bac:	2300      	movs	r3, #0
 8000bae:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4831      	ldr	r0, [pc, #196]	; (8000c80 <MX_TIM1_Init+0x144>)
 8000bbc:	f003 fb68 	bl	8004290 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000bc6:	f000 f95b 	bl	8000e80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bca:	2360      	movs	r3, #96	; 0x60
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bde:	2300      	movs	r3, #0
 8000be0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000be2:	2300      	movs	r3, #0
 8000be4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bea:	2200      	movs	r2, #0
 8000bec:	4619      	mov	r1, r3
 8000bee:	4824      	ldr	r0, [pc, #144]	; (8000c80 <MX_TIM1_Init+0x144>)
 8000bf0:	f002 fd74 	bl	80036dc <HAL_TIM_PWM_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000bfa:	f000 f941 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c02:	2204      	movs	r2, #4
 8000c04:	4619      	mov	r1, r3
 8000c06:	481e      	ldr	r0, [pc, #120]	; (8000c80 <MX_TIM1_Init+0x144>)
 8000c08:	f002 fd68 	bl	80036dc <HAL_TIM_PWM_ConfigChannel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000c12:	f000 f935 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4818      	ldr	r0, [pc, #96]	; (8000c80 <MX_TIM1_Init+0x144>)
 8000c20:	f002 fd5c 	bl	80036dc <HAL_TIM_PWM_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000c2a:	f000 f929 	bl	8000e80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	4619      	mov	r1, r3
 8000c62:	4807      	ldr	r0, [pc, #28]	; (8000c80 <MX_TIM1_Init+0x144>)
 8000c64:	f003 fb7a 	bl	800435c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000c6e:	f000 f907 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c72:	4803      	ldr	r0, [pc, #12]	; (8000c80 <MX_TIM1_Init+0x144>)
 8000c74:	f000 fa74 	bl	8001160 <HAL_TIM_MspPostInit>

}
 8000c78:	bf00      	nop
 8000c7a:	3758      	adds	r7, #88	; 0x58
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000148 	.word	0x20000148
 8000c84:	40012c00 	.word	0x40012c00

08000c88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
 8000ca8:	615a      	str	r2, [r3, #20]
 8000caa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cac:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <MX_TIM2_Init+0xd8>)
 8000cae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000cb4:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <MX_TIM2_Init+0xd8>)
 8000cb6:	2247      	movs	r2, #71	; 0x47
 8000cb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <MX_TIM2_Init+0xd8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <MX_TIM2_Init+0xd8>)
 8000cc2:	2231      	movs	r2, #49	; 0x31
 8000cc4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <MX_TIM2_Init+0xd8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <MX_TIM2_Init+0xd8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cd2:	4823      	ldr	r0, [pc, #140]	; (8000d60 <MX_TIM2_Init+0xd8>)
 8000cd4:	f002 faa4 	bl	8003220 <HAL_TIM_PWM_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000cde:	f000 f8cf 	bl	8000e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	481b      	ldr	r0, [pc, #108]	; (8000d60 <MX_TIM2_Init+0xd8>)
 8000cf2:	f003 facd 	bl	8004290 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000cfc:	f000 f8c0 	bl	8000e80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d00:	2360      	movs	r3, #96	; 0x60
 8000d02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	4619      	mov	r1, r3
 8000d16:	4812      	ldr	r0, [pc, #72]	; (8000d60 <MX_TIM2_Init+0xd8>)
 8000d18:	f002 fce0 	bl	80036dc <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d22:	f000 f8ad 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	2204      	movs	r2, #4
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <MX_TIM2_Init+0xd8>)
 8000d2e:	f002 fcd5 	bl	80036dc <HAL_TIM_PWM_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d38:	f000 f8a2 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2208      	movs	r2, #8
 8000d40:	4619      	mov	r1, r3
 8000d42:	4807      	ldr	r0, [pc, #28]	; (8000d60 <MX_TIM2_Init+0xd8>)
 8000d44:	f002 fcca 	bl	80036dc <HAL_TIM_PWM_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000d4e:	f000 f897 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d52:	4803      	ldr	r0, [pc, #12]	; (8000d60 <MX_TIM2_Init+0xd8>)
 8000d54:	f000 fa04 	bl	8001160 <HAL_TIM_MspPostInit>

}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	; 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200001d4 	.word	0x200001d4

08000d64 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000d82:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_TIM15_Init+0x9c>)
 8000d84:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <MX_TIM15_Init+0xa0>)
 8000d86:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 71;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_TIM15_Init+0x9c>)
 8000d8a:	2247      	movs	r2, #71	; 0x47
 8000d8c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_TIM15_Init+0x9c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_TIM15_Init+0x9c>)
 8000d96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d9a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_TIM15_Init+0x9c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <MX_TIM15_Init+0x9c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da8:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_TIM15_Init+0x9c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000dae:	4814      	ldr	r0, [pc, #80]	; (8000e00 <MX_TIM15_Init+0x9c>)
 8000db0:	f002 f98a 	bl	80030c8 <HAL_TIM_Base_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000dba:	f000 f861 	bl	8000e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480d      	ldr	r0, [pc, #52]	; (8000e00 <MX_TIM15_Init+0x9c>)
 8000dcc:	f002 fd9a 	bl	8003904 <HAL_TIM_ConfigClockSource>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000dd6:	f000 f853 	bl	8000e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4619      	mov	r1, r3
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <MX_TIM15_Init+0x9c>)
 8000de8:	f003 fa52 	bl	8004290 <HAL_TIMEx_MasterConfigSynchronization>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000df2:	f000 f845 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000088 	.word	0x20000088
 8000e04:	40014000 	.word	0x40014000

08000e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_GPIO_Init+0x74>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <MX_GPIO_Init+0x74>)
 8000e14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e18:	6153      	str	r3, [r2, #20]
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <MX_GPIO_Init+0x74>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <MX_GPIO_Init+0x74>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <MX_GPIO_Init+0x74>)
 8000e2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e30:	6153      	str	r3, [r2, #20]
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_GPIO_Init+0x74>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_GPIO_Init+0x74>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <MX_GPIO_Init+0x74>)
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_GPIO_Init+0x74>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_GPIO_Init+0x74>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <MX_GPIO_Init+0x74>)
 8000e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e60:	6153      	str	r3, [r2, #20]
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_GPIO_Init+0x74>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]

}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <Error_Handler+0x8>
	...

08000e8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6193      	str	r3, [r2, #24]
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_MspInit+0x44>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	61d3      	str	r3, [r2, #28]
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ec2:	2007      	movs	r0, #7
 8000ec4:	f000 fcb4 	bl	8001830 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08e      	sub	sp, #56	; 0x38
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a66      	ldr	r2, [pc, #408]	; (800108c <HAL_COMP_MspInit+0x1b8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12b      	bne.n	8000f4e <HAL_COMP_MspInit+0x7a>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b66      	ldr	r3, [pc, #408]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	4a65      	ldr	r2, [pc, #404]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	6153      	str	r3, [r2, #20]
 8000f02:	4b63      	ldr	r3, [pc, #396]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	623b      	str	r3, [r7, #32]
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
    /**COMP2 GPIO Configuration
    PA4     ------> COMP2_INM
    PA7     ------> COMP2_INP
    PA12     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = Neutral_Point_Pin|COMP_A_INP_Pin;
 8000f0e:	2390      	movs	r3, #144	; 0x90
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f12:	2303      	movs	r3, #3
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f000 fcc6 	bl	80018b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = COMP_A_OUT_Pin;
 8000f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_GPCOMP2;
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(COMP_A_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f48:	f000 fcb4 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 8000f4c:	e099      	b.n	8001082 <HAL_COMP_MspInit+0x1ae>
  else if(hcomp->Instance==COMP4)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a50      	ldr	r2, [pc, #320]	; (8001094 <HAL_COMP_MspInit+0x1c0>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d141      	bne.n	8000fdc <HAL_COMP_MspInit+0x108>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f58:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a4c      	ldr	r2, [pc, #304]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
 8000f64:	4b4a      	ldr	r3, [pc, #296]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f70:	4b47      	ldr	r3, [pc, #284]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	4a46      	ldr	r2, [pc, #280]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 8000f76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f7a:	6153      	str	r3, [r2, #20]
 8000f7c:	4b44      	ldr	r3, [pc, #272]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f84:	61bb      	str	r3, [r7, #24]
 8000f86:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Neutral_Point_Pin;
 8000f88:	2310      	movs	r3, #16
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Neutral_Point_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9e:	f000 fc89 	bl	80018b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = COMP_B_INP_Pin;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COMP_B_INP_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4838      	ldr	r0, [pc, #224]	; (8001098 <HAL_COMP_MspInit+0x1c4>)
 8000fb6:	f000 fc7d 	bl	80018b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = COMP_B_OUT_Pin;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_GPCOMP4;
 8000fca:	2308      	movs	r3, #8
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(COMP_B_OUT_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4830      	ldr	r0, [pc, #192]	; (8001098 <HAL_COMP_MspInit+0x1c4>)
 8000fd6:	f000 fc6d 	bl	80018b4 <HAL_GPIO_Init>
}
 8000fda:	e052      	b.n	8001082 <HAL_COMP_MspInit+0x1ae>
  else if(hcomp->Instance==COMP6)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a2e      	ldr	r2, [pc, #184]	; (800109c <HAL_COMP_MspInit+0x1c8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d14d      	bne.n	8001082 <HAL_COMP_MspInit+0x1ae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a29      	ldr	r2, [pc, #164]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	6153      	str	r3, [r2, #20]
 8000ff2:	4b27      	ldr	r3, [pc, #156]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b24      	ldr	r3, [pc, #144]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a23      	ldr	r2, [pc, #140]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 8001004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 800101c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HAL_COMP_MspInit+0x1bc>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Neutral_Point_Pin;
 800102e:	2310      	movs	r3, #16
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001032:	2303      	movs	r3, #3
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Neutral_Point_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	4619      	mov	r1, r3
 8001040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001044:	f000 fc36 	bl	80018b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = COMP_C_INP_Pin;
 8001048:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104e:	2303      	movs	r3, #3
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(COMP_C_INP_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	480e      	ldr	r0, [pc, #56]	; (8001098 <HAL_COMP_MspInit+0x1c4>)
 800105e:	f000 fc29 	bl	80018b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = COMP_C_OUT_Pin;
 8001062:	2340      	movs	r3, #64	; 0x40
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_GPCOMP6;
 8001072:	2307      	movs	r3, #7
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(COMP_C_OUT_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107a:	4619      	mov	r1, r3
 800107c:	4808      	ldr	r0, [pc, #32]	; (80010a0 <HAL_COMP_MspInit+0x1cc>)
 800107e:	f000 fc19 	bl	80018b4 <HAL_GPIO_Init>
}
 8001082:	bf00      	nop
 8001084:	3738      	adds	r7, #56	; 0x38
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40010020 	.word	0x40010020
 8001090:	40021000 	.word	0x40021000
 8001094:	40010028 	.word	0x40010028
 8001098:	48000400 	.word	0x48000400
 800109c:	40010030 	.word	0x40010030
 80010a0:	48000800 	.word	0x48000800

080010a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a16      	ldr	r2, [pc, #88]	; (800110c <HAL_TIM_PWM_MspInit+0x68>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d114      	bne.n	80010e0 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <HAL_TIM_PWM_MspInit+0x6c>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	4a15      	ldr	r2, [pc, #84]	; (8001110 <HAL_TIM_PWM_MspInit+0x6c>)
 80010bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c0:	6193      	str	r3, [r2, #24]
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <HAL_TIM_PWM_MspInit+0x6c>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2018      	movs	r0, #24
 80010d4:	f000 fbb7 	bl	8001846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80010d8:	2018      	movs	r0, #24
 80010da:	f000 fbd0 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010de:	e010      	b.n	8001102 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e8:	d10b      	bne.n	8001102 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_TIM_PWM_MspInit+0x6c>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_TIM_PWM_MspInit+0x6c>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	61d3      	str	r3, [r2, #28]
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_TIM_PWM_MspInit+0x6c>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40012c00 	.word	0x40012c00
 8001110:	40021000 	.word	0x40021000

08001114 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <HAL_TIM_Base_MspInit+0x44>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d113      	bne.n	800114e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <HAL_TIM_Base_MspInit+0x48>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a0c      	ldr	r2, [pc, #48]	; (800115c <HAL_TIM_Base_MspInit+0x48>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001130:	6193      	str	r3, [r2, #24]
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_TIM_Base_MspInit+0x48>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2018      	movs	r0, #24
 8001144:	f000 fb7f 	bl	8001846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001148:	2018      	movs	r0, #24
 800114a:	f000 fb98 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40014000 	.word	0x40014000
 800115c:	40021000 	.word	0x40021000

08001160 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a31      	ldr	r2, [pc, #196]	; (8001244 <HAL_TIM_MspPostInit+0xe4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d11c      	bne.n	80011bc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	4b31      	ldr	r3, [pc, #196]	; (8001248 <HAL_TIM_MspPostInit+0xe8>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a30      	ldr	r2, [pc, #192]	; (8001248 <HAL_TIM_MspPostInit+0xe8>)
 8001188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800118c:	6153      	str	r3, [r2, #20]
 800118e:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <HAL_TIM_MspPostInit+0xe8>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = A_HIGH_Pin|B_HIGH_Pin|C_HIGH_Pin;
 800119a:	2307      	movs	r3, #7
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80011aa:	2302      	movs	r3, #2
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4825      	ldr	r0, [pc, #148]	; (800124c <HAL_TIM_MspPostInit+0xec>)
 80011b6:	f000 fb7d 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011ba:	e03e      	b.n	800123a <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c4:	d139      	bne.n	800123a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <HAL_TIM_MspPostInit+0xe8>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a1f      	ldr	r2, [pc, #124]	; (8001248 <HAL_TIM_MspPostInit+0xe8>)
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	6153      	str	r3, [r2, #20]
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <HAL_TIM_MspPostInit+0xe8>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <HAL_TIM_MspPostInit+0xe8>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	4a19      	ldr	r2, [pc, #100]	; (8001248 <HAL_TIM_MspPostInit+0xe8>)
 80011e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e8:	6153      	str	r3, [r2, #20]
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_TIM_MspPostInit+0xe8>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_LOW_Pin|B_LOW_Pin;
 80011f6:	2303      	movs	r3, #3
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001206:	2301      	movs	r3, #1
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001214:	f000 fb4e 	bl	80018b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = C_LOW_Pin;
 8001218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800122a:	2301      	movs	r3, #1
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(C_LOW_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4806      	ldr	r0, [pc, #24]	; (8001250 <HAL_TIM_MspPostInit+0xf0>)
 8001236:	f000 fb3d 	bl	80018b4 <HAL_GPIO_Init>
}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40012c00 	.word	0x40012c00
 8001248:	40021000 	.word	0x40021000
 800124c:	48000800 	.word	0x48000800
 8001250:	48000400 	.word	0x48000400

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <NMI_Handler+0x4>

0800125a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <MemManage_Handler+0x4>

08001266 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <UsageFault_Handler+0x4>

08001272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a0:	f000 f892 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80012ae:	f002 f8f5 	bl	800349c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80012b2:	4803      	ldr	r0, [pc, #12]	; (80012c0 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80012b4:	f002 f8f2 	bl	800349c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000148 	.word	0x20000148
 80012c0:	20000088 	.word	0x20000088

080012c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <SystemInit+0x20>)
 80012ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <SystemInit+0x20>)
 80012d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001320 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ee:	490e      	ldr	r1, [pc, #56]	; (8001328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012f0:	4a0e      	ldr	r2, [pc, #56]	; (800132c <LoopForever+0xe>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f4:	e002      	b.n	80012fc <LoopCopyDataInit>

080012f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fa:	3304      	adds	r3, #4

080012fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001300:	d3f9      	bcc.n	80012f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001304:	4c0b      	ldr	r4, [pc, #44]	; (8001334 <LoopForever+0x16>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001308:	e001      	b.n	800130e <LoopFillZerobss>

0800130a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800130c:	3204      	adds	r2, #4

0800130e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001310:	d3fb      	bcc.n	800130a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001312:	f7ff ffd7 	bl	80012c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001316:	f003 f8b7 	bl	8004488 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800131a:	f7ff fad1 	bl	80008c0 <main>

0800131e <LoopForever>:

LoopForever:
    b LoopForever
 800131e:	e7fe      	b.n	800131e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001320:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001328:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800132c:	08004538 	.word	0x08004538
  ldr r2, =_sbss
 8001330:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001334:	20000260 	.word	0x20000260

08001338 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC1_IRQHandler>
	...

0800133c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_Init+0x28>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_Init+0x28>)
 8001346:	f043 0310 	orr.w	r3, r3, #16
 800134a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134c:	2003      	movs	r0, #3
 800134e:	f000 fa6f 	bl	8001830 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001352:	2000      	movs	r0, #0
 8001354:	f000 f808 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001358:	f7ff fd98 	bl	8000e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40022000 	.word	0x40022000

08001368 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x54>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_InitTick+0x58>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fa87 	bl	800189a <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00e      	b.n	80013b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d80a      	bhi.n	80013b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f000 fa4f 	bl	8001846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_InitTick+0x5c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000010 	.word	0x20000010
 80013c0:	20000018 	.word	0x20000018
 80013c4:	20000014 	.word	0x20000014

080013c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000018 	.word	0x20000018
 80013ec:	2000025c 	.word	0x2000025c

080013f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	2000025c 	.word	0x2000025c

08001408 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <HAL_COMP_Init+0x22>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	75fb      	strb	r3, [r7, #23]
 800142e:	e05e      	b.n	80014ee <HAL_COMP_Init+0xe6>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001430:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <HAL_COMP_Init+0xf0>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a30      	ldr	r2, [pc, #192]	; (80014f8 <HAL_COMP_Init+0xf0>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <HAL_COMP_Init+0xf0>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff fd43 	bl	8000ed4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d103      	bne.n	8001462 <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4313      	orrs	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f023 0202 	bic.w	r2, r3, #2
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	4313      	orrs	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	695a      	ldr	r2, [r3, #20]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69da      	ldr	r2, [r3, #28]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1a      	ldr	r2, [r3, #32]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 80014ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000

080014fc <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d007      	beq.n	8001522 <HAL_COMP_Start+0x26>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <HAL_COMP_Start+0x2c>
  {
    status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	e0a5      	b.n	8001674 <HAL_COMP_Start+0x178>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b01      	cmp	r3, #1
 8001532:	f040 809d 	bne.w	8001670 <HAL_COMP_Start+0x174>
    {
      /* Get the EXTI Line output configuration */
      extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a52      	ldr	r2, [pc, #328]	; (8001684 <HAL_COMP_Start+0x188>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d009      	beq.n	8001554 <HAL_COMP_Start+0x58>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a50      	ldr	r2, [pc, #320]	; (8001688 <HAL_COMP_Start+0x18c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d102      	bne.n	8001550 <HAL_COMP_Start+0x54>
 800154a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800154e:	e003      	b.n	8001558 <HAL_COMP_Start+0x5c>
 8001550:	2301      	movs	r3, #1
 8001552:	e001      	b.n	8001558 <HAL_COMP_Start+0x5c>
 8001554:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001558:	60bb      	str	r3, [r7, #8]

      /* Configure the event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_EVENT_RISING | COMP_TRIGGERMODE_EVENT_FALLING)) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001562:	2b00      	cmp	r3, #0
 8001564:	d077      	beq.n	8001656 <HAL_COMP_Start+0x15a>
      {
        /* Configure the event trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_RISING) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	2b00      	cmp	r3, #0
 8001570:	d012      	beq.n	8001598 <HAL_COMP_Start+0x9c>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <HAL_COMP_Start+0x8e>
 800157c:	4b43      	ldr	r3, [pc, #268]	; (800168c <HAL_COMP_Start+0x190>)
 800157e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001580:	4942      	ldr	r1, [pc, #264]	; (800168c <HAL_COMP_Start+0x190>)
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	4313      	orrs	r3, r2
 8001586:	628b      	str	r3, [r1, #40]	; 0x28
 8001588:	e01a      	b.n	80015c0 <HAL_COMP_Start+0xc4>
 800158a:	4b40      	ldr	r3, [pc, #256]	; (800168c <HAL_COMP_Start+0x190>)
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	493f      	ldr	r1, [pc, #252]	; (800168c <HAL_COMP_Start+0x190>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
 8001594:	608b      	str	r3, [r1, #8]
 8001596:	e013      	b.n	80015c0 <HAL_COMP_Start+0xc4>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <HAL_COMP_Start+0xb6>
 80015a2:	4b3a      	ldr	r3, [pc, #232]	; (800168c <HAL_COMP_Start+0x190>)
 80015a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	4938      	ldr	r1, [pc, #224]	; (800168c <HAL_COMP_Start+0x190>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	628b      	str	r3, [r1, #40]	; 0x28
 80015b0:	e006      	b.n	80015c0 <HAL_COMP_Start+0xc4>
 80015b2:	4b36      	ldr	r3, [pc, #216]	; (800168c <HAL_COMP_Start+0x190>)
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	4934      	ldr	r1, [pc, #208]	; (800168c <HAL_COMP_Start+0x190>)
 80015bc:	4013      	ands	r3, r2
 80015be:	608b      	str	r3, [r1, #8]
        }

        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_EVENT_FALLING) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d012      	beq.n	80015f2 <HAL_COMP_Start+0xf6>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <HAL_COMP_Start+0xe8>
 80015d6:	4b2d      	ldr	r3, [pc, #180]	; (800168c <HAL_COMP_Start+0x190>)
 80015d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015da:	492c      	ldr	r1, [pc, #176]	; (800168c <HAL_COMP_Start+0x190>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4313      	orrs	r3, r2
 80015e0:	62cb      	str	r3, [r1, #44]	; 0x2c
 80015e2:	e01a      	b.n	800161a <HAL_COMP_Start+0x11e>
 80015e4:	4b29      	ldr	r3, [pc, #164]	; (800168c <HAL_COMP_Start+0x190>)
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	4928      	ldr	r1, [pc, #160]	; (800168c <HAL_COMP_Start+0x190>)
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	60cb      	str	r3, [r1, #12]
 80015f0:	e013      	b.n	800161a <HAL_COMP_Start+0x11e>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <HAL_COMP_Start+0x110>
 80015fc:	4b23      	ldr	r3, [pc, #140]	; (800168c <HAL_COMP_Start+0x190>)
 80015fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	43db      	mvns	r3, r3
 8001604:	4921      	ldr	r1, [pc, #132]	; (800168c <HAL_COMP_Start+0x190>)
 8001606:	4013      	ands	r3, r2
 8001608:	62cb      	str	r3, [r1, #44]	; 0x2c
 800160a:	e006      	b.n	800161a <HAL_COMP_Start+0x11e>
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <HAL_COMP_Start+0x190>)
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	43db      	mvns	r3, r3
 8001614:	491d      	ldr	r1, [pc, #116]	; (800168c <HAL_COMP_Start+0x190>)
 8001616:	4013      	ands	r3, r2
 8001618:	60cb      	str	r3, [r1, #12]
        }

        /* Enable EXTI event generation */
        COMP_EXTI_ENABLE_EVENT(extiline);
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b00      	cmp	r3, #0
 8001622:	d006      	beq.n	8001632 <HAL_COMP_Start+0x136>
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_COMP_Start+0x190>)
 8001626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001628:	4918      	ldr	r1, [pc, #96]	; (800168c <HAL_COMP_Start+0x190>)
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	4313      	orrs	r3, r2
 800162e:	624b      	str	r3, [r1, #36]	; 0x24
 8001630:	e005      	b.n	800163e <HAL_COMP_Start+0x142>
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_COMP_Start+0x190>)
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4915      	ldr	r1, [pc, #84]	; (800168c <HAL_COMP_Start+0x190>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]

        /* Clear COMP EXTI pending bit */
        COMP_EXTI_CLEAR_FLAG(extiline);
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_COMP_Start+0x154>
 8001648:	4a10      	ldr	r2, [pc, #64]	; (800168c <HAL_COMP_Start+0x190>)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	6353      	str	r3, [r2, #52]	; 0x34
 800164e:	e002      	b.n	8001656 <HAL_COMP_Start+0x15a>
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <HAL_COMP_Start+0x190>)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	6153      	str	r3, [r2, #20]
      }

      /* Enable the selected comparator */
      __HAL_COMP_ENABLE(hcomp);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f042 0201 	orr.w	r2, r2, #1
 8001664:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_BUSY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2202      	movs	r2, #2
 800166a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800166e:	e001      	b.n	8001674 <HAL_COMP_Start+0x178>
    }
    else
    {
      status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001674:	7bfb      	ldrb	r3, [r7, #15]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40010020 	.word	0x40010020
 8001688:	40010028 	.word	0x40010028
 800168c:	40010400 	.word	0x40010400

08001690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ac:	4013      	ands	r3, r2
 80016ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c2:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	60d3      	str	r3, [r2, #12]
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <__NVIC_GetPriorityGrouping+0x18>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	f003 0307 	and.w	r3, r3, #7
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	db0b      	blt.n	800171e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	f003 021f 	and.w	r2, r3, #31
 800170c:	4907      	ldr	r1, [pc, #28]	; (800172c <__NVIC_EnableIRQ+0x38>)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	095b      	lsrs	r3, r3, #5
 8001714:	2001      	movs	r0, #1
 8001716:	fa00 f202 	lsl.w	r2, r0, r2
 800171a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000e100 	.word	0xe000e100

08001730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	db0a      	blt.n	800175a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	490c      	ldr	r1, [pc, #48]	; (800177c <__NVIC_SetPriority+0x4c>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	0112      	lsls	r2, r2, #4
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	440b      	add	r3, r1
 8001754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001758:	e00a      	b.n	8001770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4908      	ldr	r1, [pc, #32]	; (8001780 <__NVIC_SetPriority+0x50>)
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	3b04      	subs	r3, #4
 8001768:	0112      	lsls	r2, r2, #4
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	440b      	add	r3, r1
 800176e:	761a      	strb	r2, [r3, #24]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000e100 	.word	0xe000e100
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f1c3 0307 	rsb	r3, r3, #7
 800179e:	2b04      	cmp	r3, #4
 80017a0:	bf28      	it	cs
 80017a2:	2304      	movcs	r3, #4
 80017a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3304      	adds	r3, #4
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d902      	bls.n	80017b4 <NVIC_EncodePriority+0x30>
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3b03      	subs	r3, #3
 80017b2:	e000      	b.n	80017b6 <NVIC_EncodePriority+0x32>
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43da      	mvns	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	401a      	ands	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	43d9      	mvns	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	4313      	orrs	r3, r2
         );
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3724      	adds	r7, #36	; 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017fc:	d301      	bcc.n	8001802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fe:	2301      	movs	r3, #1
 8001800:	e00f      	b.n	8001822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <SysTick_Config+0x40>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180a:	210f      	movs	r1, #15
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f7ff ff8e 	bl	8001730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <SysTick_Config+0x40>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <SysTick_Config+0x40>)
 800181c:	2207      	movs	r2, #7
 800181e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	e000e010 	.word	0xe000e010

08001830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff29 	bl	8001690 <__NVIC_SetPriorityGrouping>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001858:	f7ff ff3e 	bl	80016d8 <__NVIC_GetPriorityGrouping>
 800185c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f7ff ff8e 	bl	8001784 <NVIC_EncodePriority>
 8001868:	4602      	mov	r2, r0
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff5d 	bl	8001730 <__NVIC_SetPriority>
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff31 	bl	80016f4 <__NVIC_EnableIRQ>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffa2 	bl	80017ec <SysTick_Config>
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c2:	e14e      	b.n	8001b62 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	2101      	movs	r1, #1
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 8140 	beq.w	8001b5c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d005      	beq.n	80018f4 <HAL_GPIO_Init+0x40>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d130      	bne.n	8001956 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800192a:	2201      	movs	r2, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	f003 0201 	and.w	r2, r3, #1
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b03      	cmp	r3, #3
 8001960:	d017      	beq.n	8001992 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	2203      	movs	r2, #3
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d123      	bne.n	80019e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	08da      	lsrs	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3208      	adds	r2, #8
 80019a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	6939      	ldr	r1, [r7, #16]
 80019e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	2203      	movs	r2, #3
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0203 	and.w	r2, r3, #3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 809a 	beq.w	8001b5c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a28:	4b55      	ldr	r3, [pc, #340]	; (8001b80 <HAL_GPIO_Init+0x2cc>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a54      	ldr	r2, [pc, #336]	; (8001b80 <HAL_GPIO_Init+0x2cc>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b52      	ldr	r3, [pc, #328]	; (8001b80 <HAL_GPIO_Init+0x2cc>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a40:	4a50      	ldr	r2, [pc, #320]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	220f      	movs	r2, #15
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a6a:	d013      	beq.n	8001a94 <HAL_GPIO_Init+0x1e0>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a46      	ldr	r2, [pc, #280]	; (8001b88 <HAL_GPIO_Init+0x2d4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d00d      	beq.n	8001a90 <HAL_GPIO_Init+0x1dc>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a45      	ldr	r2, [pc, #276]	; (8001b8c <HAL_GPIO_Init+0x2d8>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d007      	beq.n	8001a8c <HAL_GPIO_Init+0x1d8>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a44      	ldr	r2, [pc, #272]	; (8001b90 <HAL_GPIO_Init+0x2dc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_GPIO_Init+0x1d4>
 8001a84:	2303      	movs	r3, #3
 8001a86:	e006      	b.n	8001a96 <HAL_GPIO_Init+0x1e2>
 8001a88:	2305      	movs	r3, #5
 8001a8a:	e004      	b.n	8001a96 <HAL_GPIO_Init+0x1e2>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e002      	b.n	8001a96 <HAL_GPIO_Init+0x1e2>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <HAL_GPIO_Init+0x1e2>
 8001a94:	2300      	movs	r3, #0
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	f002 0203 	and.w	r2, r2, #3
 8001a9c:	0092      	lsls	r2, r2, #2
 8001a9e:	4093      	lsls	r3, r2
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aa6:	4937      	ldr	r1, [pc, #220]	; (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ab4:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <HAL_GPIO_Init+0x2e0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ad8:	4a2e      	ldr	r2, [pc, #184]	; (8001b94 <HAL_GPIO_Init+0x2e0>)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ade:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <HAL_GPIO_Init+0x2e0>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b02:	4a24      	ldr	r2, [pc, #144]	; (8001b94 <HAL_GPIO_Init+0x2e0>)
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b08:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <HAL_GPIO_Init+0x2e0>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b2c:	4a19      	ldr	r2, [pc, #100]	; (8001b94 <HAL_GPIO_Init+0x2e0>)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b32:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <HAL_GPIO_Init+0x2e0>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b56:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <HAL_GPIO_Init+0x2e0>)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f47f aea9 	bne.w	80018c4 <HAL_GPIO_Init+0x10>
  }
}
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40010000 	.word	0x40010000
 8001b88:	48000400 	.word	0x48000400
 8001b8c:	48000800 	.word	0x48000800
 8001b90:	48000c00 	.word	0x48000c00
 8001b94:	40010400 	.word	0x40010400

08001b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e001      	b.n	8001bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	f000 bef4 	b.w	80029ca <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 816a 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bf2:	4bb3      	ldr	r3, [pc, #716]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d00c      	beq.n	8001c18 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bfe:	4bb0      	ldr	r3, [pc, #704]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d159      	bne.n	8001cbe <HAL_RCC_OscConfig+0xf6>
 8001c0a:	4bad      	ldr	r3, [pc, #692]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c16:	d152      	bne.n	8001cbe <HAL_RCC_OscConfig+0xf6>
 8001c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c1c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001c24:	fa93 f3a3 	rbit	r3, r3
 8001c28:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c2c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d102      	bne.n	8001c4a <HAL_RCC_OscConfig+0x82>
 8001c44:	4b9e      	ldr	r3, [pc, #632]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	e015      	b.n	8001c76 <HAL_RCC_OscConfig+0xae>
 8001c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c4e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c62:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c66:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001c72:	4b93      	ldr	r3, [pc, #588]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c7a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001c7e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c82:	fa92 f2a2 	rbit	r2, r2
 8001c86:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001c8a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001c8e:	fab2 f282 	clz	r2, r2
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	f042 0220 	orr.w	r2, r2, #32
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	f002 021f 	and.w	r2, r2, #31
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 810c 	beq.w	8001ec4 <HAL_RCC_OscConfig+0x2fc>
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f040 8106 	bne.w	8001ec4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f000 be86 	b.w	80029ca <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc8:	d106      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x110>
 8001cca:	4b7d      	ldr	r3, [pc, #500]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a7c      	ldr	r2, [pc, #496]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e030      	b.n	8001d3a <HAL_RCC_OscConfig+0x172>
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x134>
 8001ce2:	4b77      	ldr	r3, [pc, #476]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a76      	ldr	r2, [pc, #472]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b74      	ldr	r3, [pc, #464]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a73      	ldr	r2, [pc, #460]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e01e      	b.n	8001d3a <HAL_RCC_OscConfig+0x172>
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d06:	d10c      	bne.n	8001d22 <HAL_RCC_OscConfig+0x15a>
 8001d08:	4b6d      	ldr	r3, [pc, #436]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a6c      	ldr	r2, [pc, #432]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b6a      	ldr	r3, [pc, #424]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a69      	ldr	r2, [pc, #420]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	e00b      	b.n	8001d3a <HAL_RCC_OscConfig+0x172>
 8001d22:	4b67      	ldr	r3, [pc, #412]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a66      	ldr	r2, [pc, #408]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b64      	ldr	r3, [pc, #400]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a63      	ldr	r2, [pc, #396]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001d34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d3a:	4b61      	ldr	r3, [pc, #388]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	f023 020f 	bic.w	r2, r3, #15
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	495d      	ldr	r1, [pc, #372]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d059      	beq.n	8001e0c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff fb4a 	bl	80013f0 <HAL_GetTick>
 8001d5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d62:	f7ff fb45 	bl	80013f0 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	; 0x64
 8001d70:	d902      	bls.n	8001d78 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	f000 be29 	b.w	80029ca <HAL_RCC_OscConfig+0xe02>
 8001d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d7c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001d8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d102      	bne.n	8001daa <HAL_RCC_OscConfig+0x1e2>
 8001da4:	4b46      	ldr	r3, [pc, #280]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	e015      	b.n	8001dd6 <HAL_RCC_OscConfig+0x20e>
 8001daa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001dc6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dda:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001dde:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001de2:	fa92 f2a2 	rbit	r2, r2
 8001de6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001dea:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001dee:	fab2 f282 	clz	r2, r2
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	f042 0220 	orr.w	r2, r2, #32
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	f002 021f 	and.w	r2, r2, #31
 8001dfe:	2101      	movs	r1, #1
 8001e00:	fa01 f202 	lsl.w	r2, r1, r2
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0ab      	beq.n	8001d62 <HAL_RCC_OscConfig+0x19a>
 8001e0a:	e05c      	b.n	8001ec6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7ff faf0 	bl	80013f0 <HAL_GetTick>
 8001e10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e16:	f7ff faeb 	bl	80013f0 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d902      	bls.n	8001e2c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	f000 bdcf 	b.w	80029ca <HAL_RCC_OscConfig+0xe02>
 8001e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e30:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001e40:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e44:	fab3 f383 	clz	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d102      	bne.n	8001e5e <HAL_RCC_OscConfig+0x296>
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	e015      	b.n	8001e8a <HAL_RCC_OscConfig+0x2c2>
 8001e5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e62:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e76:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e7a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_RCC_OscConfig+0x2f8>)
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e8e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001e92:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e96:	fa92 f2a2 	rbit	r2, r2
 8001e9a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001e9e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ea2:	fab2 f282 	clz	r2, r2
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	f042 0220 	orr.w	r2, r2, #32
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	f002 021f 	and.w	r2, r2, #31
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ab      	bne.n	8001e16 <HAL_RCC_OscConfig+0x24e>
 8001ebe:	e002      	b.n	8001ec6 <HAL_RCC_OscConfig+0x2fe>
 8001ec0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 816f 	beq.w	80021b4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ed6:	4bd0      	ldr	r3, [pc, #832]	; (8002218 <HAL_RCC_OscConfig+0x650>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00b      	beq.n	8001efa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ee2:	4bcd      	ldr	r3, [pc, #820]	; (8002218 <HAL_RCC_OscConfig+0x650>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d16c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x400>
 8001eee:	4bca      	ldr	r3, [pc, #808]	; (8002218 <HAL_RCC_OscConfig+0x650>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d166      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x400>
 8001efa:	2302      	movs	r3, #2
 8001efc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001f04:	fa93 f3a3 	rbit	r3, r3
 8001f08:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001f0c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f10:	fab3 f383 	clz	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d102      	bne.n	8001f2a <HAL_RCC_OscConfig+0x362>
 8001f24:	4bbc      	ldr	r3, [pc, #752]	; (8002218 <HAL_RCC_OscConfig+0x650>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	e013      	b.n	8001f52 <HAL_RCC_OscConfig+0x38a>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f42:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001f4e:	4bb2      	ldr	r3, [pc, #712]	; (8002218 <HAL_RCC_OscConfig+0x650>)
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	2202      	movs	r2, #2
 8001f54:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001f58:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f5c:	fa92 f2a2 	rbit	r2, r2
 8001f60:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001f64:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001f68:	fab2 f282 	clz	r2, r2
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f042 0220 	orr.w	r2, r2, #32
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	f002 021f 	and.w	r2, r2, #31
 8001f78:	2101      	movs	r1, #1
 8001f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d007      	beq.n	8001f94 <HAL_RCC_OscConfig+0x3cc>
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d002      	beq.n	8001f94 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f000 bd1b 	b.w	80029ca <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4ba0      	ldr	r3, [pc, #640]	; (8002218 <HAL_RCC_OscConfig+0x650>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9c:	1d3b      	adds	r3, r7, #4
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	21f8      	movs	r1, #248	; 0xf8
 8001fa4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001fac:	fa91 f1a1 	rbit	r1, r1
 8001fb0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001fb4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001fb8:	fab1 f181 	clz	r1, r1
 8001fbc:	b2c9      	uxtb	r1, r1
 8001fbe:	408b      	lsls	r3, r1
 8001fc0:	4995      	ldr	r1, [pc, #596]	; (8002218 <HAL_RCC_OscConfig+0x650>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	e0f5      	b.n	80021b4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8085 	beq.w	80020de <HAL_RCC_OscConfig+0x516>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001fe6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ff4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff f9f6 	bl	80013f0 <HAL_GetTick>
 8002004:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200a:	f7ff f9f1 	bl	80013f0 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d902      	bls.n	8002020 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	f000 bcd5 	b.w	80029ca <HAL_RCC_OscConfig+0xe02>
 8002020:	2302      	movs	r3, #2
 8002022:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002032:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d102      	bne.n	8002050 <HAL_RCC_OscConfig+0x488>
 800204a:	4b73      	ldr	r3, [pc, #460]	; (8002218 <HAL_RCC_OscConfig+0x650>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	e013      	b.n	8002078 <HAL_RCC_OscConfig+0x4b0>
 8002050:	2302      	movs	r3, #2
 8002052:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002062:	2302      	movs	r3, #2
 8002064:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002068:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002074:	4b68      	ldr	r3, [pc, #416]	; (8002218 <HAL_RCC_OscConfig+0x650>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	2202      	movs	r2, #2
 800207a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800207e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002082:	fa92 f2a2 	rbit	r2, r2
 8002086:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800208a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800208e:	fab2 f282 	clz	r2, r2
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	f042 0220 	orr.w	r2, r2, #32
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	f002 021f 	and.w	r2, r2, #31
 800209e:	2101      	movs	r1, #1
 80020a0:	fa01 f202 	lsl.w	r2, r1, r2
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0af      	beq.n	800200a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020aa:	4b5b      	ldr	r3, [pc, #364]	; (8002218 <HAL_RCC_OscConfig+0x650>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	21f8      	movs	r1, #248	; 0xf8
 80020ba:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80020c2:	fa91 f1a1 	rbit	r1, r1
 80020c6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80020ca:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80020ce:	fab1 f181 	clz	r1, r1
 80020d2:	b2c9      	uxtb	r1, r1
 80020d4:	408b      	lsls	r3, r1
 80020d6:	4950      	ldr	r1, [pc, #320]	; (8002218 <HAL_RCC_OscConfig+0x650>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]
 80020dc:	e06a      	b.n	80021b4 <HAL_RCC_OscConfig+0x5ec>
 80020de:	2301      	movs	r3, #1
 80020e0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80020f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f4:	fab3 f383 	clz	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	461a      	mov	r2, r3
 8002106:	2300      	movs	r3, #0
 8002108:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7ff f971 	bl	80013f0 <HAL_GetTick>
 800210e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002112:	e00a      	b.n	800212a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002114:	f7ff f96c 	bl	80013f0 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d902      	bls.n	800212a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	f000 bc50 	b.w	80029ca <HAL_RCC_OscConfig+0xe02>
 800212a:	2302      	movs	r3, #2
 800212c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800213c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d102      	bne.n	800215a <HAL_RCC_OscConfig+0x592>
 8002154:	4b30      	ldr	r3, [pc, #192]	; (8002218 <HAL_RCC_OscConfig+0x650>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	e013      	b.n	8002182 <HAL_RCC_OscConfig+0x5ba>
 800215a:	2302      	movs	r3, #2
 800215c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800216c:	2302      	movs	r3, #2
 800216e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002172:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800217e:	4b26      	ldr	r3, [pc, #152]	; (8002218 <HAL_RCC_OscConfig+0x650>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	2202      	movs	r2, #2
 8002184:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002188:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800218c:	fa92 f2a2 	rbit	r2, r2
 8002190:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002194:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002198:	fab2 f282 	clz	r2, r2
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	f042 0220 	orr.w	r2, r2, #32
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	f002 021f 	and.w	r2, r2, #31
 80021a8:	2101      	movs	r1, #1
 80021aa:	fa01 f202 	lsl.w	r2, r1, r2
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1af      	bne.n	8002114 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80da 	beq.w	8002378 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d069      	beq.n	80022a2 <HAL_RCC_OscConfig+0x6da>
 80021ce:	2301      	movs	r3, #1
 80021d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80021e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_OscConfig+0x654>)
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	461a      	mov	r2, r3
 80021f4:	2301      	movs	r3, #1
 80021f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f8:	f7ff f8fa 	bl	80013f0 <HAL_GetTick>
 80021fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002200:	e00e      	b.n	8002220 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002202:	f7ff f8f5 	bl	80013f0 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d906      	bls.n	8002220 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e3d9      	b.n	80029ca <HAL_RCC_OscConfig+0xe02>
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	10908120 	.word	0x10908120
 8002220:	2302      	movs	r3, #2
 8002222:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002232:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002236:	2202      	movs	r2, #2
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800224e:	2202      	movs	r2, #2
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	fa93 f2a3 	rbit	r2, r3
 800225c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002260:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	4ba5      	ldr	r3, [pc, #660]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 8002264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002266:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800226a:	2102      	movs	r1, #2
 800226c:	6019      	str	r1, [r3, #0]
 800226e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	fa93 f1a3 	rbit	r1, r3
 8002278:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800227c:	6019      	str	r1, [r3, #0]
  return result;
 800227e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	2101      	movs	r1, #1
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0b0      	beq.n	8002202 <HAL_RCC_OscConfig+0x63a>
 80022a0:	e06a      	b.n	8002378 <HAL_RCC_OscConfig+0x7b0>
 80022a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022b8:	601a      	str	r2, [r3, #0]
  return result;
 80022ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022be:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b8c      	ldr	r3, [pc, #560]	; (80024fc <HAL_RCC_OscConfig+0x934>)
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	461a      	mov	r2, r3
 80022d0:	2300      	movs	r3, #0
 80022d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d4:	f7ff f88c 	bl	80013f0 <HAL_GetTick>
 80022d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022dc:	e009      	b.n	80022f2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022de:	f7ff f887 	bl	80013f0 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e36b      	b.n	80029ca <HAL_RCC_OscConfig+0xe02>
 80022f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022f6:	2202      	movs	r2, #2
 80022f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	fa93 f2a3 	rbit	r2, r3
 8002304:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800230e:	2202      	movs	r2, #2
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	fa93 f2a3 	rbit	r2, r3
 800231c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002326:	2202      	movs	r2, #2
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	fa93 f2a3 	rbit	r2, r3
 8002334:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002338:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233a:	4b6f      	ldr	r3, [pc, #444]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 800233c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800233e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002342:	2102      	movs	r1, #2
 8002344:	6019      	str	r1, [r3, #0]
 8002346:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	fa93 f1a3 	rbit	r1, r3
 8002350:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002354:	6019      	str	r1, [r3, #0]
  return result;
 8002356:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	2101      	movs	r1, #1
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1b2      	bne.n	80022de <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 8158 	beq.w	8002638 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002388:	2300      	movs	r3, #0
 800238a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238e:	4b5a      	ldr	r3, [pc, #360]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d112      	bne.n	80023c0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	4b57      	ldr	r3, [pc, #348]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a56      	ldr	r2, [pc, #344]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]
 80023a6:	4b54      	ldr	r3, [pc, #336]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80023ae:	f107 0308 	add.w	r3, r7, #8
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f107 0308 	add.w	r3, r7, #8
 80023b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	4b4f      	ldr	r3, [pc, #316]	; (8002500 <HAL_RCC_OscConfig+0x938>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d11a      	bne.n	8002402 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023cc:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <HAL_RCC_OscConfig+0x938>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a4b      	ldr	r2, [pc, #300]	; (8002500 <HAL_RCC_OscConfig+0x938>)
 80023d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d8:	f7ff f80a 	bl	80013f0 <HAL_GetTick>
 80023dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	e009      	b.n	80023f6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e2:	f7ff f805 	bl	80013f0 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e2e9      	b.n	80029ca <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f6:	4b42      	ldr	r3, [pc, #264]	; (8002500 <HAL_RCC_OscConfig+0x938>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0ef      	beq.n	80023e2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x852>
 800240c:	4b3a      	ldr	r3, [pc, #232]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4a39      	ldr	r2, [pc, #228]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6213      	str	r3, [r2, #32]
 8002418:	e02f      	b.n	800247a <HAL_RCC_OscConfig+0x8b2>
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10c      	bne.n	800243e <HAL_RCC_OscConfig+0x876>
 8002424:	4b34      	ldr	r3, [pc, #208]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4a33      	ldr	r2, [pc, #204]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	6213      	str	r3, [r2, #32]
 8002430:	4b31      	ldr	r3, [pc, #196]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4a30      	ldr	r2, [pc, #192]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 8002436:	f023 0304 	bic.w	r3, r3, #4
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	e01d      	b.n	800247a <HAL_RCC_OscConfig+0x8b2>
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b05      	cmp	r3, #5
 8002446:	d10c      	bne.n	8002462 <HAL_RCC_OscConfig+0x89a>
 8002448:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4a2a      	ldr	r2, [pc, #168]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 800244e:	f043 0304 	orr.w	r3, r3, #4
 8002452:	6213      	str	r3, [r2, #32]
 8002454:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	4a27      	ldr	r2, [pc, #156]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6213      	str	r3, [r2, #32]
 8002460:	e00b      	b.n	800247a <HAL_RCC_OscConfig+0x8b2>
 8002462:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a24      	ldr	r2, [pc, #144]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6213      	str	r3, [r2, #32]
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d06b      	beq.n	800255c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002484:	f7fe ffb4 	bl	80013f0 <HAL_GetTick>
 8002488:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248c:	e00b      	b.n	80024a6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f7fe ffaf 	bl	80013f0 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	; 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e291      	b.n	80029ca <HAL_RCC_OscConfig+0xe02>
 80024a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80024aa:	2202      	movs	r2, #2
 80024ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	fa93 f2a3 	rbit	r2, r3
 80024b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80024c2:	2202      	movs	r2, #2
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	fa93 f2a3 	rbit	r2, r3
 80024d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024d4:	601a      	str	r2, [r3, #0]
  return result;
 80024d6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	f043 0302 	orr.w	r3, r3, #2
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d109      	bne.n	8002504 <HAL_RCC_OscConfig+0x93c>
 80024f0:	4b01      	ldr	r3, [pc, #4]	; (80024f8 <HAL_RCC_OscConfig+0x930>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	e014      	b.n	8002520 <HAL_RCC_OscConfig+0x958>
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	10908120 	.word	0x10908120
 8002500:	40007000 	.word	0x40007000
 8002504:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002508:	2202      	movs	r2, #2
 800250a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	fa93 f2a3 	rbit	r2, r3
 8002516:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	4bbb      	ldr	r3, [pc, #748]	; (800280c <HAL_RCC_OscConfig+0xc44>)
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002524:	2102      	movs	r1, #2
 8002526:	6011      	str	r1, [r2, #0]
 8002528:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	fa92 f1a2 	rbit	r1, r2
 8002532:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002536:	6011      	str	r1, [r2, #0]
  return result;
 8002538:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	fab2 f282 	clz	r2, r2
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	f002 021f 	and.w	r2, r2, #31
 800254e:	2101      	movs	r1, #1
 8002550:	fa01 f202 	lsl.w	r2, r1, r2
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d099      	beq.n	800248e <HAL_RCC_OscConfig+0x8c6>
 800255a:	e063      	b.n	8002624 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255c:	f7fe ff48 	bl	80013f0 <HAL_GetTick>
 8002560:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	e00b      	b.n	800257e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe ff43 	bl	80013f0 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e225      	b.n	80029ca <HAL_RCC_OscConfig+0xe02>
 800257e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002582:	2202      	movs	r2, #2
 8002584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	fa93 f2a3 	rbit	r2, r3
 8002590:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800259a:	2202      	movs	r2, #2
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	fa93 f2a3 	rbit	r2, r3
 80025a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025ac:	601a      	str	r2, [r3, #0]
  return result;
 80025ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f043 0302 	orr.w	r3, r3, #2
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d102      	bne.n	80025ce <HAL_RCC_OscConfig+0xa06>
 80025c8:	4b90      	ldr	r3, [pc, #576]	; (800280c <HAL_RCC_OscConfig+0xc44>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	e00d      	b.n	80025ea <HAL_RCC_OscConfig+0xa22>
 80025ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80025d2:	2202      	movs	r2, #2
 80025d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	fa93 f2a3 	rbit	r2, r3
 80025e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	4b89      	ldr	r3, [pc, #548]	; (800280c <HAL_RCC_OscConfig+0xc44>)
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025ee:	2102      	movs	r1, #2
 80025f0:	6011      	str	r1, [r2, #0]
 80025f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	fa92 f1a2 	rbit	r1, r2
 80025fc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002600:	6011      	str	r1, [r2, #0]
  return result;
 8002602:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	fab2 f282 	clz	r2, r2
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	f002 021f 	and.w	r2, r2, #31
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f202 	lsl.w	r2, r1, r2
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1a0      	bne.n	8002566 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002624:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002628:	2b01      	cmp	r3, #1
 800262a:	d105      	bne.n	8002638 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262c:	4b77      	ldr	r3, [pc, #476]	; (800280c <HAL_RCC_OscConfig+0xc44>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	4a76      	ldr	r2, [pc, #472]	; (800280c <HAL_RCC_OscConfig+0xc44>)
 8002632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002636:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 81c2 	beq.w	80029c8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002644:	4b71      	ldr	r3, [pc, #452]	; (800280c <HAL_RCC_OscConfig+0xc44>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	f000 819c 	beq.w	800298a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b02      	cmp	r3, #2
 800265a:	f040 8114 	bne.w	8002886 <HAL_RCC_OscConfig+0xcbe>
 800265e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002662:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	fa93 f2a3 	rbit	r2, r3
 8002672:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002676:	601a      	str	r2, [r3, #0]
  return result;
 8002678:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800267c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002688:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	461a      	mov	r2, r3
 8002690:	2300      	movs	r3, #0
 8002692:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7fe feac 	bl	80013f0 <HAL_GetTick>
 8002698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269c:	e009      	b.n	80026b2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269e:	f7fe fea7 	bl	80013f0 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e18b      	b.n	80029ca <HAL_RCC_OscConfig+0xe02>
 80026b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	fa93 f2a3 	rbit	r2, r3
 80026c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026ca:	601a      	str	r2, [r3, #0]
  return result;
 80026cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d102      	bne.n	80026ec <HAL_RCC_OscConfig+0xb24>
 80026e6:	4b49      	ldr	r3, [pc, #292]	; (800280c <HAL_RCC_OscConfig+0xc44>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	e01b      	b.n	8002724 <HAL_RCC_OscConfig+0xb5c>
 80026ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	fa93 f2a3 	rbit	r2, r3
 8002700:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800270a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	fa93 f2a3 	rbit	r2, r3
 800271a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	4b3a      	ldr	r3, [pc, #232]	; (800280c <HAL_RCC_OscConfig+0xc44>)
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002728:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800272c:	6011      	str	r1, [r2, #0]
 800272e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	fa92 f1a2 	rbit	r1, r2
 8002738:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800273c:	6011      	str	r1, [r2, #0]
  return result;
 800273e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	fab2 f282 	clz	r2, r2
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	f042 0220 	orr.w	r2, r2, #32
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	f002 021f 	and.w	r2, r2, #31
 8002754:	2101      	movs	r1, #1
 8002756:	fa01 f202 	lsl.w	r2, r1, r2
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d19e      	bne.n	800269e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002760:	4b2a      	ldr	r3, [pc, #168]	; (800280c <HAL_RCC_OscConfig+0xc44>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	430b      	orrs	r3, r1
 8002776:	4925      	ldr	r1, [pc, #148]	; (800280c <HAL_RCC_OscConfig+0xc44>)
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
 800277c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002780:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002784:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002786:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	fa93 f2a3 	rbit	r2, r3
 8002790:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002794:	601a      	str	r2, [r3, #0]
  return result;
 8002796:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800279a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	461a      	mov	r2, r3
 80027ae:	2301      	movs	r3, #1
 80027b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7fe fe1d 	bl	80013f0 <HAL_GetTick>
 80027b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027ba:	e009      	b.n	80027d0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe fe18 	bl	80013f0 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e0fc      	b.n	80029ca <HAL_RCC_OscConfig+0xe02>
 80027d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	fa93 f2a3 	rbit	r2, r3
 80027e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027e8:	601a      	str	r2, [r3, #0]
  return result;
 80027ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f0:	fab3 f383 	clz	r3, r3
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	d105      	bne.n	8002810 <HAL_RCC_OscConfig+0xc48>
 8002804:	4b01      	ldr	r3, [pc, #4]	; (800280c <HAL_RCC_OscConfig+0xc44>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	e01e      	b.n	8002848 <HAL_RCC_OscConfig+0xc80>
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002814:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002818:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	fa93 f2a3 	rbit	r2, r3
 8002824:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800282e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	fa93 f2a3 	rbit	r2, r3
 800283e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <HAL_RCC_OscConfig+0xe0c>)
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800284c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002850:	6011      	str	r1, [r2, #0]
 8002852:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	fa92 f1a2 	rbit	r1, r2
 800285c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002860:	6011      	str	r1, [r2, #0]
  return result;
 8002862:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	fab2 f282 	clz	r2, r2
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	f042 0220 	orr.w	r2, r2, #32
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	f002 021f 	and.w	r2, r2, #31
 8002878:	2101      	movs	r1, #1
 800287a:	fa01 f202 	lsl.w	r2, r1, r2
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d09b      	beq.n	80027bc <HAL_RCC_OscConfig+0xbf4>
 8002884:	e0a0      	b.n	80029c8 <HAL_RCC_OscConfig+0xe00>
 8002886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800288a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800288e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	fa93 f2a3 	rbit	r2, r3
 800289a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800289e:	601a      	str	r2, [r3, #0]
  return result;
 80028a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	461a      	mov	r2, r3
 80028b8:	2300      	movs	r3, #0
 80028ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe fd98 	bl	80013f0 <HAL_GetTick>
 80028c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c4:	e009      	b.n	80028da <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c6:	f7fe fd93 	bl	80013f0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e077      	b.n	80029ca <HAL_RCC_OscConfig+0xe02>
 80028da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	fa93 f2a3 	rbit	r2, r3
 80028ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f2:	601a      	str	r2, [r3, #0]
  return result;
 80028f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	095b      	lsrs	r3, r3, #5
 8002902:	b2db      	uxtb	r3, r3
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d102      	bne.n	8002914 <HAL_RCC_OscConfig+0xd4c>
 800290e:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <HAL_RCC_OscConfig+0xe0c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	e01b      	b.n	800294c <HAL_RCC_OscConfig+0xd84>
 8002914:	f107 0320 	add.w	r3, r7, #32
 8002918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800291c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f107 0320 	add.w	r3, r7, #32
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	fa93 f2a3 	rbit	r2, r3
 8002928:	f107 031c 	add.w	r3, r7, #28
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f107 0318 	add.w	r3, r7, #24
 8002932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	f107 0318 	add.w	r3, r7, #24
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fa93 f2a3 	rbit	r2, r3
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_RCC_OscConfig+0xe0c>)
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f107 0210 	add.w	r2, r7, #16
 8002950:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002954:	6011      	str	r1, [r2, #0]
 8002956:	f107 0210 	add.w	r2, r7, #16
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	fa92 f1a2 	rbit	r1, r2
 8002960:	f107 020c 	add.w	r2, r7, #12
 8002964:	6011      	str	r1, [r2, #0]
  return result;
 8002966:	f107 020c 	add.w	r2, r7, #12
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	fab2 f282 	clz	r2, r2
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f042 0220 	orr.w	r2, r2, #32
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	f002 021f 	and.w	r2, r2, #31
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f202 	lsl.w	r2, r1, r2
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d19e      	bne.n	80028c6 <HAL_RCC_OscConfig+0xcfe>
 8002988:	e01e      	b.n	80029c8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e018      	b.n	80029ca <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002998:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <HAL_RCC_OscConfig+0xe0c>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029a0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d108      	bne.n	80029c4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80029b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000

080029d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b09e      	sub	sp, #120	; 0x78
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e162      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029f0:	4b90      	ldr	r3, [pc, #576]	; (8002c34 <HAL_RCC_ClockConfig+0x25c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d910      	bls.n	8002a20 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b8d      	ldr	r3, [pc, #564]	; (8002c34 <HAL_RCC_ClockConfig+0x25c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 0207 	bic.w	r2, r3, #7
 8002a06:	498b      	ldr	r1, [pc, #556]	; (8002c34 <HAL_RCC_ClockConfig+0x25c>)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b89      	ldr	r3, [pc, #548]	; (8002c34 <HAL_RCC_ClockConfig+0x25c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e14a      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a2c:	4b82      	ldr	r3, [pc, #520]	; (8002c38 <HAL_RCC_ClockConfig+0x260>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	497f      	ldr	r1, [pc, #508]	; (8002c38 <HAL_RCC_ClockConfig+0x260>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80dc 	beq.w	8002c04 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d13c      	bne.n	8002ace <HAL_RCC_ClockConfig+0xf6>
 8002a54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a58:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a64:	fab3 f383 	clz	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d102      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xa6>
 8002a78:	4b6f      	ldr	r3, [pc, #444]	; (8002c38 <HAL_RCC_ClockConfig+0x260>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	e00f      	b.n	8002a9e <HAL_RCC_ClockConfig+0xc6>
 8002a7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a90:	663b      	str	r3, [r7, #96]	; 0x60
 8002a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a9a:	4b67      	ldr	r3, [pc, #412]	; (8002c38 <HAL_RCC_ClockConfig+0x260>)
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aa2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002aa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002aa6:	fa92 f2a2 	rbit	r2, r2
 8002aaa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002aac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002aae:	fab2 f282 	clz	r2, r2
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	f042 0220 	orr.w	r2, r2, #32
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	f002 021f 	and.w	r2, r2, #31
 8002abe:	2101      	movs	r1, #1
 8002ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d17b      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0f3      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d13c      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x178>
 8002ad6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ada:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	095b      	lsrs	r3, r3, #5
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d102      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x128>
 8002afa:	4b4f      	ldr	r3, [pc, #316]	; (8002c38 <HAL_RCC_ClockConfig+0x260>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	e00f      	b.n	8002b20 <HAL_RCC_ClockConfig+0x148>
 8002b00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b04:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b12:	643b      	str	r3, [r7, #64]	; 0x40
 8002b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b1c:	4b46      	ldr	r3, [pc, #280]	; (8002c38 <HAL_RCC_ClockConfig+0x260>)
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b24:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b28:	fa92 f2a2 	rbit	r2, r2
 8002b2c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b30:	fab2 f282 	clz	r2, r2
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	f042 0220 	orr.w	r2, r2, #32
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	f002 021f 	and.w	r2, r2, #31
 8002b40:	2101      	movs	r1, #1
 8002b42:	fa01 f202 	lsl.w	r2, r1, r2
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d13a      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0b2      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x2de>
 8002b50:	2302      	movs	r3, #2
 8002b52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d102      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x1a0>
 8002b72:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <HAL_RCC_ClockConfig+0x260>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	e00d      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1bc>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
 8002b84:	2302      	movs	r3, #2
 8002b86:	623b      	str	r3, [r7, #32]
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	61fb      	str	r3, [r7, #28]
 8002b90:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <HAL_RCC_ClockConfig+0x260>)
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	2202      	movs	r2, #2
 8002b96:	61ba      	str	r2, [r7, #24]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	fa92 f2a2 	rbit	r2, r2
 8002b9e:	617a      	str	r2, [r7, #20]
  return result;
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	fab2 f282 	clz	r2, r2
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	f042 0220 	orr.w	r2, r2, #32
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	f002 021f 	and.w	r2, r2, #31
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e079      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <HAL_RCC_ClockConfig+0x260>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f023 0203 	bic.w	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	491a      	ldr	r1, [pc, #104]	; (8002c38 <HAL_RCC_ClockConfig+0x260>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd4:	f7fe fc0c 	bl	80013f0 <HAL_GetTick>
 8002bd8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bdc:	f7fe fc08 	bl	80013f0 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e061      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <HAL_RCC_ClockConfig+0x260>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 020c 	and.w	r2, r3, #12
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d1eb      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCC_ClockConfig+0x25c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d214      	bcs.n	8002c3c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_RCC_ClockConfig+0x25c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 0207 	bic.w	r2, r3, #7
 8002c1a:	4906      	ldr	r1, [pc, #24]	; (8002c34 <HAL_RCC_ClockConfig+0x25c>)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <HAL_RCC_ClockConfig+0x25c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e040      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x2de>
 8002c34:	40022000 	.word	0x40022000
 8002c38:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <HAL_RCC_ClockConfig+0x2e8>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	491a      	ldr	r1, [pc, #104]	; (8002cc0 <HAL_RCC_ClockConfig+0x2e8>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c66:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <HAL_RCC_ClockConfig+0x2e8>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4912      	ldr	r1, [pc, #72]	; (8002cc0 <HAL_RCC_ClockConfig+0x2e8>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c7a:	f000 f829 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8002c7e:	4601      	mov	r1, r0
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <HAL_RCC_ClockConfig+0x2e8>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c88:	22f0      	movs	r2, #240	; 0xf0
 8002c8a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	fa92 f2a2 	rbit	r2, r2
 8002c92:	60fa      	str	r2, [r7, #12]
  return result;
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	fab2 f282 	clz	r2, r2
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	40d3      	lsrs	r3, r2
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x2ec>)
 8002ca0:	5cd3      	ldrb	r3, [r2, r3]
 8002ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ca6:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <HAL_RCC_ClockConfig+0x2f0>)
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <HAL_RCC_ClockConfig+0x2f4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe fb5a 	bl	8001368 <HAL_InitTick>
  
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3778      	adds	r7, #120	; 0x78
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	08004500 	.word	0x08004500
 8002cc8:	20000010 	.word	0x20000010
 8002ccc:	20000014 	.word	0x20000014

08002cd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b08b      	sub	sp, #44	; 0x2c
 8002cd4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002cea:	4b29      	ldr	r3, [pc, #164]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d002      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0x30>
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d003      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0x36>
 8002cfe:	e03c      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d00:	4b24      	ldr	r3, [pc, #144]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d02:	623b      	str	r3, [r7, #32]
      break;
 8002d04:	e03c      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d0c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d10:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	fa92 f2a2 	rbit	r2, r2
 8002d18:	607a      	str	r2, [r7, #4]
  return result;
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	fab2 f282 	clz	r2, r2
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	40d3      	lsrs	r3, r2
 8002d24:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d2a:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	220f      	movs	r2, #15
 8002d34:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	fa92 f2a2 	rbit	r2, r2
 8002d3c:	60fa      	str	r2, [r7, #12]
  return result;
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	fab2 f282 	clz	r2, r2
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	40d3      	lsrs	r3, r2
 8002d48:	4a14      	ldr	r2, [pc, #80]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d4a:	5cd3      	ldrb	r3, [r2, r3]
 8002d4c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d58:	4a0e      	ldr	r2, [pc, #56]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fb02 f303 	mul.w	r3, r2, r3
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
 8002d68:	e004      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	4a0c      	ldr	r2, [pc, #48]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	623b      	str	r3, [r7, #32]
      break;
 8002d78:	e002      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d7a:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d7c:	623b      	str	r3, [r7, #32]
      break;
 8002d7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d80:	6a3b      	ldr	r3, [r7, #32]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	372c      	adds	r7, #44	; 0x2c
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000
 8002d94:	007a1200 	.word	0x007a1200
 8002d98:	08004510 	.word	0x08004510
 8002d9c:	08004520 	.word	0x08004520
 8002da0:	003d0900 	.word	0x003d0900

08002da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b092      	sub	sp, #72	; 0x48
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80d4 	beq.w	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc8:	4b4e      	ldr	r3, [pc, #312]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10e      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd4:	4b4b      	ldr	r3, [pc, #300]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	4a4a      	ldr	r2, [pc, #296]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dde:	61d3      	str	r3, [r2, #28]
 8002de0:	4b48      	ldr	r3, [pc, #288]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b45      	ldr	r3, [pc, #276]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d118      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfe:	4b42      	ldr	r3, [pc, #264]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a41      	ldr	r2, [pc, #260]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe faf1 	bl	80013f0 <HAL_GetTick>
 8002e0e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	e008      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e12:	f7fe faed 	bl	80013f0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b64      	cmp	r3, #100	; 0x64
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e14b      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e30:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e38:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 8084 	beq.w	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d07c      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e50:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d04b      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb2:	f7fe fa9d 	bl	80013f0 <HAL_GetTick>
 8002eb6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fe fa99 	bl	80013f0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e0f5      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed6:	fa93 f3a3 	rbit	r3, r3
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
 8002edc:	2302      	movs	r3, #2
 8002ede:	623b      	str	r3, [r7, #32]
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	61fb      	str	r3, [r7, #28]
  return result;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f043 0302 	orr.w	r3, r3, #2
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d108      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002efe:	4b01      	ldr	r3, [pc, #4]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	e00d      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40007000 	.word	0x40007000
 8002f0c:	10908100 	.word	0x10908100
 8002f10:	2302      	movs	r3, #2
 8002f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	4b69      	ldr	r3, [pc, #420]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	2202      	movs	r2, #2
 8002f22:	613a      	str	r2, [r7, #16]
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	fa92 f2a2 	rbit	r2, r2
 8002f2a:	60fa      	str	r2, [r7, #12]
  return result;
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	fab2 f282 	clz	r2, r2
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	f002 021f 	and.w	r2, r2, #31
 8002f3e:	2101      	movs	r1, #1
 8002f40:	fa01 f202 	lsl.w	r2, r1, r2
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0b7      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f4a:	4b5e      	ldr	r3, [pc, #376]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	495b      	ldr	r1, [pc, #364]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d105      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f64:	4b57      	ldr	r3, [pc, #348]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	4a56      	ldr	r2, [pc, #344]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f7c:	4b51      	ldr	r3, [pc, #324]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	f023 0203 	bic.w	r2, r3, #3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	494e      	ldr	r1, [pc, #312]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f9a:	4b4a      	ldr	r3, [pc, #296]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f023 0210 	bic.w	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	4947      	ldr	r1, [pc, #284]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002fb8:	4b42      	ldr	r3, [pc, #264]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	493f      	ldr	r1, [pc, #252]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f023 0220 	bic.w	r2, r3, #32
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	4938      	ldr	r1, [pc, #224]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ff4:	4b33      	ldr	r3, [pc, #204]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	4930      	ldr	r1, [pc, #192]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003002:	4313      	orrs	r3, r2
 8003004:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003012:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	4929      	ldr	r1, [pc, #164]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003030:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	4921      	ldr	r1, [pc, #132]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800303e:	4313      	orrs	r3, r2
 8003040:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	491a      	ldr	r1, [pc, #104]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800305c:	4313      	orrs	r3, r2
 800305e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800306c:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	4912      	ldr	r1, [pc, #72]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800307a:	4313      	orrs	r3, r2
 800307c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d008      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800308a:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	490b      	ldr	r1, [pc, #44]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003098:	4313      	orrs	r3, r2
 800309a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	4903      	ldr	r1, [pc, #12]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3748      	adds	r7, #72	; 0x48
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40021000 	.word	0x40021000

080030c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e049      	b.n	800316e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe f810 	bl	8001114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3304      	adds	r3, #4
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f000 fcee 	bl	8003ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d001      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e03b      	b.n	8003208 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a19      	ldr	r2, [pc, #100]	; (8003214 <HAL_TIM_Base_Start_IT+0x9c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d009      	beq.n	80031c6 <HAL_TIM_Base_Start_IT+0x4e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ba:	d004      	beq.n	80031c6 <HAL_TIM_Base_Start_IT+0x4e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a15      	ldr	r2, [pc, #84]	; (8003218 <HAL_TIM_Base_Start_IT+0xa0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d115      	bne.n	80031f2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	4b13      	ldr	r3, [pc, #76]	; (800321c <HAL_TIM_Base_Start_IT+0xa4>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b06      	cmp	r3, #6
 80031d6:	d015      	beq.n	8003204 <HAL_TIM_Base_Start_IT+0x8c>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031de:	d011      	beq.n	8003204 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f0:	e008      	b.n	8003204 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e000      	b.n	8003206 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003204:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	40012c00 	.word	0x40012c00
 8003218:	40014000 	.word	0x40014000
 800321c:	00010007 	.word	0x00010007

08003220 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e049      	b.n	80032c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd ff2c 	bl	80010a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3304      	adds	r3, #4
 800325c:	4619      	mov	r1, r3
 800325e:	4610      	mov	r0, r2
 8003260:	f000 fc42 	bl	8003ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d109      	bne.n	80032f4 <HAL_TIM_PWM_Start+0x24>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	bf14      	ite	ne
 80032ec:	2301      	movne	r3, #1
 80032ee:	2300      	moveq	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	e03c      	b.n	800336e <HAL_TIM_PWM_Start+0x9e>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d109      	bne.n	800330e <HAL_TIM_PWM_Start+0x3e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b01      	cmp	r3, #1
 8003304:	bf14      	ite	ne
 8003306:	2301      	movne	r3, #1
 8003308:	2300      	moveq	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	e02f      	b.n	800336e <HAL_TIM_PWM_Start+0x9e>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d109      	bne.n	8003328 <HAL_TIM_PWM_Start+0x58>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	bf14      	ite	ne
 8003320:	2301      	movne	r3, #1
 8003322:	2300      	moveq	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	e022      	b.n	800336e <HAL_TIM_PWM_Start+0x9e>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d109      	bne.n	8003342 <HAL_TIM_PWM_Start+0x72>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b01      	cmp	r3, #1
 8003338:	bf14      	ite	ne
 800333a:	2301      	movne	r3, #1
 800333c:	2300      	moveq	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	e015      	b.n	800336e <HAL_TIM_PWM_Start+0x9e>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b10      	cmp	r3, #16
 8003346:	d109      	bne.n	800335c <HAL_TIM_PWM_Start+0x8c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	bf14      	ite	ne
 8003354:	2301      	movne	r3, #1
 8003356:	2300      	moveq	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	e008      	b.n	800336e <HAL_TIM_PWM_Start+0x9e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e083      	b.n	800347e <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d104      	bne.n	8003386 <HAL_TIM_PWM_Start+0xb6>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003384:	e023      	b.n	80033ce <HAL_TIM_PWM_Start+0xfe>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b04      	cmp	r3, #4
 800338a:	d104      	bne.n	8003396 <HAL_TIM_PWM_Start+0xc6>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003394:	e01b      	b.n	80033ce <HAL_TIM_PWM_Start+0xfe>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d104      	bne.n	80033a6 <HAL_TIM_PWM_Start+0xd6>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033a4:	e013      	b.n	80033ce <HAL_TIM_PWM_Start+0xfe>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b0c      	cmp	r3, #12
 80033aa:	d104      	bne.n	80033b6 <HAL_TIM_PWM_Start+0xe6>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033b4:	e00b      	b.n	80033ce <HAL_TIM_PWM_Start+0xfe>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b10      	cmp	r3, #16
 80033ba:	d104      	bne.n	80033c6 <HAL_TIM_PWM_Start+0xf6>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c4:	e003      	b.n	80033ce <HAL_TIM_PWM_Start+0xfe>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2202      	movs	r2, #2
 80033ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2201      	movs	r2, #1
 80033d4:	6839      	ldr	r1, [r7, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 ff34 	bl	8004244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a29      	ldr	r2, [pc, #164]	; (8003488 <HAL_TIM_PWM_Start+0x1b8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00e      	beq.n	8003404 <HAL_TIM_PWM_Start+0x134>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a28      	ldr	r2, [pc, #160]	; (800348c <HAL_TIM_PWM_Start+0x1bc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d009      	beq.n	8003404 <HAL_TIM_PWM_Start+0x134>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a26      	ldr	r2, [pc, #152]	; (8003490 <HAL_TIM_PWM_Start+0x1c0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d004      	beq.n	8003404 <HAL_TIM_PWM_Start+0x134>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a25      	ldr	r2, [pc, #148]	; (8003494 <HAL_TIM_PWM_Start+0x1c4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d101      	bne.n	8003408 <HAL_TIM_PWM_Start+0x138>
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <HAL_TIM_PWM_Start+0x13a>
 8003408:	2300      	movs	r3, #0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d007      	beq.n	800341e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800341c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a19      	ldr	r2, [pc, #100]	; (8003488 <HAL_TIM_PWM_Start+0x1b8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d009      	beq.n	800343c <HAL_TIM_PWM_Start+0x16c>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003430:	d004      	beq.n	800343c <HAL_TIM_PWM_Start+0x16c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a15      	ldr	r2, [pc, #84]	; (800348c <HAL_TIM_PWM_Start+0x1bc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d115      	bne.n	8003468 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <HAL_TIM_PWM_Start+0x1c8>)
 8003444:	4013      	ands	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b06      	cmp	r3, #6
 800344c:	d015      	beq.n	800347a <HAL_TIM_PWM_Start+0x1aa>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003454:	d011      	beq.n	800347a <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0201 	orr.w	r2, r2, #1
 8003464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003466:	e008      	b.n	800347a <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e000      	b.n	800347c <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40014000 	.word	0x40014000
 8003490:	40014400 	.word	0x40014400
 8003494:	40014800 	.word	0x40014800
 8003498:	00010007 	.word	0x00010007

0800349c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d122      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d11b      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0202 	mvn.w	r2, #2
 80034c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fae3 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fad5 	bl	8003a96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fae6 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b04      	cmp	r3, #4
 8003504:	d122      	bne.n	800354c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b04      	cmp	r3, #4
 8003512:	d11b      	bne.n	800354c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0204 	mvn.w	r2, #4
 800351c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2202      	movs	r2, #2
 8003522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fab9 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 8003538:	e005      	b.n	8003546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 faab 	bl	8003a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fabc 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b08      	cmp	r3, #8
 8003558:	d122      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b08      	cmp	r3, #8
 8003566:	d11b      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0208 	mvn.w	r2, #8
 8003570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2204      	movs	r2, #4
 8003576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fa8f 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 800358c:	e005      	b.n	800359a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fa81 	bl	8003a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fa92 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d122      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d11b      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0210 	mvn.w	r2, #16
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2208      	movs	r2, #8
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fa65 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fa57 	bl	8003a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fa68 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d10e      	bne.n	8003620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d107      	bne.n	8003620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0201 	mvn.w	r2, #1
 8003618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd f90a 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362a:	2b80      	cmp	r3, #128	; 0x80
 800362c:	d10e      	bne.n	800364c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003638:	2b80      	cmp	r3, #128	; 0x80
 800363a:	d107      	bne.n	800364c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 ff0a 	bl	8004460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800365a:	d10e      	bne.n	800367a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003666:	2b80      	cmp	r3, #128	; 0x80
 8003668:	d107      	bne.n	800367a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fefd 	bl	8004474 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003684:	2b40      	cmp	r3, #64	; 0x40
 8003686:	d10e      	bne.n	80036a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d107      	bne.n	80036a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800369e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fa16 	bl	8003ad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d10e      	bne.n	80036d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d107      	bne.n	80036d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f06f 0220 	mvn.w	r2, #32
 80036ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 febd 	bl	800444c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e0ff      	b.n	80038fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b14      	cmp	r3, #20
 8003706:	f200 80f0 	bhi.w	80038ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800370a:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003710:	08003765 	.word	0x08003765
 8003714:	080038eb 	.word	0x080038eb
 8003718:	080038eb 	.word	0x080038eb
 800371c:	080038eb 	.word	0x080038eb
 8003720:	080037a5 	.word	0x080037a5
 8003724:	080038eb 	.word	0x080038eb
 8003728:	080038eb 	.word	0x080038eb
 800372c:	080038eb 	.word	0x080038eb
 8003730:	080037e7 	.word	0x080037e7
 8003734:	080038eb 	.word	0x080038eb
 8003738:	080038eb 	.word	0x080038eb
 800373c:	080038eb 	.word	0x080038eb
 8003740:	08003827 	.word	0x08003827
 8003744:	080038eb 	.word	0x080038eb
 8003748:	080038eb 	.word	0x080038eb
 800374c:	080038eb 	.word	0x080038eb
 8003750:	08003869 	.word	0x08003869
 8003754:	080038eb 	.word	0x080038eb
 8003758:	080038eb 	.word	0x080038eb
 800375c:	080038eb 	.word	0x080038eb
 8003760:	080038a9 	.word	0x080038a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fa2a 	bl	8003bc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0208 	orr.w	r2, r2, #8
 800377e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0204 	bic.w	r2, r2, #4
 800378e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6999      	ldr	r1, [r3, #24]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	619a      	str	r2, [r3, #24]
      break;
 80037a2:	e0a5      	b.n	80038f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fa90 	bl	8003cd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6999      	ldr	r1, [r3, #24]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	021a      	lsls	r2, r3, #8
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	619a      	str	r2, [r3, #24]
      break;
 80037e4:	e084      	b.n	80038f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 faef 	bl	8003dd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 0208 	orr.w	r2, r2, #8
 8003800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0204 	bic.w	r2, r2, #4
 8003810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69d9      	ldr	r1, [r3, #28]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	61da      	str	r2, [r3, #28]
      break;
 8003824:	e064      	b.n	80038f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fb4d 	bl	8003ecc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69d9      	ldr	r1, [r3, #28]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	021a      	lsls	r2, r3, #8
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	61da      	str	r2, [r3, #28]
      break;
 8003866:	e043      	b.n	80038f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fb90 	bl	8003f94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0208 	orr.w	r2, r2, #8
 8003882:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0204 	bic.w	r2, r2, #4
 8003892:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	691a      	ldr	r2, [r3, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038a6:	e023      	b.n	80038f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fbce 	bl	8004050 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	021a      	lsls	r2, r3, #8
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038e8:	e002      	b.n	80038f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	75fb      	strb	r3, [r7, #23]
      break;
 80038ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop

08003904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_TIM_ConfigClockSource+0x1c>
 800391c:	2302      	movs	r3, #2
 800391e:	e0b6      	b.n	8003a8e <HAL_TIM_ConfigClockSource+0x18a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800393e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800394a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800395c:	d03e      	beq.n	80039dc <HAL_TIM_ConfigClockSource+0xd8>
 800395e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003962:	f200 8087 	bhi.w	8003a74 <HAL_TIM_ConfigClockSource+0x170>
 8003966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396a:	f000 8086 	beq.w	8003a7a <HAL_TIM_ConfigClockSource+0x176>
 800396e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003972:	d87f      	bhi.n	8003a74 <HAL_TIM_ConfigClockSource+0x170>
 8003974:	2b70      	cmp	r3, #112	; 0x70
 8003976:	d01a      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0xaa>
 8003978:	2b70      	cmp	r3, #112	; 0x70
 800397a:	d87b      	bhi.n	8003a74 <HAL_TIM_ConfigClockSource+0x170>
 800397c:	2b60      	cmp	r3, #96	; 0x60
 800397e:	d050      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x11e>
 8003980:	2b60      	cmp	r3, #96	; 0x60
 8003982:	d877      	bhi.n	8003a74 <HAL_TIM_ConfigClockSource+0x170>
 8003984:	2b50      	cmp	r3, #80	; 0x50
 8003986:	d03c      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0xfe>
 8003988:	2b50      	cmp	r3, #80	; 0x50
 800398a:	d873      	bhi.n	8003a74 <HAL_TIM_ConfigClockSource+0x170>
 800398c:	2b40      	cmp	r3, #64	; 0x40
 800398e:	d058      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0x13e>
 8003990:	2b40      	cmp	r3, #64	; 0x40
 8003992:	d86f      	bhi.n	8003a74 <HAL_TIM_ConfigClockSource+0x170>
 8003994:	2b30      	cmp	r3, #48	; 0x30
 8003996:	d064      	beq.n	8003a62 <HAL_TIM_ConfigClockSource+0x15e>
 8003998:	2b30      	cmp	r3, #48	; 0x30
 800399a:	d86b      	bhi.n	8003a74 <HAL_TIM_ConfigClockSource+0x170>
 800399c:	2b20      	cmp	r3, #32
 800399e:	d060      	beq.n	8003a62 <HAL_TIM_ConfigClockSource+0x15e>
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d867      	bhi.n	8003a74 <HAL_TIM_ConfigClockSource+0x170>
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d05c      	beq.n	8003a62 <HAL_TIM_ConfigClockSource+0x15e>
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d05a      	beq.n	8003a62 <HAL_TIM_ConfigClockSource+0x15e>
 80039ac:	e062      	b.n	8003a74 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6899      	ldr	r1, [r3, #8]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f000 fc21 	bl	8004204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	609a      	str	r2, [r3, #8]
      break;
 80039da:	e04f      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	6899      	ldr	r1, [r3, #8]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f000 fc0a 	bl	8004204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039fe:	609a      	str	r2, [r3, #8]
      break;
 8003a00:	e03c      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6859      	ldr	r1, [r3, #4]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f000 fb7e 	bl	8004110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2150      	movs	r1, #80	; 0x50
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fbd7 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8003a20:	e02c      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6859      	ldr	r1, [r3, #4]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f000 fb9d 	bl	800416e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2160      	movs	r1, #96	; 0x60
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fbc7 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8003a40:	e01c      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	6859      	ldr	r1, [r3, #4]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f000 fb5e 	bl	8004110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2140      	movs	r1, #64	; 0x40
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fbb7 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8003a60:	e00c      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	f000 fbae 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8003a72:	e003      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
      break;
 8003a78:	e000      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a2e      	ldr	r2, [pc, #184]	; (8003bb4 <TIM_Base_SetConfig+0xcc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d003      	beq.n	8003b08 <TIM_Base_SetConfig+0x20>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b06:	d108      	bne.n	8003b1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a25      	ldr	r2, [pc, #148]	; (8003bb4 <TIM_Base_SetConfig+0xcc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00f      	beq.n	8003b42 <TIM_Base_SetConfig+0x5a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b28:	d00b      	beq.n	8003b42 <TIM_Base_SetConfig+0x5a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a22      	ldr	r2, [pc, #136]	; (8003bb8 <TIM_Base_SetConfig+0xd0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d007      	beq.n	8003b42 <TIM_Base_SetConfig+0x5a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a21      	ldr	r2, [pc, #132]	; (8003bbc <TIM_Base_SetConfig+0xd4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d003      	beq.n	8003b42 <TIM_Base_SetConfig+0x5a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a20      	ldr	r2, [pc, #128]	; (8003bc0 <TIM_Base_SetConfig+0xd8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d108      	bne.n	8003b54 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a0e      	ldr	r2, [pc, #56]	; (8003bb4 <TIM_Base_SetConfig+0xcc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00b      	beq.n	8003b98 <TIM_Base_SetConfig+0xb0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a0d      	ldr	r2, [pc, #52]	; (8003bb8 <TIM_Base_SetConfig+0xd0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d007      	beq.n	8003b98 <TIM_Base_SetConfig+0xb0>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a0c      	ldr	r2, [pc, #48]	; (8003bbc <TIM_Base_SetConfig+0xd4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d003      	beq.n	8003b98 <TIM_Base_SetConfig+0xb0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a0b      	ldr	r2, [pc, #44]	; (8003bc0 <TIM_Base_SetConfig+0xd8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d103      	bne.n	8003ba0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	615a      	str	r2, [r3, #20]
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40014000 	.word	0x40014000
 8003bbc:	40014400 	.word	0x40014400
 8003bc0:	40014800 	.word	0x40014800

08003bc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f023 0201 	bic.w	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0303 	bic.w	r3, r3, #3
 8003bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f023 0302 	bic.w	r3, r3, #2
 8003c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a28      	ldr	r2, [pc, #160]	; (8003cc0 <TIM_OC1_SetConfig+0xfc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00b      	beq.n	8003c3c <TIM_OC1_SetConfig+0x78>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a27      	ldr	r2, [pc, #156]	; (8003cc4 <TIM_OC1_SetConfig+0x100>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d007      	beq.n	8003c3c <TIM_OC1_SetConfig+0x78>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a26      	ldr	r2, [pc, #152]	; (8003cc8 <TIM_OC1_SetConfig+0x104>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_OC1_SetConfig+0x78>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a25      	ldr	r2, [pc, #148]	; (8003ccc <TIM_OC1_SetConfig+0x108>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d10c      	bne.n	8003c56 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f023 0308 	bic.w	r3, r3, #8
 8003c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f023 0304 	bic.w	r3, r3, #4
 8003c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a19      	ldr	r2, [pc, #100]	; (8003cc0 <TIM_OC1_SetConfig+0xfc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00b      	beq.n	8003c76 <TIM_OC1_SetConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <TIM_OC1_SetConfig+0x100>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <TIM_OC1_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <TIM_OC1_SetConfig+0x104>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_OC1_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <TIM_OC1_SetConfig+0x108>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d111      	bne.n	8003c9a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	621a      	str	r2, [r3, #32]
}
 8003cb4:	bf00      	nop
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40014000 	.word	0x40014000
 8003cc8:	40014400 	.word	0x40014400
 8003ccc:	40014800 	.word	0x40014800

08003cd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	f023 0210 	bic.w	r2, r3, #16
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f023 0320 	bic.w	r3, r3, #32
 8003d1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a24      	ldr	r2, [pc, #144]	; (8003dc0 <TIM_OC2_SetConfig+0xf0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d10d      	bne.n	8003d50 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a1b      	ldr	r2, [pc, #108]	; (8003dc0 <TIM_OC2_SetConfig+0xf0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00b      	beq.n	8003d70 <TIM_OC2_SetConfig+0xa0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a1a      	ldr	r2, [pc, #104]	; (8003dc4 <TIM_OC2_SetConfig+0xf4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <TIM_OC2_SetConfig+0xa0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <TIM_OC2_SetConfig+0xf8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_OC2_SetConfig+0xa0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <TIM_OC2_SetConfig+0xfc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d113      	bne.n	8003d98 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d76:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d7e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	621a      	str	r2, [r3, #32]
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40012c00 	.word	0x40012c00
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40014400 	.word	0x40014400
 8003dcc:	40014800 	.word	0x40014800

08003dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0303 	bic.w	r3, r3, #3
 8003e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a23      	ldr	r2, [pc, #140]	; (8003ebc <TIM_OC3_SetConfig+0xec>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d10d      	bne.n	8003e4e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e4c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a1a      	ldr	r2, [pc, #104]	; (8003ebc <TIM_OC3_SetConfig+0xec>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00b      	beq.n	8003e6e <TIM_OC3_SetConfig+0x9e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a19      	ldr	r2, [pc, #100]	; (8003ec0 <TIM_OC3_SetConfig+0xf0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d007      	beq.n	8003e6e <TIM_OC3_SetConfig+0x9e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a18      	ldr	r2, [pc, #96]	; (8003ec4 <TIM_OC3_SetConfig+0xf4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d003      	beq.n	8003e6e <TIM_OC3_SetConfig+0x9e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a17      	ldr	r2, [pc, #92]	; (8003ec8 <TIM_OC3_SetConfig+0xf8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d113      	bne.n	8003e96 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	621a      	str	r2, [r3, #32]
}
 8003eb0:	bf00      	nop
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40012c00 	.word	0x40012c00
 8003ec0:	40014000 	.word	0x40014000
 8003ec4:	40014400 	.word	0x40014400
 8003ec8:	40014800 	.word	0x40014800

08003ecc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	031b      	lsls	r3, r3, #12
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a16      	ldr	r2, [pc, #88]	; (8003f84 <TIM_OC4_SetConfig+0xb8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00b      	beq.n	8003f48 <TIM_OC4_SetConfig+0x7c>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <TIM_OC4_SetConfig+0xbc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d007      	beq.n	8003f48 <TIM_OC4_SetConfig+0x7c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a14      	ldr	r2, [pc, #80]	; (8003f8c <TIM_OC4_SetConfig+0xc0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d003      	beq.n	8003f48 <TIM_OC4_SetConfig+0x7c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a13      	ldr	r2, [pc, #76]	; (8003f90 <TIM_OC4_SetConfig+0xc4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d109      	bne.n	8003f5c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	019b      	lsls	r3, r3, #6
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	621a      	str	r2, [r3, #32]
}
 8003f76:	bf00      	nop
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40014400 	.word	0x40014400
 8003f90:	40014800 	.word	0x40014800

08003f94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003fd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a15      	ldr	r2, [pc, #84]	; (8004040 <TIM_OC5_SetConfig+0xac>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00b      	beq.n	8004006 <TIM_OC5_SetConfig+0x72>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a14      	ldr	r2, [pc, #80]	; (8004044 <TIM_OC5_SetConfig+0xb0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d007      	beq.n	8004006 <TIM_OC5_SetConfig+0x72>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a13      	ldr	r2, [pc, #76]	; (8004048 <TIM_OC5_SetConfig+0xb4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d003      	beq.n	8004006 <TIM_OC5_SetConfig+0x72>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a12      	ldr	r2, [pc, #72]	; (800404c <TIM_OC5_SetConfig+0xb8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d109      	bne.n	800401a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	621a      	str	r2, [r3, #32]
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40012c00 	.word	0x40012c00
 8004044:	40014000 	.word	0x40014000
 8004048:	40014400 	.word	0x40014400
 800404c:	40014800 	.word	0x40014800

08004050 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800407e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	051b      	lsls	r3, r3, #20
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <TIM_OC6_SetConfig+0xb0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00b      	beq.n	80040c4 <TIM_OC6_SetConfig+0x74>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a15      	ldr	r2, [pc, #84]	; (8004104 <TIM_OC6_SetConfig+0xb4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d007      	beq.n	80040c4 <TIM_OC6_SetConfig+0x74>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a14      	ldr	r2, [pc, #80]	; (8004108 <TIM_OC6_SetConfig+0xb8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_OC6_SetConfig+0x74>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a13      	ldr	r2, [pc, #76]	; (800410c <TIM_OC6_SetConfig+0xbc>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d109      	bne.n	80040d8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	029b      	lsls	r3, r3, #10
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	621a      	str	r2, [r3, #32]
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40014000 	.word	0x40014000
 8004108:	40014400 	.word	0x40014400
 800410c:	40014800 	.word	0x40014800

08004110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f023 0201 	bic.w	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800413a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f023 030a 	bic.w	r3, r3, #10
 800414c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416e:	b480      	push	{r7}
 8004170:	b087      	sub	sp, #28
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0210 	bic.w	r2, r3, #16
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	031b      	lsls	r3, r3, #12
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	621a      	str	r2, [r3, #32]
}
 80041c2:	bf00      	nop
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b085      	sub	sp, #20
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f043 0307 	orr.w	r3, r3, #7
 80041f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	609a      	str	r2, [r3, #8]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800421e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	021a      	lsls	r2, r3, #8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	431a      	orrs	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4313      	orrs	r3, r2
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2201      	movs	r2, #1
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	43db      	mvns	r3, r3
 8004266:	401a      	ands	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a1a      	ldr	r2, [r3, #32]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	621a      	str	r2, [r3, #32]
}
 8004282:	bf00      	nop
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e04f      	b.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a21      	ldr	r2, [pc, #132]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d108      	bne.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a14      	ldr	r2, [pc, #80]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d009      	beq.n	800431c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d004      	beq.n	800431c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a10      	ldr	r2, [pc, #64]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d10c      	bne.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004322:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	4313      	orrs	r3, r2
 800432c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	40012c00 	.word	0x40012c00
 8004358:	40014000 	.word	0x40014000

0800435c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004374:	2302      	movs	r3, #2
 8004376:	e060      	b.n	800443a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	041b      	lsls	r3, r3, #16
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a14      	ldr	r2, [pc, #80]	; (8004448 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d115      	bne.n	8004428 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	051b      	lsls	r3, r3, #20
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40012c00 	.word	0x40012c00

0800444c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <__libc_init_array>:
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	4d0d      	ldr	r5, [pc, #52]	; (80044c0 <__libc_init_array+0x38>)
 800448c:	4c0d      	ldr	r4, [pc, #52]	; (80044c4 <__libc_init_array+0x3c>)
 800448e:	1b64      	subs	r4, r4, r5
 8004490:	10a4      	asrs	r4, r4, #2
 8004492:	2600      	movs	r6, #0
 8004494:	42a6      	cmp	r6, r4
 8004496:	d109      	bne.n	80044ac <__libc_init_array+0x24>
 8004498:	4d0b      	ldr	r5, [pc, #44]	; (80044c8 <__libc_init_array+0x40>)
 800449a:	4c0c      	ldr	r4, [pc, #48]	; (80044cc <__libc_init_array+0x44>)
 800449c:	f000 f820 	bl	80044e0 <_init>
 80044a0:	1b64      	subs	r4, r4, r5
 80044a2:	10a4      	asrs	r4, r4, #2
 80044a4:	2600      	movs	r6, #0
 80044a6:	42a6      	cmp	r6, r4
 80044a8:	d105      	bne.n	80044b6 <__libc_init_array+0x2e>
 80044aa:	bd70      	pop	{r4, r5, r6, pc}
 80044ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b0:	4798      	blx	r3
 80044b2:	3601      	adds	r6, #1
 80044b4:	e7ee      	b.n	8004494 <__libc_init_array+0xc>
 80044b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ba:	4798      	blx	r3
 80044bc:	3601      	adds	r6, #1
 80044be:	e7f2      	b.n	80044a6 <__libc_init_array+0x1e>
 80044c0:	08004530 	.word	0x08004530
 80044c4:	08004530 	.word	0x08004530
 80044c8:	08004530 	.word	0x08004530
 80044cc:	08004534 	.word	0x08004534

080044d0 <memset>:
 80044d0:	4402      	add	r2, r0
 80044d2:	4603      	mov	r3, r0
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d100      	bne.n	80044da <memset+0xa>
 80044d8:	4770      	bx	lr
 80044da:	f803 1b01 	strb.w	r1, [r3], #1
 80044de:	e7f9      	b.n	80044d4 <memset+0x4>

080044e0 <_init>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr

080044ec <_fini>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	bf00      	nop
 80044f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f2:	bc08      	pop	{r3}
 80044f4:	469e      	mov	lr, r3
 80044f6:	4770      	bx	lr
